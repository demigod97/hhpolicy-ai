<?xml version="1.0" encoding="UTF-8"?>
<files>
	<file path='.github\ISSUE_TEMPLATE\bug_report.md'>
		---
		name: Bug report
		about: Create a report to help us improve
		title: ''
		labels: ''
		assignees: ''
		
		---
		
		**Describe the bug**
		A clear and concise description of what the bug is.
		
		**To Reproduce**
		Steps to reproduce the behavior:
		1. Go to '...'
		2. Click on '....'
		3. Scroll down to '....'
		4. See error
		
		**Expected behavior**
		A clear and concise description of what you expected to happen.
		
		**Screenshots**
		If applicable, add screenshots to help explain your problem.
		
		**Desktop (please complete the following information):**
		 - OS: [e.g. iOS]
		 - Browser [e.g. chrome, safari]
		 - Version [e.g. 22]
		
		**Smartphone (please complete the following information):**
		 - Device: [e.g. iPhone6]
		 - OS: [e.g. iOS8.1]
		 - Browser [e.g. stock browser, safari]
		 - Version [e.g. 22]
		
		**Additional context**
		Add any other context about the problem here.</file>
	<file path='.github\workflows\deploy.yml'>
		name: Deploy Supabase Edge Functions and Migrations
		
		on:
		  workflow_dispatch:
		    inputs:
		      environment:
		        description: 'Environment to deploy to'
		        required: false
		        default: 'production'
		
		jobs:
		  deploy:
		    runs-on: ubuntu-latest
		
		    steps:
		      - name: Checkout repository
		        uses: actions/checkout@v4
		
		      - name: Set up Node.js
		        uses: actions/setup-node@v4
		        with:
		          node-version: '20'
		
		      - name: Install Supabase CLI
		        run: |
		          npm install -g supabase
		
		      - name: Authenticate Supabase CLI
		        run: |
		          supabase login --access-token "${{ secrets.SUPABASE_ACCESS_TOKEN }}"
		
		      - name: Link to Supabase Project
		        run: |
		          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
		
		      - name: Deploy Supabase Edge Functions
		        run: |
		          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
		
		      - name: Run Supabase Migrations
		        run: |
		          supabase db push --db-url "postgresql://postgres:${{ secrets.SUPABASE_DB_PASSWORD }}@db.${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co:5432/postgres"</file>
	<file path='.gitignore'>
		# Logs
		logs
		*.log
		npm-debug.log*
		yarn-debug.log*
		yarn-error.log*
		pnpm-debug.log*
		lerna-debug.log*
		
		node_modules
		dist
		dist-ssr
		*.local
		
		# Editor directories and files
		.vscode/*
		!.vscode/extensions.json
		.idea
		.DS_Store
		*.suo
		*.ntvs*
		*.njsproj
		*.sln
		*.sw?
		.env</file>
	<file path='components.json'>
		{
		  "$schema": "https://ui.shadcn.com/schema.json",
		  "style": "default",
		  "rsc": false,
		  "tsx": true,
		  "tailwind": {
		    "config": "tailwind.config.ts",
		    "css": "src/index.css",
		    "baseColor": "slate",
		    "cssVariables": true,
		    "prefix": ""
		  },
		  "aliases": {
		    "components": "@/components",
		    "utils": "@/lib/utils",
		    "ui": "@/components/ui",
		    "lib": "@/lib",
		    "hooks": "@/hooks"
		  }
		}</file>
	<file path='eslint.config.js'>
		import js from "@eslint/js";
		import globals from "globals";
		import reactHooks from "eslint-plugin-react-hooks";
		import reactRefresh from "eslint-plugin-react-refresh";
		import tseslint from "typescript-eslint";
		
		export default tseslint.config(
		  { ignores: ["dist"] },
		  {
		    extends: [js.configs.recommended, ...tseslint.configs.recommended],
		    files: ["**/*.{ts,tsx}"],
		    languageOptions: {
		      ecmaVersion: 2020,
		      globals: globals.browser,
		    },
		    plugins: {
		      "react-hooks": reactHooks,
		      "react-refresh": reactRefresh,
		    },
		    rules: {
		      ...reactHooks.configs.recommended.rules,
		      "react-refresh/only-export-components": [
		        "warn",
		        { allowConstantExport: true },
		      ],
		      "@typescript-eslint/no-unused-vars": "off",
		    },
		  }
		);</file>
	<file path='index.html'><![CDATA[
		
		<!DOCTYPE html>
		<html lang="en">
		  <head>
		    <meta charset="UTF-8" />
		    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
		    <title>InsightsLM</title>
		    <meta name="description" content="Your AI-powered knowledge companion" />
		    <meta name="author" content="Lovable" />
		
		    <meta property="og:title" content="InsightsLM" />
		    <meta property="og:description" content="Your AI-powered knowledge companion" />
		    <meta property="og:type" content="website" />
		    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
		
		    <meta name="twitter:card" content="summary_large_image" />
		    <meta name="twitter:site" content="@lovable_dev" />
		    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
		  </head>
		
		  <body>
		    <div id="root"></div>
		    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
		    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
		    <script type="module" src="/src/main.tsx"></script>
		  </body>
		</html>]]></file>
	<file path='LICENSE'>
		MIT License
		
		Copyright (c) 2025 The AI Automators
		
		Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
		
		The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
		
		THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</file>
	<file path='n8n\Import_Insights_LM_Workflows.json'>
		{
		  "name": "Import Insights LM Workflows",
		  "nodes": [
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "d0ee4497-e902-40c5-8938-811bb206f6c8",
		              "name": "workflow-files",
		              "value": "=[\n    {\n      \"file_type\": \"extract-text\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Extract_Text.json\"\n    },\n    {\n      \"file_type\": \"generate-notebook-details\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Generate_Notebook_Details.json\"\n    },\n    {\n      \"file_type\": \"upsert-to-vector-store\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Upsert_to_Vector_Store.json\"\n    },\n    {\n      \"file_type\": \"process-additional-sources\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Process_Additional_Sources.json\"\n    },\n    {\n      \"file_type\": \"chat\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Chat.json\"\n    },\n    {\n      \"file_type\": \"podcast-generation\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Podcast_Generation.json\"\n    }\n  ]",
		              "type": "array"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        580,
		        420
		      ],
		      "id": "31fb1beb-56fb-49a4-8ba8-27f8f4f483c4",
		      "name": "Workflow File URLs to Download"
		    },
		    {
		      "parameters": {
		        "fieldToSplitOut": "[\"workflow-files\"]",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.splitOut",
		      "typeVersion": 1,
		      "position": [
		        800,
		        420
		      ],
		      "id": "ba2e710c-b319-4b58-a140-20f2a3261e0b",
		      "name": "Split Out"
		    },
		    {
		      "parameters": {
		        "options": {}
		      },
		      "type": "n8n-nodes-base.splitInBatches",
		      "typeVersion": 3,
		      "position": [
		        1020,
		        420
		      ],
		      "id": "9b8a7fcc-56e6-412d-91a4-46b3f6ef1d46",
		      "name": "Loop Over Items"
		    },
		    {
		      "parameters": {
		        "url": "={{ $json.file_url }}?cacheBust={{ $now.toISO() }}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        1300,
		        -40
		      ],
		      "id": "abe4c5e2-1a42-4e71-b029-f84ef6de88cc",
		      "name": "Download Workflow File"
		    },
		    {
		      "parameters": {
		        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/39evQ95L86jhtb3I/g, $('Enter User Values').first().json['Enter the n8n Custom Webhook Header Auth ID'])\n    .replace(/yfvmutoxmibqzvyklggr/g, $('Enter User Values').first().json['Enter Supabase Project ID'])\n    .replace(/OeYUddl4OaIohMCC/g, $('Enter User Values').first().json['Enter your n8n Supabase Credential ID'])\n    .replace(/hNalDChhNUDtYG7T/g, $('Enter User Values').first().json['Enter the n8n OpenAI Credential ID'])\n    .replace(/PzC8XiX0nzmyH9AA/g, $('Enter User Values').first().json['Enter the n8n Google Gemini (PaLM) Credential ID'])\n    .replace(/OuPBM6n0hyobX8h6/g, $('Enter User Values').first().json['Enter the n8n Postgres Credential ID']);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        1520,
		        -40
		      ],
		      "id": "1d07aa31-e50c-4cf3-8eb1-2b481c6055f3",
		      "name": "Find and Replace"
		    },
		    {
		      "parameters": {
		        "rules": {
		          "values": [
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "loose",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
		                    "rightValue": "generate-notebook-details",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals"
		                    },
		                    "id": "304285e6-dee5-4ff7-adbd-6ee937ae58f4"
		                  }
		                ],
		                "combinator": "and"
		              }
		            },
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "loose",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "id": "5b066c3c-356a-4570-8eac-641bd3d515e1",
		                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
		                    "rightValue": "upsert-to-vector-store",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals",
		                      "name": "filter.operator.equals"
		                    }
		                  }
		                ],
		                "combinator": "and"
		              }
		            },
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "loose",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "id": "743b9cbe-e88b-45c1-8d2c-e372995f6c49",
		                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
		                    "rightValue": "process-additional-sources",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals",
		                      "name": "filter.operator.equals"
		                    }
		                  }
		                ],
		                "combinator": "and"
		              }
		            }
		          ]
		        },
		        "looseTypeValidation": true,
		        "options": {
		          "fallbackOutput": "extra"
		        }
		      },
		      "type": "n8n-nodes-base.switch",
		      "typeVersion": 3.2,
		      "position": [
		        1740,
		        -61
		      ],
		      "id": "38a4265e-e599-4337-980c-c28c4f602d2e",
		      "name": "Switch"
		    },
		    {
		      "parameters": {
		        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/AzZ5a2zCGU1O3MRV/g, $('n8n').first(0,0).json.id);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        2020,
		        -280
		      ],
		      "id": "18834b8a-a4c1-455b-85b7-9cbb82a36fc0",
		      "name": "Update Extract Text Workflow Reference"
		    },
		    {
		      "parameters": {
		        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/IQcdcedwXg2w3AuW/g, $('n8n').first(0,2).json.id);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        2020,
		        -100
		      ],
		      "id": "a14076eb-e04f-4648-8a08-9d3e768c760a",
		      "name": "Update Vector Upsert Workflow Reference"
		    },
		    {
		      "parameters": {
		        "operation": "create",
		        "workflowObject": "={{ $json.data }}",
		        "requestOptions": {}
		      },
		      "type": "n8n-nodes-base.n8n",
		      "typeVersion": 1,
		      "position": [
		        2460,
		        80
		      ],
		      "id": "4f4f5414-3537-447a-bdfb-343e44d8e563",
		      "name": "n8n",
		      "credentials": {
		        "n8nApi": {
		          "id": "telF4gea0lgT56np",
		          "name": "n8n account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "866c90b8-42da-4178-93ce-26665d38d5ee",
		              "name": "Enter Supabase Project ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "0c78076e-6b86-4521-9f56-53bf537deb7d",
		              "name": "Enter your n8n Supabase Credential ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "a08496dd-25cb-4905-81a5-15fe8bb73c87",
		              "name": "Enter the n8n Custom Webhook Header Auth ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "8adb8fb6-9daf-4385-bfce-547e0b982a8e",
		              "name": "Enter the n8n Postgres Credential ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "a78cb031-db06-4b0f-9edd-50d231ee068f",
		              "name": "Enter the n8n Google Gemini (PaLM) Credential ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "de05aeff-fa19-4da9-b37d-db62cf8c8b20",
		              "name": "Enter the n8n OpenAI Credential ID",
		              "value": "",
		              "type": "string"
		            },
		            {
		              "id": "2ae2acd0-422f-4f37-bb94-70859c9e7f69",
		              "name": "Enter your n8n Base URL (The part before the first single slash)",
		              "value": "",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        60,
		        420
		      ],
		      "id": "20bd3864-a6fd-49f3-a66e-9b4df0efadcd",
		      "name": "Enter User Values"
		    },
		    {
		      "parameters": {},
		      "type": "n8n-nodes-base.manualTrigger",
		      "typeVersion": 1,
		      "position": [
		        -180,
		        420
		      ],
		      "id": "16d38df6-a164-4a33-9237-43a36a6da4c7",
		      "name": "When clicking ‘Execute workflow’"
		    },
		    {
		      "parameters": {
		        "content": "## UPDATE - Add Values\nYou need to fill out all fields here before running this workflow",
		        "height": 340,
		        "width": 280,
		        "color": 6
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        -20,
		        280
		      ],
		      "id": "d68ad448-851e-48b1-a885-93b91dad58b0",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "content": "## UPDATE - n8n Node\nCreate an API key in your n8n instance and set the credentials in this node\n\nTo create a key click the 3 dots beside your name on the bottom left, then Settings > then n8n API > then Create API Key",
		        "height": 420,
		        "width": 360,
		        "color": 6
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        2320,
		        -140
		      ],
		      "id": "60d5a9eb-d113-4280-b4a9-33648e5897f5",
		      "name": "Sticky Note1"
		    },
		    {
		      "parameters": {
		        "conditions": {
		          "options": {
		            "caseSensitive": true,
		            "leftValue": "",
		            "typeValidation": "strict",
		            "version": 2
		          },
		          "conditions": [
		            {
		              "id": "fdfeb2e5-e42b-4048-a459-c9b09595104d",
		              "leftValue": "={{ $json[\"Enter Supabase Project ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "8abfdbe7-0c09-4453-87c6-ce6a397a45b0",
		              "leftValue": "={{ $json[\"Enter your n8n Supabase Credential ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "4d4af96c-0fcd-4f4d-bcb9-5e0ebc5da5f3",
		              "leftValue": "={{ $json[\"Enter the n8n Custom Webhook Header Auth ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "69dd9550-e36f-4612-8e78-f44331b08164",
		              "leftValue": "={{ $json[\"Enter the n8n Postgres Credential ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "44fe849a-0a5b-4dcd-ab15-7281f5427139",
		              "leftValue": "={{ $json[\"Enter the n8n Google Gemini (PaLM) Credential ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "aeca18f7-7dd0-4bf2-8181-a1e63725e8d6",
		              "leftValue": "={{ $json[\"Enter the n8n OpenAI Credential ID\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            },
		            {
		              "id": "3dcb028f-5ca4-45c8-8418-4b037adf9a1c",
		              "leftValue": "={{ $json[\"Enter your n8n Base URL (The part before the first single slash)\"] }}",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "notEmpty",
		                "singleValue": true
		              }
		            }
		          ],
		          "combinator": "and"
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.if",
		      "typeVersion": 2.2,
		      "position": [
		        280,
		        420
		      ],
		      "id": "36a61d27-9537-4df3-ba67-b85d11c56136",
		      "name": "Checking Values are Set"
		    },
		    {
		      "parameters": {
		        "jsCode": "// This script generates a single, structured output item.\n\n// Use a template literal (backticks) for the multi-line start message.\nconst start_message = `Success. Your n8n Workflows have been set up.\nThe following are the Secrets that need to be created in Supabase`;\n\n// Define the array of secret objects.\n// A placeholder is used for secrets that need a user-defined value.\nconst secrets_to_create = [\n  {\n    \"Key\": \"AUDIO_GENERATION_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/4c4699bc-004b-4ca3-8923-373ddd4a274e\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_CHAT_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/2fabf43f-6e6e-424b-8e93-9150e9ce7d6c\"\n  },\n  {\n    \"Key\": \"ADDITIONAL_SOURCES_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/670882ea-5c1e-4b50-9f41-4792256af985\"\n  },\n  {\n    \"Key\": \"DOCUMENT_PROCESSING_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/19566c6c-e0a5-4a8f-ba1a-5203c2b663b7\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_GENERATION_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/0c488f50-8d6a-48a0-b056-5f7cfca9efe2\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_GENERATION_AUTH\",\n    \"Value\": \"Provide the password you created earlier\"\n  },\n  {\n    \"Key\": \"OPENAI_API_KEY\",\n    \"Value\": \"Provide your OpenAI Key\"\n  }\n];\n\nconst end_message = 'Ensure you have FFMPEG installed on this server for the Podcast audio generation to work';\n\n// Return the final payload in the required n8n format (an array of items).\nreturn [\n  {\n    json: {\n      start_message: start_message,\n      supabase_secrets: secrets_to_create,\n      end_message: end_message\n    }\n  }\n];"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        1380,
		        480
		      ],
		      "id": "fe36dfff-d3f5-4b42-832c-0dd6a0a83718",
		      "name": "Read This After Executing Workflow"
		    },
		    {
		      "parameters": {
		        "content": "# Import Insights LM Workflows\n- Only run this workflow once to avoid having duplicate workflows in your project.\n- If you do create duplicate workflows, you can archive them in your instance\n- https://github.com/theaiautomators/insights-lm-public",
		        "width": 680,
		        "color": 6
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        220,
		        -340
		      ],
		      "id": "90c1b637-8da6-46f9-9560-f5dc04c01808",
		      "name": "Sticky Note2"
		    },
		    {
		      "parameters": {
		        "content": "## READ OUTPUT AFTER SUCCESSFUL EXECUTION\nI output the various Supabase secrets that you need to create in this node",
		        "height": 340,
		        "width": 340,
		        "color": 6
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        1280,
		        320
		      ],
		      "id": "3f459a8d-b55c-4851-9b56-cd5911310f76",
		      "name": "Sticky Note3"
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)",
		        "width": 340,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        -160,
		        -340
		      ],
		      "id": "128358e2-08f0-45e5-a071-c5c2918dea88",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Workflow File URLs to Download": {
		      "main": [
		        [
		          {
		            "node": "Split Out",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Split Out": {
		      "main": [
		        [
		          {
		            "node": "Loop Over Items",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Loop Over Items": {
		      "main": [
		        [
		          {
		            "node": "Read This After Executing Workflow",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Download Workflow File",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Download Workflow File": {
		      "main": [
		        [
		          {
		            "node": "Find and Replace",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Find and Replace": {
		      "main": [
		        [
		          {
		            "node": "Switch",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Switch": {
		      "main": [
		        [
		          {
		            "node": "Update Extract Text Workflow Reference",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Update Extract Text Workflow Reference",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Update Vector Upsert Workflow Reference",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "n8n",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "n8n": {
		      "main": [
		        [
		          {
		            "node": "Loop Over Items",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Update Extract Text Workflow Reference": {
		      "main": [
		        [
		          {
		            "node": "n8n",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Update Vector Upsert Workflow Reference": {
		      "main": [
		        [
		          {
		            "node": "n8n",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Enter User Values": {
		      "main": [
		        [
		          {
		            "node": "Checking Values are Set",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "When clicking ‘Execute workflow’": {
		      "main": [
		        [
		          {
		            "node": "Enter User Values",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Checking Values are Set": {
		      "main": [
		        [
		          {
		            "node": "Workflow File URLs to Download",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": false,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "67ee3da4-f5a8-49f6-bdfd-fde3da9d1698",
		  "meta": {
		    "templateCredsSetupCompleted": true,
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "ihfgsYrKHHNlCChl",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}</file>
	<file path='n8n\InsightsLM___Chat.json'>
		{
		  "name": "InsightsLM - Chat",
		  "nodes": [
		    {
		      "parameters": {
		        "httpMethod": "POST",
		        "path": "2fabf43f-6e6e-424b-8e93-9150e9ce7d6c",
		        "authentication": "headerAuth",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.webhook",
		      "typeVersion": 2,
		      "position": [
		        32,
		        400
		      ],
		      "id": "14c9e2d7-57f1-46bb-a708-be12cebdd5d7",
		      "name": "Webhook",
		      "webhookId": "2fabf43f-6e6e-424b-8e93-9150e9ce7d6c",
		      "credentials": {
		        "httpHeaderAuth": {
		          "id": "39evQ95L86jhtb3I",
		          "name": "MyNoteBookLM Auth"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "promptType": "define",
		        "text": "={{ $json.body.message }}",
		        "hasOutputParser": true,
		        "options": {
		          "systemMessage": "=You are tasked with answering a question using provided chunks of information. \n\nYour goal is to provide an accurate answer from these chunks while citing your sources. When you use information from a specific chunk in your answer, you must cite it using the specified JSON output format.\n\nThe citation should appear at the end of the sentence or paragraph where the information is used.\n\nTake note of the index of the chunk returned from the vector store, the source_id of the chunk as well as the lines from and lines to... that way we can trace back the cited source.\n\nIf you cannot answer the question using the provided chunks, say \"Sorry I don't know\".\n\nImportant: You MUST trigger the \"Supabase Vector Store\" tool\nImportant: Only based your answers on information in the provided chunks from the vector store"
		        }
		      },
		      "type": "@n8n/n8n-nodes-langchain.agent",
		      "typeVersion": 1.9,
		      "position": [
		        288,
		        320
		      ],
		      "id": "37e1758f-633c-475c-9358-919dd3babe51",
		      "name": "AI Agent",
		      "retryOnFail": true,
		      "waitBetweenTries": 5000,
		      "onError": "continueErrorOutput"
		    },
		    {
		      "parameters": {
		        "sessionIdType": "customKey",
		        "sessionKey": "={{ $json.body.session_id }}",
		        "contextWindowLength": 20
		      },
		      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
		      "typeVersion": 1.3,
		      "position": [
		        400,
		        704
		      ],
		      "id": "979c2e58-502d-4ede-9c3d-4cdc3d73eec6",
		      "name": "Postgres Chat Memory",
		      "credentials": {
		        "postgres": {
		          "id": "OuPBM6n0hyobX8h6",
		          "name": "Postgres account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "mode": "retrieve-as-tool",
		        "toolName": "retrieve_knowledge",
		        "toolDescription": "Retrieve releveant information",
		        "tableName": {
		          "__rl": true,
		          "value": "documents",
		          "mode": "list",
		          "cachedResultName": "documents"
		        },
		        "topK": 10,
		        "options": {
		          "metadata": {
		            "metadataValues": [
		              {
		                "name": "notebook_id",
		                "value": "={{ $json.body.session_id }}"
		              }
		            ]
		          }
		        }
		      },
		      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
		      "typeVersion": 1.1,
		      "position": [
		        560,
		        640
		      ],
		      "id": "5af4fbba-0d6e-4390-8a93-80f8fd8fa400",
		      "name": "Supabase Vector Store",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        640,
		        832
		      ],
		      "id": "5569f32d-2f1c-47de-8f8a-2957807a3a8d",
		      "name": "Embeddings OpenAI",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "jsonSchemaExample": "{\n\t\"output\": [\n  {\n    \"text\": \"Formula 1 (also known as Formula One) is a premier motorsport championship organized by the FIA...\",\n    \"citations\": [\n      {\n        \"chunk_index\": 0,\n        \"chunk_source_id\": \"701bd18c-2531-48e5-8d09-df22e7cc3d21\",\n        \"chunk_lines_from\": 25,\n        \"chunk_lines_to\": 50\n      }\n    ]\n  },\n  {\n    \"text\": \"Formula 1 (also known as Formula One) is a premier motorsport championship organized by the FIA...\",\n    \"citations\": [\n      {\n        \"chunk_index\": 0,\n        \"chunk_source_id\": \"701bd18c-2531-48e5-8d09-df22e7cc3d21\",\n        \"chunk_lines_from\": 25,\n        \"chunk_lines_to\": 50\n      }\n    ]\n  }\n]\n}"
		      },
		      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
		      "typeVersion": 1.2,
		      "position": [
		        864,
		        528
		      ],
		      "id": "9586db41-3eb7-4bf4-8c4f-9671eb63cd52",
		      "name": "Structured Output Parser"
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- Configure the Supabase nodes to reference your Project",
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        672,
		        0
		      ],
		      "id": "068ff528-d836-43f0-bdb2-474bb1128277",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
		      "typeVersion": 1,
		      "position": [
		        64,
		        704
		      ],
		      "id": "4282631f-e42c-4fd9-980d-69aa0c066c96",
		      "name": "Google Gemini Chat Model",
		      "credentials": {
		        "googlePalmApi": {
		          "id": "PzC8XiX0nzmyH9AA",
		          "name": "Google Gemini(PaLM) Api account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "model": {
		          "__rl": true,
		          "value": "claude-3-7-sonnet-20250219",
		          "mode": "list",
		          "cachedResultName": "Claude Sonnet 3.7"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
		      "typeVersion": 1.3,
		      "position": [
		        -96,
		        704
		      ],
		      "id": "e5d9cea8-ad20-422a-9092-9cd509bf7e53",
		      "name": "Anthropic Chat Model",
		      "credentials": {
		        "anthropicApi": {
		          "id": "LIuOf61utMGpqNxm",
		          "name": "Anthropic account LL"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "model": {
		          "__rl": true,
		          "value": "o3",
		          "mode": "list",
		          "cachedResultName": "o3"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        224,
		        704
		      ],
		      "id": "a8d7fd87-2664-453c-a7a0-f806b87be8ae",
		      "name": "OpenAI Chat Model1",
		      "credentials": {
		        "openAiApi": {
		          "id": "xh2u9lLOh2CjFrk7",
		          "name": "OpenAi account 4"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        0,
		        0
		      ],
		      "id": "a55b9fa7-9bfa-46b7-b26b-af95b504035f",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Webhook": {
		      "main": [
		        [
		          {
		            "node": "AI Agent",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "AI Agent": {
		      "main": [
		        [],
		        []
		      ]
		    },
		    "Postgres Chat Memory": {
		      "ai_memory": [
		        [
		          {
		            "node": "AI Agent",
		            "type": "ai_memory",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Supabase Vector Store": {
		      "ai_tool": [
		        [
		          {
		            "node": "AI Agent",
		            "type": "ai_tool",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Embeddings OpenAI": {
		      "ai_embedding": [
		        [
		          {
		            "node": "Supabase Vector Store",
		            "type": "ai_embedding",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Structured Output Parser": {
		      "ai_outputParser": [
		        [
		          {
		            "node": "AI Agent",
		            "type": "ai_outputParser",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Google Gemini Chat Model": {
		      "ai_languageModel": [
		        [
		          {
		            "node": "AI Agent",
		            "type": "ai_languageModel",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": false,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "bd3f9517-b2ae-4577-adaf-cf1ed774a9a9",
		  "meta": {
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "P7Pg2I5giQN6WgIJ",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}</file>
	<file path='n8n\InsightsLM___Extract_Text.json'>
		{
		  "name": "InsightsLM - Extract Text",
		  "nodes": [
		    {
		      "parameters": {
		        "workflowInputs": {
		          "values": [
		            {
		              "name": "filePath"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.executeWorkflowTrigger",
		      "typeVersion": 1.1,
		      "position": [
		        60,
		        180
		      ],
		      "id": "92f1772c-8782-4c8d-9374-18b599a89655",
		      "name": "When Executed by Another Workflow"
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sign/sources/{{ $json.filePath }}",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "specifyBody": "json",
		        "jsonBody": "{\n  \"expiresIn\": 60\n}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        280,
		        180
		      ],
		      "id": "eacc6b5c-ff5f-40c1-bfb2-4968317a1ecc",
		      "name": "Generate Signed URL",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/{{ $json.signedURL }}",
		        "options": {
		          "response": {
		            "response": {
		              "fullResponse": true
		            }
		          }
		        }
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        500,
		        180
		      ],
		      "id": "9c5245a7-cbe8-4217-902b-7f1c42bfc3e2",
		      "name": "Download File"
		    },
		    {
		      "parameters": {
		        "rules": {
		          "values": [
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "strict",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
		                    "rightValue": "application/pdf",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals"
		                    },
		                    "id": "dc0dbe8c-70d5-4127-95f8-0fbd3f1a6bad"
		                  }
		                ],
		                "combinator": "and"
		              }
		            },
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "strict",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "id": "2307a9d5-7872-49dc-9aeb-60697b91dc84",
		                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
		                    "rightValue": "audio/mpeg",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals",
		                      "name": "filter.operator.equals"
		                    }
		                  }
		                ],
		                "combinator": "and"
		              }
		            },
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "strict",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "id": "87532eb7-b821-4d84-9d8e-c17136b0a88a",
		                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
		                    "rightValue": "text/plain",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals",
		                      "name": "filter.operator.equals"
		                    }
		                  }
		                ],
		                "combinator": "and"
		              }
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.switch",
		      "typeVersion": 3.2,
		      "position": [
		        720,
		        180
		      ],
		      "id": "b9643850-737a-405f-9ff0-1903d9424cd1",
		      "name": "Switch"
		    },
		    {
		      "parameters": {
		        "operation": "pdf",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.extractFromFile",
		      "typeVersion": 1,
		      "position": [
		        940,
		        -20
		      ],
		      "id": "ceeb5000-0dbc-4d18-9a29-7bc2c83ff959",
		      "name": "Extract from File"
		    },
		    {
		      "parameters": {
		        "resource": "audio",
		        "operation": "transcribe",
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.openAi",
		      "typeVersion": 1.8,
		      "position": [
		        940,
		        180
		      ],
		      "id": "e8c24cd1-0d5e-452e-97ef-cb997a9c603e",
		      "name": "OpenAI",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "1f5bee5d-939c-4df3-8e7d-0696ac3aa702",
		              "name": "text",
		              "value": "={{ $('Download File').item.json.data }}",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        940,
		        380
		      ],
		      "id": "45462a2a-a13e-45c0-8857-21f924c721ea",
		      "name": "Edit Fields1"
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "9fea51c0-b3a9-49b5-8608-3264c9d00304",
		              "name": "extracted_text",
		              "value": "={{ $json.text }}",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        1160,
		        180
		      ],
		      "id": "83cae3e9-ba19-4cdd-ac7e-0d4b4515eaad",
		      "name": "Extracted Text"
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Update the Host of the \"HTTP Requests\" to hit your project\n- Setup OpenAI credentials",
		        "width": 680,
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        1420,
		        100
		      ],
		      "id": "a550ac25-8226-46af-8c55-5f42f1abd0e9",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        60,
		        -200
		      ],
		      "id": "3f1e49b6-b7b4-49d0-a2e7-c50ab1cd8f3d",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Generate Signed URL": {
		      "main": [
		        [
		          {
		            "node": "Download File",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Download File": {
		      "main": [
		        [
		          {
		            "node": "Switch",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Switch": {
		      "main": [
		        [
		          {
		            "node": "Extract from File",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "OpenAI",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Edit Fields1",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "When Executed by Another Workflow": {
		      "main": [
		        [
		          {
		            "node": "Generate Signed URL",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Extract from File": {
		      "main": [
		        [
		          {
		            "node": "Extracted Text",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "OpenAI": {
		      "main": [
		        [
		          {
		            "node": "Extracted Text",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Edit Fields1": {
		      "main": [
		        [
		          {
		            "node": "Extracted Text",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": false,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "28c069b3-6e86-4169-82b3-50bcfad834f7",
		  "meta": {
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "AzZ5a2zCGU1O3MRV",
		  "tags": []
		}</file>
	<file path='n8n\InsightsLM___Generate_Notebook_Details.json'><![CDATA[
		{
		  "name": "InsightsLM - Generate Notebook Details",
		  "nodes": [
		    {
		      "parameters": {
		        "httpMethod": "POST",
		        "path": "0c488f50-8d6a-48a0-b056-5f7cfca9efe2",
		        "authentication": "headerAuth",
		        "responseMode": "responseNode",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.webhook",
		      "typeVersion": 2,
		      "position": [
		        140,
		        -200
		      ],
		      "id": "010f9da2-e94a-4eeb-8abc-7a11b5df02d3",
		      "name": "Webhook",
		      "webhookId": "0c488f50-8d6a-48a0-b056-5f7cfca9efe2",
		      "credentials": {
		        "httpHeaderAuth": {
		          "id": "39evQ95L86jhtb3I",
		          "name": "MyNoteBookLM Auth"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "options": {}
		      },
		      "type": "n8n-nodes-base.respondToWebhook",
		      "typeVersion": 1.2,
		      "position": [
		        1616,
		        -200
		      ],
		      "id": "d617ebc0-0500-403b-babc-205733ce36a4",
		      "name": "Respond to Webhook"
		    },
		    {
		      "parameters": {
		        "promptType": "define",
		        "text": "={{ $json.extracted_text }}",
		        "hasOutputParser": true,
		        "messages": {
		          "messageValues": [
		            {
		              "message": "=Based on the data provided, output an appropriate title and summary of the document. \n\nAlso output an appropriate UTF-8 emoji for the notebook. - example: 🏆\nAnd output an appropriate color from this list\n\nslate\ngray\nzinc\nneutral\nstone\nred\norange\namber\nyellow\nlime\ngreen\nemerald\nteal\ncyan\nsky\nblue\nindigo\nviolet\npurple\nfuchsia\npink\nrose\n\nAlso output a list of 5 Example Questions that could be asked of this document. For example \"How are the rules and regulations of tennis enforced?\" - Maximum 10 words each\n\nOnly output in JSON."
		            }
		          ]
		        }
		      },
		      "type": "@n8n/n8n-nodes-langchain.chainLlm",
		      "typeVersion": 1.6,
		      "position": [
		        1240,
		        -200
		      ],
		      "id": "66e19df1-eae3-43f0-93d1-56def58c1432",
		      "name": "Generate Title & Description"
		    },
		    {
		      "parameters": {
		        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\",\n  \"notebook_icon\": \"<ADD>\",\n  \"background_color\": \"<ADD>\",\n  \"example_questions\": [\"ADD\",\"ADD\"]\n}"
		      },
		      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
		      "typeVersion": 1.2,
		      "position": [
		        1388,
		        20
		      ],
		      "id": "5800e2a7-6e7f-4227-a124-43d05b2a8542",
		      "name": "Structured Output Parser"
		    },
		    {
		      "parameters": {
		        "model": {
		          "__rl": true,
		          "value": "gpt-4.1-mini",
		          "mode": "list",
		          "cachedResultName": "gpt-4.1-mini"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        1268,
		        20
		      ],
		      "id": "fb70591a-e3fb-4430-8902-70da6a397200",
		      "name": "OpenAI Chat Model",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "workflowId": {
		          "__rl": true,
		          "value": "AzZ5a2zCGU1O3MRV",
		          "mode": "list",
		          "cachedResultName": "InsightsLM - Extract Text"
		        },
		        "workflowInputs": {
		          "mappingMode": "defineBelow",
		          "value": {
		            "filePath": "={{ $json.body.filePath }}"
		          },
		          "matchingColumns": [
		            "filePath"
		          ],
		          "schema": [
		            {
		              "id": "filePath",
		              "displayName": "filePath",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            }
		          ],
		          "attemptToConvertTypes": false,
		          "convertFieldsToString": true
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.executeWorkflow",
		      "typeVersion": 1.2,
		      "position": [
		        1020,
		        0
		      ],
		      "id": "df36e109-47a6-4f1b-a775-740b4b3ceb7e",
		      "name": "Extract Text"
		    },
		    {
		      "parameters": {
		        "conditions": {
		          "options": {
		            "caseSensitive": true,
		            "leftValue": "",
		            "typeValidation": "strict",
		            "version": 2
		          },
		          "conditions": [
		            {
		              "id": "a25d08b6-2c99-4e08-af5f-62b13e6c4fdb",
		              "leftValue": "={{ $json.body.sourceType }}",
		              "rightValue": "=text",
		              "operator": {
		                "type": "string",
		                "operation": "equals",
		                "name": "filter.operator.equals"
		              }
		            },
		            {
		              "id": "3b5d5dce-76c4-445a-bab7-53c2114d52be",
		              "leftValue": "={{ $json.body.sourceType }}",
		              "rightValue": "website",
		              "operator": {
		                "type": "string",
		                "operation": "equals",
		                "name": "filter.operator.equals"
		              }
		            }
		          ],
		          "combinator": "or"
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.if",
		      "typeVersion": 2.2,
		      "position": [
		        360,
		        -200
		      ],
		      "id": "fdb03c27-aa2b-4ce4-a627-100599928646",
		      "name": "If"
		    },
		    {
		      "parameters": {
		        "conditions": {
		          "options": {
		            "caseSensitive": true,
		            "leftValue": "",
		            "typeValidation": "strict",
		            "version": 2
		          },
		          "conditions": [
		            {
		              "id": "ea61516d-9144-4b4b-904e-cf280d5bd08d",
		              "leftValue": "={{ $json.body.sourceType }}",
		              "rightValue": "text",
		              "operator": {
		                "type": "string",
		                "operation": "equals",
		                "name": "filter.operator.equals"
		              }
		            }
		          ],
		          "combinator": "and"
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.if",
		      "typeVersion": 2.2,
		      "position": [
		        580,
		        -300
		      ],
		      "id": "3fe02905-4fd7-45bc-bdec-72de6a6d8a97",
		      "name": "If1"
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "c5924d7e-6185-49a5-b61c-d244a40bd9b2",
		              "name": "=extracted_text",
		              "value": "={{ $json.body.content }}",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        1020,
		        -400
		      ],
		      "id": "6ca2f532-9da2-46cf-a88e-edc2264fd3a7",
		      "name": "Set Text"
		    },
		    {
		      "parameters": {
		        "url": "=https://r.jina.ai/{{ $json.body.filePath }}",
		        "sendHeaders": true,
		        "headerParameters": {
		          "parameters": [
		            {
		              "name": "Accept",
		              "value": "application/json"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        800,
		        -200
		      ],
		      "id": "7f96ba8f-875b-4368-9022-94c06acd9936",
		      "name": "Fetch Webpage with Jina.ai"
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "c5924d7e-6185-49a5-b61c-d244a40bd9b2",
		              "name": "=extracted_text",
		              "value": "={{ $json.data.content }}",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        1020,
		        -200
		      ],
		      "id": "0e106e48-8a5c-4142-8906-e2b5291d11e2",
		      "name": "Set Text1"
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- Configure the Extract Text node to trigger the \"Extract Text\" workflow",
		        "width": 680,
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        1360,
		        -440
		      ],
		      "id": "2011755c-70ad-4bd7-811b-e6bface53763",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        140,
		        -580
		      ],
		      "id": "b0e56210-db45-4b10-b513-ddbac2e7d222",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Webhook": {
		      "main": [
		        [
		          {
		            "node": "If",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Generate Title & Description": {
		      "main": [
		        [
		          {
		            "node": "Respond to Webhook",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Structured Output Parser": {
		      "ai_outputParser": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "ai_outputParser",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "OpenAI Chat Model": {
		      "ai_languageModel": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "ai_languageModel",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Extract Text": {
		      "main": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "If": {
		      "main": [
		        [
		          {
		            "node": "If1",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Extract Text",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "If1": {
		      "main": [
		        [
		          {
		            "node": "Set Text",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Fetch Webpage with Jina.ai",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Set Text": {
		      "main": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Fetch Webpage with Jina.ai": {
		      "main": [
		        [
		          {
		            "node": "Set Text1",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Set Text1": {
		      "main": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": true,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "dd220d9f-8dc3-44bc-889d-726cde238df3",
		  "meta": {
		    "templateCredsSetupCompleted": true,
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "5I6KohfDxYQ2xvQ7",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}]]></file>
	<file path='n8n\InsightsLM___Podcast_Generation.json'><![CDATA[
		{
		  "name": "InsightsLM - Podcast Generation",
		  "nodes": [
		    {
		      "parameters": {
		        "command": "if ffmpeg -version > /dev/null 2>&1; then\n  echo \"FFmpeg is installed\"\nelse\n  echo \"FFmpeg is NOT installed\"\nfi\n"
		      },
		      "type": "n8n-nodes-base.executeCommand",
		      "typeVersion": 1,
		      "position": [
		        -420,
		        1320
		      ],
		      "id": "b804e4c1-5f49-4fb6-943b-92f183c302a9",
		      "name": "Check is FFMPEG Installed"
		    },
		    {
		      "parameters": {
		        "conditions": {
		          "options": {
		            "caseSensitive": true,
		            "leftValue": "",
		            "typeValidation": "strict",
		            "version": 2
		          },
		          "conditions": [
		            {
		              "id": "05ef5c0e-fe71-4367-a88d-6ba65b8e4e48",
		              "leftValue": "={{ $json.stdout }}",
		              "rightValue": "=FFmpeg is installed",
		              "operator": {
		                "type": "string",
		                "operation": "equals"
		              }
		            },
		            {
		              "id": "3e8219ed-4cfb-4706-b6c0-6cdf4e1d1c3b",
		              "leftValue": "",
		              "rightValue": "",
		              "operator": {
		                "type": "string",
		                "operation": "equals",
		                "name": "filter.operator.equals"
		              }
		            }
		          ],
		          "combinator": "and"
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.if",
		      "typeVersion": 2.2,
		      "position": [
		        -200,
		        1320
		      ],
		      "id": "3adf9104-7091-4b88-b45b-efdb219c7742",
		      "name": "If"
		    },
		    {
		      "parameters": {
		        "respondWith": "json",
		        "responseBody": "{\n    \"message\": \"Workflow was started\"\n}",
		        "options": {
		          "responseCode": 200
		        }
		      },
		      "type": "n8n-nodes-base.respondToWebhook",
		      "typeVersion": 1.4,
		      "position": [
		        100,
		        1200
		      ],
		      "id": "54c2c7a8-af45-488e-9439-997d43ca2676",
		      "name": "Respond to Webhook"
		    },
		    {
		      "parameters": {
		        "respondWith": "json",
		        "responseBody": "{\n  \"error\": \"FFmpeg not installed\",\n  \"code\": \"FFMPEG_NOT_INSTALLED\",\n  \"details\": \"The server requires ffmpeg to be installed\"\n}",
		        "options": {
		          "responseCode": 500
		        }
		      },
		      "type": "n8n-nodes-base.respondToWebhook",
		      "typeVersion": 1.4,
		      "position": [
		        100,
		        1380
		      ],
		      "id": "2b492335-fad2-4981-8c5c-bd790256bddd",
		      "name": "Respond with 500 Error"
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- REQUIREMENT: FFMPEG needs to be installed on your server for this workflow to succeed\n- Configure the Supabase nodes to reference your Project\n- Configure your Google Cloud API credentials\n- Update the Host of the \"HTTP Requests\" to hit your project",
		        "width": 680,
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        2040,
		        840
		      ],
		      "id": "73fb9911-4a7c-413b-8bb9-9ec86a3f501e",
		      "name": "Sticky Note1"
		    },
		    {
		      "parameters": {
		        "httpMethod": "POST",
		        "path": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
		        "authentication": "headerAuth",
		        "responseMode": "responseNode",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.webhook",
		      "typeVersion": 2,
		      "position": [
		        -680,
		        1320
		      ],
		      "id": "36040655-7e2a-4af2-8524-f0e84fa2c874",
		      "name": "Webhook",
		      "webhookId": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
		      "credentials": {
		        "httpHeaderAuth": {
		          "id": "39evQ95L86jhtb3I",
		          "name": "MyNoteBookLM Auth"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "operation": "getAll",
		        "tableId": "sources",
		        "returnAll": true,
		        "filters": {
		          "conditions": [
		            {
		              "keyName": "notebook_id",
		              "condition": "eq",
		              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.supabase",
		      "typeVersion": 1,
		      "position": [
		        360,
		        1200
		      ],
		      "id": "2bf3e04b-7472-4a31-80e3-c78fb8f742be",
		      "name": "Get Sources",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "aggregate": "aggregateAllItemData",
		        "include": "specifiedFields",
		        "fieldsToInclude": "title,content",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.aggregate",
		      "typeVersion": 1,
		      "position": [
		        580,
		        1200
		      ],
		      "id": "30a71143-107d-4c02-a43f-54d972c42437",
		      "name": "Aggregate"
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "c3743cbc-c838-401a-8f65-95a386707ded",
		              "name": "prompt",
		              "value": "=I’ll give you the text of SOURCE(S) and I’d like you to use the instructions below to write a podcast script\n\n# EXAMPLE OUTPUT STRUCTURE & TRANSCRIPT\n\nPlease read aloud the following in a podcast interview style:\nSpeaker 1: When you watch a Formula One car flash by, it's just an incredible sight. \nSpeaker 2: These things are absolute apex predators of engineering, aren't they? Machines designed purely for speed, pushing everything, materials, aero to the absolute limit. Every single part feels like a technological marvel. It really does.\nSpeaker 1: And what's amazing is that these cars, they weren't just dreamt up in a vacuum. You know, they actually exist within this incredibly tight box, a really, really detailed rulebook that dictates pretty much everything that is and isn't possible.\nSpeaker 2: Exactly. And for this deep dive, we're going straight to the source of that box. Our material today is key sections from the official 2025 Formula One technical regulations put out by the sports governing body, the FIA. Yeah. And our mission here for you listening is really to kind of pull back the curtain on that rulebook. We want to unpack these regulations, try and understand the fundamental principles, maybe some of the surprising details, and just grasp how much complexity is actually baked into the blueprint of an F1 car. It's not just, you know, dry rules. It's the framework that shapes performance, safety and that constant, fascinating battle of innovation we see season after season.\nSpeaker 1: OK, so let's start right at the top then. Yeah. The regulations make it pretty clear who's running the show. It's the FIA, right? They own and organize the Formula One World Championship. They're the ones handing out those coveted titles for drivers, constructors.\nSpeaker 2: That's right. And beneath that sort of top level, there are layers upon layers of rules governing absolutely everything. The championship itself, every single competition within it. So each race weekend, they're governed by the International Sporting Code. These technical regulations we're looking at today, the sporting regulations which cover race procedures, penalties, that kind of thing.\n\n# INSTRUCTIONS TO FOLLOW\n\n1. Opening:\n– Begin with some interesting opening remarks on the topic between the hosts\n– Then introduce the topic as a “deep dive” into the subject matter.\n\n2. Dialog Structure:\n– Use two hosts who engage in a conversational back-and-forth.\n– Alternate between short, punchy statements and longer explanations.\n– Use frequent affirmations like “Right,” “Exactly,” and “Absolutely” to maintain flow and agreement.\n\n3. Language and Tone:\n– Keep the language informal and accessible. Use contractions and colloquialisms.\n– Maintain an enthusiastic, energetic tone throughout.\n– Use rhetorical questions to transition between points: “It’s fascinating, isn’t it?”\n– Employ phrases like “You know” and “I mean” to maintain a casual feel.\n\n4. Content Presentation:\n– Introduce source material (e.g., articles, studies) early in the discussion.\n– Use analogies to explain complex concepts: “It’s like…”\n– Break down ideas into digestible chunks, often using numbered points or clear transitions.\n\n5. Interaction Between Hosts:\n– Have one host pose questions or express confusion, allowing the other to explain.\n– Use phrases like “You’ve hit the nail on the head” to validate each other’s points.\n– Build on each other’s ideas, creating a collaborative feel.\n\n6. Engagement Techniques:\n– Address the audience directly at times: “So to everyone listening…”\n– Pose thought-provoking questions for the audience to consider.\n\n7. Structure and Pacing:\n– Start with a broad introduction of the topic and narrow down to specific points.\n– Use phrases like “So we’ve established…” to summarize and move to new points.\n– Maintain a brisk pace, but allow for moments of reflection on bigger ideas.\n\n8. Concluding the Episode:\n– Signal the wrap-up with “So as we wrap things up…”\n– Pose a final thought-provoking question or takeaway.\n– Use the phrase “And on that note…” to transition to the closing.\n– Encourage continued engagement: “stay curious, keep those questions coming.”\n– End with a consistent sign-off: “Until next time, keep [relevant verb].”\n\n9. Overall Flow:\n– Begin with the misconception or general understanding of the topic.\n– Introduce expert sources that challenge or deepen this understanding.\n– Discuss implications and broader context of the new information.\n– Conclude with how this knowledge affects the listener or the field at large.\n\nRemember to maintain a balance between informative content and engaging conversation, always keeping the tone friendly and accessible regardless of the complexity of the topic.\n\n# SOURCE(S) TO CREATE TRANSCRIPT FROM\n\n{{ JSON.stringify($json.data) }}\n\n# OTHER\n\nIMPORTANT: Only output the transcript and use \\n in between speakers dialog\nIMPORTANT: Your response must start with ...\n\"Please read aloud the following in a podcast interview style:\nSpeaker 1: \"",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        840,
		        1200
		      ],
		      "id": "a12a3968-6929-489f-a497-a837f3c7e13c",
		      "name": "Set Prompt"
		    },
		    {
		      "parameters": {
		        "promptType": "define",
		        "text": "={{ $json.prompt }}",
		        "batching": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.chainLlm",
		      "typeVersion": 1.7,
		      "position": [
		        1100,
		        1180
		      ],
		      "id": "25ae0627-f92b-4fa3-8722-6ce6cb678697",
		      "name": "Basic LLM Chain",
		      "retryOnFail": true,
		      "waitBetweenTries": 5000,
		      "maxTries": 5
		    },
		    {
		      "parameters": {
		        "model": {
		          "__rl": true,
		          "value": "gpt-4.1",
		          "mode": "list",
		          "cachedResultName": "gpt-4.1"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        1100,
		        1400
		      ],
		      "id": "a805fc31-c265-49cc-8a95-e79ec7311783",
		      "name": "OpenAI Chat Model",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "googlePalmApi",
		        "sendBody": true,
		        "specifyBody": "json",
		        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.text) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        1520,
		        1180
		      ],
		      "id": "acf52aa8-77ad-41ba-8b27-66f496be6454",
		      "name": "Generate Audio",
		      "retryOnFail": true,
		      "waitBetweenTries": 5000,
		      "maxTries": 5,
		      "credentials": {
		        "googlePalmApi": {
		          "id": "PzC8XiX0nzmyH9AA",
		          "name": "Google Gemini(PaLM) Api account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "operation": "toBinary",
		        "sourceProperty": "candidates[0].content.parts[0].inlineData.data",
		        "options": {
		          "fileName": "audio.pcm",
		          "mimeType": "audio/L16"
		        }
		      },
		      "type": "n8n-nodes-base.convertToFile",
		      "typeVersion": 1.1,
		      "position": [
		        1740,
		        1180
		      ],
		      "id": "0c297369-7ff9-45f8-be19-83191b69a676",
		      "name": "Convert to File"
		    },
		    {
		      "parameters": {
		        "operation": "write",
		        "fileName": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.readWriteFile",
		      "typeVersion": 1,
		      "position": [
		        1960,
		        1180
		      ],
		      "id": "d6a89506-9cd2-4486-85a1-be20060d5d04",
		      "name": "Read/Write Files from Disk"
		    },
		    {
		      "parameters": {
		        "command": "=ffmpeg -f s16le -ar 24000 -ac 1 -i /tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm -codec:a libmp3lame -qscale:a 2 /tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3"
		      },
		      "type": "n8n-nodes-base.executeCommand",
		      "typeVersion": 1,
		      "position": [
		        2200,
		        1180
		      ],
		      "id": "d3f96ec9-2373-4ca7-8282-c078de61b92b",
		      "name": "Execute Command"
		    },
		    {
		      "parameters": {
		        "fileSelector": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.readWriteFile",
		      "typeVersion": 1,
		      "position": [
		        2420,
		        1180
		      ],
		      "id": "5d91d055-300e-4a33-b3e9-fac3b25dd3e0",
		      "name": "Read/Write Files from Disk1"
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/audio/{{ $('Webhook').item.json.body.notebook_id}}/{{ $binary.data.fileName }}",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "contentType": "multipart-form-data",
		        "bodyParameters": {
		          "parameters": [
		            {
		              "parameterType": "formBinaryData",
		              "name": "file",
		              "inputDataFieldName": "data"
		            }
		          ]
		        },
		        "options": {
		          "response": {
		            "response": {
		              "fullResponse": true
		            }
		          }
		        }
		      },
		      "id": "65a6bb6c-99e1-4e17-ac97-95bf0e23a954",
		      "name": "Upload object",
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.1,
		      "position": [
		        2640,
		        1180
		      ],
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sign/{{ $json.body.Key }}",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "specifyBody": "json",
		        "jsonBody": "={\n  \"expiresIn\": 86400\n}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        2840,
		        1180
		      ],
		      "id": "f05a5230-c0c5-4b55-b50c-57b1a3c4df83",
		      "name": "Generate Signed URL",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const now = new Date();\n  const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000); // Add 1 day in ms\n  item.json.timestamp = tomorrow.toISOString(); // Compatible with Supabase timestampz\n}\n\nreturn $input.all();\n"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        3080,
		        1180
		      ],
		      "id": "8d5764b9-498a-4a73-a62a-69ccb6fa5716",
		      "name": "Generate Timestamp for Expires"
		    },
		    {
		      "parameters": {
		        "operation": "update",
		        "tableId": "notebooks",
		        "filters": {
		          "conditions": [
		            {
		              "keyName": "id",
		              "condition": "eq",
		              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
		            }
		          ]
		        },
		        "fieldsUi": {
		          "fieldValues": [
		            {
		              "fieldId": "audio_overview_url",
		              "fieldValue": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/{{ $json.signedURL }}"
		            },
		            {
		              "fieldId": "audio_url_expires_at",
		              "fieldValue": "={{ $json.timestamp }}"
		            },
		            {
		              "fieldId": "audio_overview_generation_status",
		              "fieldValue": "completed"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.supabase",
		      "typeVersion": 1,
		      "position": [
		        3340,
		        1180
		      ],
		      "id": "e549327c-f98e-4119-82b0-92c8e902fd06",
		      "name": "Supabase",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        -680,
		        900
		      ],
		      "id": "f1d8ead0-76e7-4a47-8399-969861b08a46",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Check is FFMPEG Installed": {
		      "main": [
		        [
		          {
		            "node": "If",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "If": {
		      "main": [
		        [
		          {
		            "node": "Respond to Webhook",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Respond with 500 Error",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Respond to Webhook": {
		      "main": [
		        [
		          {
		            "node": "Get Sources",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Webhook": {
		      "main": [
		        [
		          {
		            "node": "Check is FFMPEG Installed",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Get Sources": {
		      "main": [
		        [
		          {
		            "node": "Aggregate",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Aggregate": {
		      "main": [
		        [
		          {
		            "node": "Set Prompt",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Set Prompt": {
		      "main": [
		        [
		          {
		            "node": "Basic LLM Chain",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Basic LLM Chain": {
		      "main": [
		        [
		          {
		            "node": "Generate Audio",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "OpenAI Chat Model": {
		      "ai_languageModel": [
		        [
		          {
		            "node": "Basic LLM Chain",
		            "type": "ai_languageModel",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Generate Audio": {
		      "main": [
		        [
		          {
		            "node": "Convert to File",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Convert to File": {
		      "main": [
		        [
		          {
		            "node": "Read/Write Files from Disk",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Read/Write Files from Disk": {
		      "main": [
		        [
		          {
		            "node": "Execute Command",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Execute Command": {
		      "main": [
		        [
		          {
		            "node": "Read/Write Files from Disk1",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Read/Write Files from Disk1": {
		      "main": [
		        [
		          {
		            "node": "Upload object",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Upload object": {
		      "main": [
		        [
		          {
		            "node": "Generate Signed URL",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Generate Signed URL": {
		      "main": [
		        [
		          {
		            "node": "Generate Timestamp for Expires",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Generate Timestamp for Expires": {
		      "main": [
		        [
		          {
		            "node": "Supabase",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": true,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "f228bda4-191c-47b3-a8b0-e8e16d374eb5",
		  "meta": {
		    "templateCredsSetupCompleted": true,
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "bxrCsRKl157B5Lyt",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}]]></file>
	<file path='n8n\InsightsLM___Process_Additional_Sources.json'>
		{
		  "name": "InsightsLM - Process Additional Sources",
		  "nodes": [
		    {
		      "parameters": {
		        "httpMethod": "POST",
		        "path": "670882ea-5c1e-4b50-9f41-4792256af985",
		        "authentication": "headerAuth",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.webhook",
		      "typeVersion": 2,
		      "position": [
		        -20,
		        -100
		      ],
		      "id": "e84393f1-d235-49b6-ae80-14fab4c2eaf3",
		      "name": "Webhook",
		      "webhookId": "670882ea-5c1e-4b50-9f41-4792256af985",
		      "credentials": {
		        "httpHeaderAuth": {
		          "id": "39evQ95L86jhtb3I",
		          "name": "MyNoteBookLM Auth"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "workflowId": {
		          "__rl": true,
		          "value": "IQcdcedwXg2w3AuW",
		          "mode": "list",
		          "cachedResultName": "InsightsLM - Upsert to Vector Store"
		        },
		        "workflowInputs": {
		          "mappingMode": "defineBelow",
		          "value": {
		            "notebook_id": "={{ $('Webhook').item.json.body.notebookId }}",
		            "extracted_text": "={{ $('Webhook').item.json.body.content }}",
		            "source_id": "={{ $('Webhook').item.json.body.sourceId }}"
		          },
		          "matchingColumns": [],
		          "schema": [
		            {
		              "id": "notebook_id",
		              "displayName": "notebook_id",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            },
		            {
		              "id": "extracted_text",
		              "displayName": "extracted_text",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            },
		            {
		              "id": "source_id",
		              "displayName": "source_id",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            }
		          ],
		          "attemptToConvertTypes": false,
		          "convertFieldsToString": true
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.executeWorkflow",
		      "typeVersion": 1.2,
		      "position": [
		        880,
		        -280
		      ],
		      "id": "21f00127-d042-444c-9d5b-a5827ff303b7",
		      "name": "Execute Workflow"
		    },
		    {
		      "parameters": {
		        "rules": {
		          "values": [
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "strict",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "leftValue": "={{ $json.body.type }}",
		                    "rightValue": "copied-text",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals"
		                    },
		                    "id": "5057cf19-e998-4cbb-b3a2-95bb8b2a7355"
		                  }
		                ],
		                "combinator": "and"
		              }
		            },
		            {
		              "conditions": {
		                "options": {
		                  "caseSensitive": true,
		                  "leftValue": "",
		                  "typeValidation": "strict",
		                  "version": 2
		                },
		                "conditions": [
		                  {
		                    "id": "9b0e22e8-984f-46ba-b83e-52d3feda3985",
		                    "leftValue": "={{ $json.body.type }}",
		                    "rightValue": "multiple-websites",
		                    "operator": {
		                      "type": "string",
		                      "operation": "equals",
		                      "name": "filter.operator.equals"
		                    }
		                  }
		                ],
		                "combinator": "and"
		              }
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.switch",
		      "typeVersion": 3.2,
		      "position": [
		        220,
		        -105
		      ],
		      "id": "ea64f96b-552e-4036-a467-9e721a9348b3",
		      "name": "Switch"
		    },
		    {
		      "parameters": {
		        "fieldToSplitOut": "body.urls",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.splitOut",
		      "typeVersion": 1,
		      "position": [
		        440,
		        -5
		      ],
		      "id": "df3e6c68-9618-4600-82b7-547815e30e0d",
		      "name": "Split Out"
		    },
		    {
		      "parameters": {
		        "options": {
		          "reset": false
		        }
		      },
		      "type": "n8n-nodes-base.splitInBatches",
		      "typeVersion": 3,
		      "position": [
		        660,
		        -5
		      ],
		      "id": "5c238b17-d28f-42a7-a273-dd5ce9cf0f6c",
		      "name": "Loop Over Items"
		    },
		    {
		      "parameters": {
		        "url": "=https://r.jina.ai/{{ $json['body.urls'] }}",
		        "sendHeaders": true,
		        "headerParameters": {
		          "parameters": [
		            {
		              "name": "Accept",
		              "value": "application/json"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        980,
		        80
		      ],
		      "id": "ab711941-fffb-48a9-8f12-0417503bacf3",
		      "name": "Fetch Webpage with Jina.ai"
		    },
		    {
		      "parameters": {
		        "workflowId": {
		          "__rl": true,
		          "value": "IQcdcedwXg2w3AuW",
		          "mode": "list",
		          "cachedResultName": "InsightsLM - Upsert to Vector Store"
		        },
		        "workflowInputs": {
		          "mappingMode": "defineBelow",
		          "value": {
		            "notebook_id": "={{ $('Switch').item.json.body.notebookId }}",
		            "extracted_text": "={{ $json.content }}",
		            "source_id": "={{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}"
		          },
		          "matchingColumns": [],
		          "schema": [
		            {
		              "id": "notebook_id",
		              "displayName": "notebook_id",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            },
		            {
		              "id": "extracted_text",
		              "displayName": "extracted_text",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            },
		            {
		              "id": "source_id",
		              "displayName": "source_id",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            }
		          ],
		          "attemptToConvertTypes": false,
		          "convertFieldsToString": true
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.executeWorkflow",
		      "typeVersion": 1.2,
		      "position": [
		        1640,
		        80
		      ],
		      "id": "f64e5ee1-1ebe-48f1-b77e-86ed6943eb79",
		      "name": "Execute Workflow1"
		    },
		    {
		      "parameters": {
		        "operation": "update",
		        "tableId": "sources",
		        "filters": {
		          "conditions": [
		            {
		              "keyName": "id",
		              "condition": "eq",
		              "keyValue": "={{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}"
		            }
		          ]
		        },
		        "fieldsUi": {
		          "fieldValues": [
		            {
		              "fieldId": "content",
		              "fieldValue": "={{ $('Fetch Webpage with Jina.ai').item.json.data.content }}"
		            },
		            {
		              "fieldId": "title",
		              "fieldValue": "={{ $('Fetch Webpage with Jina.ai').item.json.data.title }}"
		            },
		            {
		              "fieldId": "file_path",
		              "fieldValue": "={{ $('Switch').item.json.body.notebookId }}/{{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}.txt"
		            },
		            {
		              "fieldId": "file_size",
		              "fieldValue": "9999"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.supabase",
		      "typeVersion": 1,
		      "position": [
		        1420,
		        80
		      ],
		      "id": "629973a6-c406-4963-860b-2a6d90815afa",
		      "name": "Supabase",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "aggregate": "aggregateAllItemData",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.aggregate",
		      "typeVersion": 1,
		      "position": [
		        1860,
		        140
		      ],
		      "id": "66f0f255-3e83-4014-8d50-4d539b8658af",
		      "name": "Aggregate"
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sources/{{ $('Switch').item.json.body.notebookId }}/{{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}.txt",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "contentType": "raw",
		        "rawContentType": "text/plain",
		        "body": "={{ $json.data.url }}\n{{ $json.data.content }}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        1200,
		        80
		      ],
		      "id": "932f87b7-3975-4304-9225-7e5dd709216b",
		      "name": "Upload File to Bucket",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sources/{{ $('Switch').item.json.body.notebookId }}/{{ $json.body.sourceId }}.txt",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "contentType": "raw",
		        "rawContentType": "text/plain",
		        "body": "={{ $json.data.url }}\n{{ $json.data.content }}",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        440,
		        -280
		      ],
		      "id": "0c971148-8f1e-4da7-aee8-f6a9a4f7d58f",
		      "name": "Upload File to Bucket1",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "operation": "update",
		        "tableId": "sources",
		        "filters": {
		          "conditions": [
		            {
		              "keyName": "id",
		              "condition": "eq",
		              "keyValue": "={{ $('Webhook').item.json.body.sourceId }}"
		            }
		          ]
		        },
		        "fieldsUi": {
		          "fieldValues": [
		            {
		              "fieldId": "file_path",
		              "fieldValue": "={{ $('Switch').item.json.body.notebookId }}/{{ $('Webhook').item.json.body.sourceId }}.txt"
		            },
		            {
		              "fieldId": "file_size",
		              "fieldValue": "9999"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.supabase",
		      "typeVersion": 1,
		      "position": [
		        660,
		        -280
		      ],
		      "id": "8b5103e1-46bd-4959-8b1a-0e288759723f",
		      "name": "Supabase1",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Workflow\" to hit the \"Upsert to Vector Store\" workflow\n- Update the Host of the \"HTTP Requests\" to hit your project",
		        "width": 680,
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        480,
		        -600
		      ],
		      "id": "e0772715-ac1a-4ceb-8017-b07e568c2251",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        0,
		        -600
		      ],
		      "id": "3cb7b6af-1480-47dc-aa7b-07be3b2eb433",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Webhook": {
		      "main": [
		        [
		          {
		            "node": "Switch",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Switch": {
		      "main": [
		        [
		          {
		            "node": "Upload File to Bucket1",
		            "type": "main",
		            "index": 0
		          }
		        ],
		        [
		          {
		            "node": "Split Out",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Split Out": {
		      "main": [
		        [
		          {
		            "node": "Loop Over Items",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Loop Over Items": {
		      "main": [
		        [],
		        [
		          {
		            "node": "Fetch Webpage with Jina.ai",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Fetch Webpage with Jina.ai": {
		      "main": [
		        [
		          {
		            "node": "Upload File to Bucket",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Supabase": {
		      "main": [
		        [
		          {
		            "node": "Execute Workflow1",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Execute Workflow1": {
		      "main": [
		        [
		          {
		            "node": "Aggregate",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Aggregate": {
		      "main": [
		        [
		          {
		            "node": "Loop Over Items",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Upload File to Bucket": {
		      "main": [
		        [
		          {
		            "node": "Supabase",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Upload File to Bucket1": {
		      "main": [
		        [
		          {
		            "node": "Supabase1",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Supabase1": {
		      "main": [
		        [
		          {
		            "node": "Execute Workflow",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": true,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "543da2bf-a142-4b01-bffc-81c36407da2f",
		  "meta": {
		    "templateCredsSetupCompleted": true,
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "3FuYqT7cPNPitvak",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}</file>
	<file path='n8n\InsightsLM___Upsert_to_Vector_Store.json'><![CDATA[
		{
		  "name": "InsightsLM - Upsert to Vector Store",
		  "nodes": [
		    {
		      "parameters": {
		        "httpMethod": "POST",
		        "path": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
		        "authentication": "headerAuth",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.webhook",
		      "typeVersion": 2,
		      "position": [
		        320,
		        -20
		      ],
		      "id": "e80f97df-d2a3-40e5-8ebe-05e7123482ee",
		      "name": "Webhook",
		      "webhookId": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
		      "credentials": {
		        "httpHeaderAuth": {
		          "id": "39evQ95L86jhtb3I",
		          "name": "MyNoteBookLM Auth"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "mode": "insert",
		        "tableName": {
		          "__rl": true,
		          "value": "documents",
		          "mode": "list",
		          "cachedResultName": "documents"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
		      "typeVersion": 1.1,
		      "position": [
		        1812,
		        -20
		      ],
		      "id": "8a9a6814-b5db-4f2e-8877-a62633c042d8",
		      "name": "Supabase Vector Store",
		      "retryOnFail": true,
		      "maxTries": 5,
		      "waitBetweenTries": 5000,
		      "alwaysOutputData": true,
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "options": {
		          "metadata": {
		            "metadataValues": [
		              {
		                "name": "notebook_id",
		                "value": "={{ $('Code').item.json.notebook_id }}"
		              },
		              {
		                "name": "source_id",
		                "value": "={{ $('Code').item.json.source_id }}"
		              }
		            ]
		          }
		        }
		      },
		      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
		      "typeVersion": 1,
		      "position": [
		        1916,
		        202.5
		      ],
		      "id": "bdc647ec-d262-46ae-b96b-47577f237dc4",
		      "name": "Default Data Loader"
		    },
		    {
		      "parameters": {
		        "chunkOverlap": 200,
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
		      "typeVersion": 1,
		      "position": [
		        2004,
		        400
		      ],
		      "id": "66adf3a1-e086-4562-b5d3-5e700a49dc14",
		      "name": "Recursive Character Text Splitter"
		    },
		    {
		      "parameters": {
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        1796,
		        200
		      ],
		      "id": "aa1fc9fb-8942-4aa1-9fcc-525595accaf7",
		      "name": "Embeddings OpenAI",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "assignments": {
		          "assignments": [
		            {
		              "id": "dab34521-ffef-41db-9eb3-8985fd108466",
		              "name": "text",
		              "value": "={{ $('Code').item.json.extracted_text }}",
		              "type": "string"
		            }
		          ]
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.set",
		      "typeVersion": 3.4,
		      "position": [
		        1576,
		        -20
		      ],
		      "id": "e0233d37-8a61-4ad6-b0b8-1209b7da0ec5",
		      "name": "Edit Fields"
		    },
		    {
		      "parameters": {
		        "jsCode": "// Example: run this in an n8n Code node (JavaScript)\n\nlet notebook_id;\nlet source_id;\n\ntry {\n  const webhookData = $('Webhook').first();\n  if (webhookData && webhookData.json?.body?.file_path) {\n    const path = webhookData.json.body.file_path;\n    notebook_id = path.split('/')[0];\n    source_id = webhookData.json.body.source_id;\n  }\n} catch (e) {\n  // Webhook not executed or doesn't exist in this context\n  notebook_id = $input.first().json.notebook_id;\n  source_id = $input.first().json.source_id;\n}\n\nconst extracted_text = $input.first().json.extracted_text;\n\nreturn [\n  {\n    json: {\n      notebook_id,\n      extracted_text,\n      source_id\n    },\n  },\n];\n"
		      },
		      "type": "n8n-nodes-base.code",
		      "typeVersion": 2,
		      "position": [
		        760,
		        -20
		      ],
		      "id": "89e5c09e-6321-4c66-94f8-d1bdb6cccd99",
		      "name": "Code"
		    },
		    {
		      "parameters": {
		        "method": "POST",
		        "url": "https://yfvmutoxmibqzvyklggr.supabase.co/functions/v1/process-document-callback",
		        "authentication": "predefinedCredentialType",
		        "nodeCredentialType": "supabaseApi",
		        "sendBody": true,
		        "specifyBody": "json",
		        "jsonBody": "={\n  \"source_id\": \"{{ $('Code').item.json.source_id }}\",\n  \"status\": \"completed\"\n}\n",
		        "options": {
		          "redirect": {
		            "redirect": {}
		          }
		        }
		      },
		      "type": "n8n-nodes-base.httpRequest",
		      "typeVersion": 4.2,
		      "position": [
		        2420,
		        -20
		      ],
		      "id": "01a9b118-2d17-4637-98f7-4fe309c7cc54",
		      "name": "HTTP Request",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "promptType": "define",
		        "text": "={{ $json.extracted_text }}",
		        "hasOutputParser": true,
		        "messages": {
		          "messageValues": [
		            {
		              "message": "=Based on the data provided, output an appropriate title and summary of the document. Only output in JSON in the following format / structure\n\n{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\"\n}"
		            }
		          ]
		        }
		      },
		      "type": "@n8n/n8n-nodes-langchain.chainLlm",
		      "typeVersion": 1.6,
		      "position": [
		        980,
		        -20
		      ],
		      "id": "88660990-81f1-4ed0-aaa8-c64c1ba1d2cf",
		      "name": "Generate Title & Description"
		    },
		    {
		      "parameters": {
		        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\"\n}"
		      },
		      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
		      "typeVersion": 1.2,
		      "position": [
		        1128,
		        200
		      ],
		      "id": "3a83ea73-73e8-4f74-90ad-b55aadc5c8a3",
		      "name": "Structured Output Parser"
		    },
		    {
		      "parameters": {
		        "model": {
		          "__rl": true,
		          "value": "gpt-4.1-mini",
		          "mode": "list",
		          "cachedResultName": "gpt-4.1-mini"
		        },
		        "options": {}
		      },
		      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
		      "typeVersion": 1.2,
		      "position": [
		        1008,
		        200
		      ],
		      "id": "e16a04be-5702-4d01-92f5-45af5f90b97a",
		      "name": "OpenAI Chat Model",
		      "credentials": {
		        "openAiApi": {
		          "id": "hNalDChhNUDtYG7T",
		          "name": "OpenAi account"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "operation": "update",
		        "tableId": "sources",
		        "filters": {
		          "conditions": [
		            {
		              "keyName": "id",
		              "condition": "eq",
		              "keyValue": "={{ $('Code').item.json.source_id }}"
		            }
		          ]
		        },
		        "fieldsUi": {
		          "fieldValues": [
		            {
		              "fieldId": "content",
		              "fieldValue": "={{ $('Code').item.json.extracted_text }}"
		            },
		            {
		              "fieldId": "summary",
		              "fieldValue": "={{ $json.output.summary }}"
		            },
		            {
		              "fieldId": "display_name",
		              "fieldValue": "={{ $json.output.title }}"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.supabase",
		      "typeVersion": 1,
		      "position": [
		        1356,
		        -20
		      ],
		      "id": "0487c4af-d2b5-4208-bbfa-06af8ebb8ee5",
		      "name": "Supabase",
		      "credentials": {
		        "supabaseApi": {
		          "id": "OeYUddl4OaIohMCC",
		          "name": "MynotebookLM Supabase"
		        }
		      }
		    },
		    {
		      "parameters": {
		        "workflowId": {
		          "__rl": true,
		          "value": "AzZ5a2zCGU1O3MRV",
		          "mode": "list",
		          "cachedResultName": "InsightsLM - Extract Text"
		        },
		        "workflowInputs": {
		          "mappingMode": "defineBelow",
		          "value": {
		            "filePath": "={{ $json.body.file_path }}"
		          },
		          "matchingColumns": [
		            "filePath"
		          ],
		          "schema": [
		            {
		              "id": "filePath",
		              "displayName": "filePath",
		              "required": false,
		              "defaultMatch": false,
		              "display": true,
		              "canBeUsedToMatch": true,
		              "type": "string",
		              "removed": false
		            }
		          ],
		          "attemptToConvertTypes": false,
		          "convertFieldsToString": true
		        },
		        "options": {}
		      },
		      "type": "n8n-nodes-base.executeWorkflow",
		      "typeVersion": 1.2,
		      "position": [
		        540,
		        -20
		      ],
		      "id": "5b4ae6b1-e39f-452f-a46b-9832f7b346bc",
		      "name": "Extract Text"
		    },
		    {
		      "parameters": {
		        "workflowInputs": {
		          "values": [
		            {
		              "name": "notebook_id"
		            },
		            {
		              "name": "extracted_text"
		            },
		            {
		              "name": "source_id"
		            }
		          ]
		        }
		      },
		      "type": "n8n-nodes-base.executeWorkflowTrigger",
		      "typeVersion": 1.1,
		      "position": [
		        320,
		        -260
		      ],
		      "id": "fb8ef16d-0ba1-4659-ab05-d3a53fc155cc",
		      "name": "When Executed by Another Workflow"
		    },
		    {
		      "parameters": {
		        "aggregate": "aggregateAllItemData",
		        "options": {}
		      },
		      "type": "n8n-nodes-base.aggregate",
		      "typeVersion": 1,
		      "position": [
		        2180,
		        -20
		      ],
		      "id": "effe2ff2-00bc-4f74-bc50-6078685dcfd5",
		      "name": "Aggregate"
		    },
		    {
		      "parameters": {
		        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Text\" to hit the correct workflow\n- Update the Host of the \"HTTP Request\" to hit your project",
		        "width": 580,
		        "color": 4
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        1460,
		        -300
		      ],
		      "id": "8c087d38-88b2-4c9f-8267-d8121addea2a",
		      "name": "Sticky Note"
		    },
		    {
		      "parameters": {
		        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
		        "height": 220,
		        "width": 280,
		        "color": 7
		      },
		      "type": "n8n-nodes-base.stickyNote",
		      "typeVersion": 1,
		      "position": [
		        740,
		        -340
		      ],
		      "id": "6d8672e9-000b-4e81-9f2b-a665f2972e52",
		      "name": "Sticky Note8"
		    }
		  ],
		  "pinData": {},
		  "connections": {
		    "Webhook": {
		      "main": [
		        [
		          {
		            "node": "Extract Text",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Default Data Loader": {
		      "ai_document": [
		        [
		          {
		            "node": "Supabase Vector Store",
		            "type": "ai_document",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Recursive Character Text Splitter": {
		      "ai_textSplitter": [
		        [
		          {
		            "node": "Default Data Loader",
		            "type": "ai_textSplitter",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Embeddings OpenAI": {
		      "ai_embedding": [
		        [
		          {
		            "node": "Supabase Vector Store",
		            "type": "ai_embedding",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Edit Fields": {
		      "main": [
		        [
		          {
		            "node": "Supabase Vector Store",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Code": {
		      "main": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Supabase Vector Store": {
		      "main": [
		        [
		          {
		            "node": "Aggregate",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Structured Output Parser": {
		      "ai_outputParser": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "ai_outputParser",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "OpenAI Chat Model": {
		      "ai_languageModel": [
		        [
		          {
		            "node": "Generate Title & Description",
		            "type": "ai_languageModel",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Generate Title & Description": {
		      "main": [
		        [
		          {
		            "node": "Supabase",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Supabase": {
		      "main": [
		        [
		          {
		            "node": "Edit Fields",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Extract Text": {
		      "main": [
		        [
		          {
		            "node": "Code",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "When Executed by Another Workflow": {
		      "main": [
		        [
		          {
		            "node": "Code",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    },
		    "Aggregate": {
		      "main": [
		        [
		          {
		            "node": "HTTP Request",
		            "type": "main",
		            "index": 0
		          }
		        ]
		      ]
		    }
		  },
		  "active": true,
		  "settings": {
		    "executionOrder": "v1"
		  },
		  "versionId": "5bb6ec60-c693-47cc-9d5a-a27d71bf284f",
		  "meta": {
		    "templateCredsSetupCompleted": true,
		    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
		  },
		  "id": "IQcdcedwXg2w3AuW",
		  "tags": [
		    {
		      "createdAt": "2025-05-12T13:43:59.783Z",
		      "updatedAt": "2025-05-12T13:43:59.783Z",
		      "id": "d3ygIhrGjDmzgrW0",
		      "name": "TheAIAutomators.com"
		    }
		  ]
		}]]></file>
	<file path='package.json'>
		{
		  "name": "vite_react_shadcn_ts",
		  "private": true,
		  "version": "0.0.0",
		  "type": "module",
		  "scripts": {
		    "dev": "vite",
		    "build": "vite build",
		    "build:dev": "vite build --mode development",
		    "lint": "eslint .",
		    "preview": "vite preview"
		  },
		  "dependencies": {
		    "@hookform/resolvers": "^3.9.0",
		    "@radix-ui/react-accordion": "^1.2.0",
		    "@radix-ui/react-alert-dialog": "^1.1.1",
		    "@radix-ui/react-aspect-ratio": "^1.1.0",
		    "@radix-ui/react-avatar": "^1.1.0",
		    "@radix-ui/react-checkbox": "^1.1.1",
		    "@radix-ui/react-collapsible": "^1.1.0",
		    "@radix-ui/react-context-menu": "^2.2.1",
		    "@radix-ui/react-dialog": "^1.1.2",
		    "@radix-ui/react-dropdown-menu": "^2.1.1",
		    "@radix-ui/react-hover-card": "^1.1.1",
		    "@radix-ui/react-label": "^2.1.0",
		    "@radix-ui/react-menubar": "^1.1.1",
		    "@radix-ui/react-navigation-menu": "^1.2.0",
		    "@radix-ui/react-popover": "^1.1.1",
		    "@radix-ui/react-progress": "^1.1.0",
		    "@radix-ui/react-radio-group": "^1.2.0",
		    "@radix-ui/react-scroll-area": "^1.1.0",
		    "@radix-ui/react-select": "^2.1.1",
		    "@radix-ui/react-separator": "^1.1.0",
		    "@radix-ui/react-slider": "^1.2.0",
		    "@radix-ui/react-slot": "^1.1.0",
		    "@radix-ui/react-switch": "^1.1.0",
		    "@radix-ui/react-tabs": "^1.1.0",
		    "@radix-ui/react-toast": "^1.2.1",
		    "@radix-ui/react-toggle": "^1.1.0",
		    "@radix-ui/react-toggle-group": "^1.1.0",
		    "@radix-ui/react-tooltip": "^1.1.4",
		    "@supabase/supabase-js": "^2.49.8",
		    "@tanstack/react-query": "^5.56.2",
		    "class-variance-authority": "^0.7.1",
		    "clsx": "^2.1.1",
		    "cmdk": "^1.0.0",
		    "date-fns": "^3.6.0",
		    "embla-carousel-react": "^8.3.0",
		    "input-otp": "^1.2.4",
		    "lucide-react": "^0.462.0",
		    "next-themes": "^0.3.0",
		    "react": "^18.3.1",
		    "react-day-picker": "^8.10.1",
		    "react-dom": "^18.3.1",
		    "react-hook-form": "^7.53.0",
		    "react-resizable-panels": "^2.1.3",
		    "react-router-dom": "^6.26.2",
		    "recharts": "^2.12.7",
		    "sonner": "^1.5.0",
		    "tailwind-merge": "^2.5.2",
		    "tailwindcss-animate": "^1.0.7",
		    "vaul": "^0.9.3",
		    "zod": "^3.23.8"
		  },
		  "devDependencies": {
		    "@eslint/js": "^9.9.0",
		    "@tailwindcss/typography": "^0.5.15",
		    "@types/node": "^22.5.5",
		    "@types/react": "^18.3.3",
		    "@types/react-dom": "^18.3.0",
		    "@vitejs/plugin-react-swc": "^3.5.0",
		    "autoprefixer": "^10.4.20",
		    "eslint": "^9.9.0",
		    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
		    "eslint-plugin-react-refresh": "^0.4.9",
		    "globals": "^15.9.0",
		    "lovable-tagger": "^1.1.7",
		    "postcss": "^8.4.47",
		    "tailwindcss": "^3.4.11",
		    "typescript": "^5.5.3",
		    "typescript-eslint": "^8.0.1",
		    "vite": "^5.4.1"
		  }
		}</file>
	<file path='patch-supabase.js'><![CDATA[
		// This script patches the Supabase URL to use the correct endpoint
		(function() {
		  // Function to check if direct Supabase access is available
		  function checkDirectAccess() {
		    return new Promise((resolve) => {
		      const xhr = new XMLHttpRequest();
		      xhr.onreadystatechange = function() {
		        if (xhr.readyState === 4) {
		          resolve(xhr.status !== 0 && xhr.status < 500);
		        }
		      };
		      xhr.open('GET', 'http://localhost:8000/auth/v1/health', true);
		      xhr.timeout = 2000; // 2 seconds timeout
		      xhr.send();
		    });
		  }
		  
		  // Function to patch the Supabase client with the provided URL
		  function patchSupabaseClient(supabaseUrl) {
		    if (window.supabase && window.supabase.createClient) {
		      const originalCreateClient = window.supabase.createClient;
		      window.supabase.createClient = function(url, key, options) {
		        console.log('Patching Supabase client, replacing URL:', url, '->', supabaseUrl);
		        return originalCreateClient(supabaseUrl, key, options);
		      };
		      console.log('Supabase client patched successfully with URL:', supabaseUrl);
		      return true;
		    }
		    return false;
		  }
		  
		  // Determine the best Supabase URL to use
		  async function setupSupabaseUrl() {
		    // Try direct access first
		    const directAccessWorks = await checkDirectAccess();
		    
		    // Choose the appropriate URL
		    let supabaseUrl;
		    if (directAccessWorks) {
		      supabaseUrl = 'http://localhost:8000';
		      console.log('Direct Supabase access available, using:', supabaseUrl);
		    } else {
		      supabaseUrl = window.location.origin + '/supabase';
		      console.log('Using proxied Supabase access:', supabaseUrl);
		    }
		    
		    // Store the URL globally
		    window.RUNTIME_SUPABASE_URL = supabaseUrl;
		    
		    // Try to patch immediately
		    if (!patchSupabaseClient(supabaseUrl)) {
		      // If not available yet, try again on window load
		      window.addEventListener('load', function() {
		        patchSupabaseClient(supabaseUrl);
		      });
		      
		      // Also try periodically
		      let attempts = 0;
		      const interval = setInterval(function() {
		        if (patchSupabaseClient(supabaseUrl) || attempts > 50) {
		          clearInterval(interval);
		        }
		        attempts++;
		      }, 100);
		    }
		  }
		  
		  // Start the setup process
		  setupSupabaseUrl();
		})();]]></file>
	<file path='postcss.config.js'>
		export default {
		  plugins: {
		    tailwindcss: {},
		    autoprefixer: {},
		  },
		}</file>
	<file path='public\robots.txt'>
		User-agent: Googlebot
		Allow: /
		
		User-agent: Bingbot
		Allow: /
		
		User-agent: Twitterbot
		Allow: /
		
		User-agent: facebookexternalhit
		Allow: /
		
		User-agent: *
		Allow: /</file>
	<file path='README.md'><![CDATA[
		<p align="center">
		  <img src="https://www.theaiautomators.com/wp-content/uploads/2025/07/Group-2651.svg" alt="InsightsLM Logo" width="600"/>
		</p>
		
		
		# InsightsLM: The Open Source NotebookLM Alternative
		
		[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
		[![GitHub stars](https://img.shields.io/github/stars/theaiautomators/insights-lm-public?style=social)](https://github.com/theaiautomators/insights-lm-public/stargazers)
		[![YouTube Video](https://img.shields.io/badge/YouTube-Watch%20the%20Build-red)](https://www.youtube.com/watch?v=IXJEGjfZRBE)
		
		> What if the power of a tool like NotebookLM wasn't locked away in a closed system? What if you could build a private, self-hosted alternative that can be customized for your business needs, all without writing a single line of code?
		
		That's exactly what we've done with **InsightsLM**. This project is an open-source, self-hostable alternative to NotebookLM. It's designed to be a powerful AI research tool that grounds its responses exclusively in the sources you provide, making it a reliable window into your company's knowledge base.
		
		
		## About The Project
		
		NotebookLM is one of the most powerful AI research tools available today. However, its closed-source nature limits its potential for customization and private hosting. InsightsLM was created to bridge this gap.
		
		This isn't just a basic prototype. It's a robust application with some killer features, developed using a "vibe-coding" approach with Loveable for the Javascript frontend and a powerful backend combination of Supabase and N8N.
		
		We are open-sourcing InsightsLM so you can install it, customize it, improve it, and even commercialize it. The ability to deploy AI agents grounded in a company's specific knowledge (a concept known as Retrieval-Augmented Generation or RAG) represents one of the biggest commercial opportunities for generative AI today.
		
		
		<p align="center">
		  <img src="https://www.theaiautomators.com/wp-content/uploads/2025/07/Group-2652.png" alt="The AI Automators Logo" width="500"/>
		</p>
		
		
		## Fully Local Version
		
		This version of InsightsLM relies on cloud AI services like OpenAI and Gemini.
		
		If you'd like to setup a fully local version of this that uses Ollama and Qwen3 along with Whisper and CoquiTTS, then check out our other repo below
		
		[Fully Local InsightsLM](https://github.com/theaiautomators/insights-lm-local-package)
		
		## Join Our Community
		
		If you're interested in learning how to customize InsightsLM or build similar applications, join our community, The AI Automators.
		
		https://www.theaiautomators.com/
		
		
		## Key Features
		
		* **Chat with Your Documents:** Upload your documents and get instant, context-aware answers.
		* **Verifiable Citations:** Jump directly to the source of the information to ensure the AI isn't hallucinating.
		* **Podcast Generation:** Create audio summaries and discussions from your source materials, just like in NotebookLM.
		* **Private and Self-Hosted:** Maintain complete control over your data by hosting it yourself. Use local models if you wish.
		* **Customizable and Extensible:** Built with modern, accessible tools, making it easy to tailor to your specific needs.
		
		
		## Demo & Walkthrough
		
		For a complete demonstration of InsightsLM, an overview of its architecture, and a step-by-step guide on how to set it up, check out our YouTube video:
		
		<p>
		  <a target="_blank" href="https://www.youtube.com/watch?v=IXJEGjfZRBE"><img src="https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/public/video.png" alt="Video" width="500"/></a>
		</p>
		
		
		## Built With
		
		This project is built with a modern, powerful stack:
		* **Frontend:** 
		    * [Loveable](https://theaiautomators.com/go/loveable)
		    * [Vite](https://vitejs.dev/)
		    * [React](https://react.dev/)
		    * [TypeScript](https://www.typescriptlang.org/)
		    * [shadcn-ui](https://ui.shadcn.com/)
		    * [Tailwind CSS](https://tailwindcss.com/)
		* **Backend:**
		    * [Supabase](https://supabase.com/) - for database, authentication, and storage.
		    * [N8N](https://theaiautomators.com/go/n8n) - for workflow automation and backend logic.
		
		
		## Getting Started: A Guide for No-Coders to Test and Customize
		
		This guide provides the quickest way to get InsightsLM up and running so you can test, customize, and experiment.
		
		I recommend you following along from 17:53 in our video here for the full step by step guide - [https://youtu.be/IXJEGjfZRBE?t=1073](https://youtu.be/IXJEGjfZRBE?t=1073)
		
		You will need a notepad file open to copy and paste in various credentials and details.
		
		1.  **Create Supabase Account and Project**
		    * Go to [Supabase.com](https://supabase.com/) and create a free account.
		    * Create a new project. Paste in your `database password` into your open notepad file as you will need this later.
		2.  **Create GitHub Account & Repo from Template**
		    * If you don't have one, create a free account on [GitHub](https://github.com/).
		    * Navigate to the InsightsLM template repository here: [**github.com/theaiautomators/insights-lm-public**](https://github.com/theaiautomators/insights-lm-public)
		    * Click the `Use this template` button to create a copy of the repository in your own GitHub account. Fill out the form.
		3.  **Import into an AI-Coding Editor (Bolt.new)**
		    * Create an account on [Bolt.new](https://bolt.new/) as it supports Supabase integration. (While the project was built on Loveable, it is currently quite difficult to import existing Github projects into Loveable)
		    * Import your newly created GitHub repository into your Bolt project. You will need to link your Github account to Bolt. Choose the repo and import.
		    * Now click Integrations on the top and connect your Supabase project. You will need to link your Supabase account to Bolt.
		    * Once connected, the Supabase Edge Functions will auto-deploy. You will need to approve the running of the migration script to create the data structures in Supabase.
		4.  **Import and Configure N8N Workflows**
		    * The `/n8n` directory in this repository contains the JSON files for the required N8N workflows. There are 2 approaches here.
		        1. The easiest is to import the "Import_Insights_LM_Workflows.json" file into a new workflow in n8n and follow the steps in the video. This includes configuring an n8n API key which will be used to auto-create all workflows needed by the system. You will also need to set various credentials.
		        2. Instead of using the above workflow importer, you can instead download and import the 6 JSON workflows in this directory. You will need to go node by node in each workflow to configure them for your services. (e.g. Supabase, OpenAI, Gemini, Sub-Workflows etc). Follow the TODOs in each workflow.
		5.  **Add N8N Webhooks to Supabase Secrets**
		    * Your N8N workflows are triggered by webhooks from the Supabase Edge Functions. If you used the workflow importer, you will have the list of N8N secrets to create. Otherwise you'll need to gather these from the various workflows.
		    * In your Supabase project dashboard, navigate to `Edge Functions` -> `Secrets` and add the following secrets. This allows the Supabase Edge Functions to securely call your N8N workflows.
		    * These are the secrets that need to be created
		        * NOTEBOOK_CHAT_URL
		        * NOTEBOOK_GENERATION_URL
		        * AUDIO_GENERATION_WEBHOOK_URL
		        * DOCUMENT_PROCESSING_WEBHOOK_URL
		        * ADDITIONAL_SOURCES_WEBHOOK_URL
		        * NOTEBOOK_GENERATION_AUTH (This is the password for the custom Header Auth for each n8n Webhook)
		        * OPENAI_API_KEY (This is used in the Generate Note Title edge function)
		6.  **Test & Customize**
		    * That's it! Your instance of InsightsLM should now be live.
		    * You can now test the application, upload documents, and start chatting.
		    * Within Bolt.new you can also deploy this to Netlify
		
		## Contributing
		
		Contributions make the open-source community an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.
		
		- Fork the Project
		- Create your Feature Branch (git checkout -b feature/AmazingFeature)
		- Commit your Changes (git commit -m 'Add some AmazingFeature')
		- Push to the Branch (git push origin feature/AmazingFeature)
		- Open a Pull Request
		
		## License
		
		This codebase is distributed under the MIT License.
		
		## A Note on n8n's Sustainable Use License
		
		While InsightsLM is fully open-sourced and Supabase is also open source, it's important to be aware that n8n, which powers much of the backend automation, is not open source in the traditional sense.
		
		n8n is distributed under a [Sustainable Use License](https://github.com/n8n-io/n8n/blob/master/LICENSE.md). This license allows free usage for internal business purposes, including hosting workflows within your company or organization.
		
		However, if you plan to use InsightsLM as part of a commercial SaaS offering—such as reselling access or hosting a public version for multiple clients—you may need to obtain an n8n Enterprise License. We’re not lawyers, so we recommend that you review the n8n license and contacting their team if your use case falls into a commercial category.
		
		Alternatives: If your use case is restricted by the n8n license, one potential option is to convert key workflows into Supabase Edge Functions. This would allow you to fully avoid using n8n in production.]]></file>
	<file path='src\App.css'>
		#root {
		  max-width: 1280px;
		  margin: 0 auto;
		  padding: 2rem;
		  text-align: center;
		}
		
		.logo {
		  height: 6em;
		  padding: 1.5em;
		  will-change: filter;
		  transition: filter 300ms;
		}
		.logo:hover {
		  filter: drop-shadow(0 0 2em #646cffaa);
		}
		.logo.react:hover {
		  filter: drop-shadow(0 0 2em #61dafbaa);
		}
		
		@keyframes logo-spin {
		  from {
		    transform: rotate(0deg);
		  }
		  to {
		    transform: rotate(360deg);
		  }
		}
		
		@media (prefers-reduced-motion: no-preference) {
		  a:nth-of-type(2) .logo {
		    animation: logo-spin infinite 20s linear;
		  }
		}
		
		.card {
		  padding: 2em;
		}
		
		.read-the-docs {
		  color: #888;
		}</file>
	<file path='src\App.tsx'><![CDATA[
		
		import { Toaster } from "@/components/ui/toaster";
		import { Toaster as Sonner } from "@/components/ui/sonner";
		import { TooltipProvider } from "@/components/ui/tooltip";
		import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
		import { BrowserRouter, Routes, Route } from "react-router-dom";
		import { AuthProvider } from "@/contexts/AuthContext";
		import ProtectedRoute from "@/components/auth/ProtectedRoute";
		import Dashboard from "./pages/Dashboard";
		import Notebook from "./pages/Notebook";
		import Auth from "./pages/Auth";
		import NotFound from "./pages/NotFound";
		
		const queryClient = new QueryClient();
		
		const AppContent = () => {
		  return (
		    <Routes>
		      <Route 
		        path="/" 
		        element={
		          <ProtectedRoute fallback={<Auth />}>
		            <Dashboard />
		          </ProtectedRoute>
		        } 
		      />
		      <Route 
		        path="/notebook" 
		        element={
		          <ProtectedRoute fallback={<Auth />}>
		            <Notebook />
		          </ProtectedRoute>
		        } 
		      />
		      <Route 
		        path="/notebook/:id" 
		        element={
		          <ProtectedRoute fallback={<Auth />}>
		            <Notebook />
		          </ProtectedRoute>
		        } 
		      />
		      <Route path="/auth" element={<Auth />} />
		      <Route path="*" element={<NotFound />} />
		    </Routes>
		  );
		};
		
		const App = () => (
		  <QueryClientProvider client={queryClient}>
		    <TooltipProvider>
		      <AuthProvider>
		        <Toaster />
		        <Sonner />
		        <BrowserRouter>
		          <AppContent />
		        </BrowserRouter>
		      </AuthProvider>
		    </TooltipProvider>
		  </QueryClientProvider>
		);
		
		export default App;]]></file>
	<file path='src\components\auth\AuthForm.tsx'><![CDATA[
		
		import React, { useState, useEffect } from 'react';
		import { supabase } from '@/integrations/supabase/client';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
		import { useToast } from '@/hooks/use-toast';
		import { useNavigate } from 'react-router-dom';
		import { useAuth } from '@/contexts/AuthContext';
		
		const AuthForm = () => {
		  const [email, setEmail] = useState('');
		  const [password, setPassword] = useState('');
		  const [loading, setLoading] = useState(false);
		  const { toast } = useToast();
		  const navigate = useNavigate();
		  const { isAuthenticated } = useAuth();
		
		  // Redirect to dashboard if already authenticated
		  useEffect(() => {
		    if (isAuthenticated) {
		      console.log('User is authenticated, redirecting to dashboard');
		      navigate('/', { replace: true });
		    }
		  }, [isAuthenticated, navigate]);
		
		  const handleSubmit = async (e: React.FormEvent) => {
		    e.preventDefault();
		    setLoading(true);
		
		    try {
		      console.log('Attempting sign in for:', email);
		      
		      const { error, data } = await supabase.auth.signInWithPassword({
		        email,
		        password,
		      });
		      
		      if (error) {
		        console.error('Sign in error:', error);
		        if (error.message.includes('Invalid login credentials')) {
		          throw new Error('Invalid email or password. Please check your credentials and try again.');
		        } else if (error.message.includes('Email not confirmed')) {
		          throw new Error('Please check your email and click the confirmation link before signing in.');
		        } else {
		          throw error;
		        }
		      }
		      
		      console.log('Sign in successful:', data.user?.email);
		      
		      toast({
		        title: "Welcome back!",
		        description: "You have successfully signed in.",
		      });
		
		      // The AuthContext will handle the redirect automatically
		      
		    } catch (error: any) {
		      console.error('Auth form error:', error);
		      toast({
		        title: "Sign In Error",
		        description: error.message,
		        variant: "destructive",
		      });
		    } finally {
		      setLoading(false);
		    }
		  };
		
		  return (
		    <Card className="w-full max-w-md mx-auto">
		      <CardHeader>
		        <CardTitle>Sign In</CardTitle>
		        <CardDescription>
		          Enter your credentials to access your notebooks
		        </CardDescription>
		      </CardHeader>
		      <CardContent>
		        <form onSubmit={handleSubmit} className="space-y-4">
		          <div className="space-y-2">
		            <Label htmlFor="email">Email</Label>
		            <Input
		              id="email"
		              type="email"
		              value={email}
		              onChange={(e) => setEmail(e.target.value)}
		              required
		              placeholder="Enter your email"
		            />
		          </div>
		          <div className="space-y-2">
		            <Label htmlFor="password">Password</Label>
		            <Input
		              id="password"
		              type="password"
		              value={password}
		              onChange={(e) => setPassword(e.target.value)}
		              required
		              placeholder="Enter your password"
		              minLength={6}
		            />
		          </div>
		          <Button type="submit" className="w-full" disabled={loading}>
		            {loading ? 'Signing In...' : 'Sign In'}
		          </Button>
		        </form>
		      </CardContent>
		    </Card>
		  );
		};
		
		export default AuthForm;]]></file>
	<file path='src\components\auth\ProtectedRoute.tsx'><![CDATA[
		
		import React from 'react';
		import { useAuth } from '@/contexts/AuthContext';
		
		interface ProtectedRouteProps {
		  children: React.ReactNode;
		  fallback: React.ReactNode;
		}
		
		const ProtectedRoute = ({ children, fallback }: ProtectedRouteProps) => {
		  const { isAuthenticated, loading } = useAuth();
		
		  if (loading) {
		    return (
		      <div className="min-h-screen flex items-center justify-center bg-gray-50">
		        <div className="text-center">
		          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
		          <p className="text-gray-600">Loading...</p>
		        </div>
		      </div>
		    );
		  }
		
		  return isAuthenticated ? <>{children}</> : <>{fallback}</>;
		};
		
		export default ProtectedRoute;]]></file>
	<file path='src\components\chat\CitationButton.tsx'><![CDATA[
		
		import React from 'react';
		import { Button } from '@/components/ui/button';
		
		interface CitationButtonProps {
		  chunkIndex: number;
		  onClick: () => void;
		  className?: string;
		}
		
		const CitationButton = ({ chunkIndex, onClick, className = '' }: CitationButtonProps) => {
		  return (
		    <Button
		      variant="outline"
		      size="sm"
		      onClick={onClick}
		      className={`inline-flex items-center justify-center w-6 h-6 p-0 ml-1 text-xs font-medium text-blue-600 border-blue-300 hover:bg-blue-50 hover:border-blue-400 rounded-full ${className}`}
		    >
		      {chunkIndex + 1}
		    </Button>
		  );
		};
		
		export default CitationButton;]]></file>
	<file path='src\components\chat\MarkdownRenderer.tsx'><![CDATA[
		
		import React from 'react';
		import { MessageSegment, Citation } from '@/types/message';
		import CitationButton from './CitationButton';
		
		interface MarkdownRendererProps {
		  content: string | { segments: MessageSegment[]; citations: Citation[] };
		  className?: string;
		  onCitationClick?: (citation: Citation) => void;
		  isUserMessage?: boolean;
		}
		
		const MarkdownRenderer = ({ content, className = '', onCitationClick, isUserMessage = false }: MarkdownRendererProps) => {
		  // Handle enhanced content with citations
		  if (typeof content === 'object' && 'segments' in content) {
		    return (
		      <div className={className}>
		        {processMarkdownWithCitations(content.segments, content.citations, onCitationClick, isUserMessage)}
		      </div>
		    );
		  }
		
		  // For legacy string content, convert to simple format
		  const segments: MessageSegment[] = [{ text: typeof content === 'string' ? content : '' }];
		  const citations: Citation[] = [];
		  
		  return (
		    <div className={className}>
		      {processMarkdownWithCitations(segments, citations, onCitationClick, isUserMessage)}
		    </div>
		  );
		};
		
		// Function to process markdown with citations inline
		const processMarkdownWithCitations = (
		  segments: MessageSegment[], 
		  citations: Citation[], 
		  onCitationClick?: (citation: Citation) => void,
		  isUserMessage: boolean = false
		) => {
		  // For user messages, render as inline content without paragraph breaks
		  if (isUserMessage) {
		    return (
		      <span>
		        {segments.map((segment, index) => (
		          <span key={index}>
		            {processInlineMarkdown(segment.text)}
		            {segment.citation_id && onCitationClick && (
		              <CitationButton
		                chunkIndex={(() => {
		                  const citation = citations.find(c => c.citation_id === segment.citation_id);
		                  return citation?.chunk_index || 0;
		                })()}
		                onClick={() => {
		                  const citation = citations.find(c => c.citation_id === segment.citation_id);
		                  if (citation) {
		                    onCitationClick(citation);
		                  }
		                }}
		              />
		            )}
		          </span>
		        ))}
		      </span>
		    );
		  }
		
		  // For AI messages, treat each segment as a potential paragraph
		  const paragraphs: JSX.Element[] = [];
		  
		  segments.forEach((segment, segmentIndex) => {
		    const citation = segment.citation_id ? citations.find(c => c.citation_id === segment.citation_id) : undefined;
		    
		    // Split segment text by double line breaks to handle multiple paragraphs within a segment
		    const paragraphTexts = segment.text.split('\n\n').filter(text => text.trim());
		    
		    paragraphTexts.forEach((paragraphText, paragraphIndex) => {
		      // Process the paragraph text for markdown formatting
		      const processedContent = processTextWithMarkdown(paragraphText.trim());
		      
		      paragraphs.push(
		        <p key={`${segmentIndex}-${paragraphIndex}`} className="mb-4 leading-relaxed">
		          {processedContent}
		          {/* Add citation at the end of the paragraph if this is the last paragraph of the segment */}
		          {paragraphIndex === paragraphTexts.length - 1 && citation && onCitationClick && (
		            <CitationButton
		              chunkIndex={citation.chunk_index || 0}
		              onClick={() => onCitationClick(citation)}
		            />
		          )}
		        </p>
		      );
		    });
		  });
		  
		  return paragraphs;
		};
		
		// Helper function to process text with markdown formatting (bold, line breaks)
		const processTextWithMarkdown = (text: string) => {
		  const lines = text.split('\n');
		  
		  return lines.map((line, lineIndex) => {
		    const parts = line.split(/(\*\*.*?\*\*|__.*?__)/g);
		    
		    const processedLine = parts.map((part, partIndex) => {
		      if (part.match(/^\*\*(.*)\*\*$/)) {
		        const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
		        return <strong key={partIndex}>{boldText}</strong>;
		      } else if (part.match(/^__(.*__)$/)) {
		        const boldText = part.replace(/^__(.*__)$/, '$1');
		        return <strong key={partIndex}>{boldText}</strong>;
		      } else {
		        return part;
		      }
		    });
		
		    return (
		      <span key={lineIndex}>
		        {processedLine}
		        {lineIndex < lines.length - 1 && <br />}
		      </span>
		    );
		  });
		};
		
		// Function to process markdown inline without creating paragraph breaks
		const processInlineMarkdown = (text: string) => {
		  const parts = text.split(/(\*\*.*?\*\*|__.*?__)/g);
		  
		  return parts.map((part, partIndex) => {
		    if (part.match(/^\*\*(.*)\*\*$/)) {
		      const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
		      return <strong key={partIndex}>{boldText}</strong>;
		    } else if (part.match(/^__(.*__)$/)) {
		      const boldText = part.replace(/^__(.*__)$/, '$1');
		      return <strong key={partIndex}>{boldText}</strong>;
		    } else {
		      // Replace line breaks with spaces for inline rendering
		      return part.replace(/\n/g, ' ');
		    }
		  });
		};
		
		export default MarkdownRenderer;]]></file>
	<file path='src\components\chat\SourceContentViewer.tsx'><![CDATA[
		
		import React, { useEffect, useRef, useState } from 'react';
		import { ScrollArea } from '@/components/ui/scroll-area';
		import { Badge } from '@/components/ui/badge';
		import { Citation } from '@/types/message';
		import {
		  Accordion,
		  AccordionContent,
		  AccordionItem,
		  AccordionTrigger,
		} from '@/components/ui/accordion';
		
		interface SourceContentViewerProps {
		  citation: Citation | null;
		  sourceContent?: string;
		  sourceSummary?: string;
		  sourceUrl?: string;
		  className?: string;
		  isOpenedFromSourceList?: boolean;
		}
		
		const SourceContentViewer = ({ 
		  citation, 
		  sourceContent, 
		  sourceSummary,
		  sourceUrl,
		  className = '',
		  isOpenedFromSourceList = false
		}: SourceContentViewerProps) => {
		  const highlightedContentRef = useRef<HTMLDivElement>(null);
		  const scrollAreaViewportRef = useRef<HTMLDivElement>(null);
		  
		  // Control accordion state based on how the viewer was opened
		  const [accordionValue, setAccordionValue] = useState<string>(
		    isOpenedFromSourceList ? "guide" : ""
		  );
		
		  // Check if we have valid citation line data (indicating a real citation click)
		  const hasValidCitationLines = citation && 
		    typeof citation.chunk_lines_from === 'number' && 
		    typeof citation.chunk_lines_to === 'number' &&
		    citation.chunk_lines_from > 0;
		
		  console.log('SourceContentViewer: Render with citation', {
		    citationId: citation?.citation_id,
		    sourceId: citation?.source_id,
		    hasValidCitationLines,
		    isOpenedFromSourceList,
		    chunkLinesFrom: citation?.chunk_lines_from,
		    chunkLinesTo: citation?.chunk_lines_to
		  });
		
		  // Auto-scroll to highlighted content when citation changes and has valid line data
		  useEffect(() => {
		    console.log('SourceContentViewer: Auto-scroll effect triggered', {
		      hasValidCitationLines,
		      citationId: citation?.citation_id,
		      hasHighlightedRef: !!highlightedContentRef.current,
		      hasScrollAreaRef: !!scrollAreaViewportRef.current
		    });
		
		    if (hasValidCitationLines && highlightedContentRef.current && scrollAreaViewportRef.current) {
		      console.log('SourceContentViewer: Starting auto-scroll process');
		      
		      // Increased delay to ensure DOM has fully updated
		      const timer = setTimeout(() => {
		        if (highlightedContentRef.current && scrollAreaViewportRef.current) {
		          console.log('SourceContentViewer: Executing auto-scroll');
		          
		          // Find the actual viewport element within the ScrollArea
		          const scrollAreaElement = scrollAreaViewportRef.current;
		          const viewport = scrollAreaElement.querySelector('[data-radix-scroll-area-viewport]') as HTMLElement;
		          
		          if (viewport && highlightedContentRef.current) {
		            const highlightedElement = highlightedContentRef.current;
		            
		            console.log('SourceContentViewer: Scroll calculation', {
		              highlightedOffsetTop: highlightedElement.offsetTop,
		              highlightedHeight: highlightedElement.clientHeight,
		              viewportHeight: viewport.clientHeight,
		              currentScrollTop: viewport.scrollTop
		            });
		            
		            // Calculate the scroll position to center the highlighted content
		            const scrollTop = highlightedElement.offsetTop - (viewport.clientHeight / 2) + (highlightedElement.clientHeight / 2);
		            const targetScrollTop = Math.max(0, scrollTop);
		            
		            console.log('SourceContentViewer: Scrolling to position', { targetScrollTop });
		            
		            viewport.scrollTo({
		              top: targetScrollTop,
		              behavior: 'smooth'
		            });
		          } else {
		            console.log('SourceContentViewer: Viewport or highlighted element not found', {
		              viewport: !!viewport,
		              highlightedElement: !!highlightedContentRef.current
		            });
		          }
		        }
		      }, 300); // Increased delay for better reliability
		
		      return () => clearTimeout(timer);
		    }
		  }, [citation?.citation_id, citation?.chunk_lines_from, citation?.chunk_lines_to, citation?.source_id, hasValidCitationLines]);
		
		  // Close guide when a real citation is clicked (has valid line data)
		  useEffect(() => {
		    if (hasValidCitationLines) {
		      console.log('SourceContentViewer: Closing guide for real citation');
		      setAccordionValue("");
		    }
		  }, [hasValidCitationLines]);
		
		  if (!citation || !sourceContent) {
		    return (
		      <div className="p-4 text-center text-gray-500">
		        <p className="text-sm">Select a citation to view source content</p>
		      </div>
		    );
		  }
		
		  const getSourceIcon = (type: string) => {
		    const iconMap: Record<string, string> = {
		      'pdf': '/file-types/PDF.svg',
		      'text': '/file-types/TXT.png',
		      'website': '/file-types/WEB.svg',
		      'youtube': '/file-types/MP3.png',
		      'audio': '/file-types/MP3.png',
		      'doc': '/file-types/DOC.png',
		      'multiple-websites': '/file-types/WEB.svg',
		      'copied-text': '/file-types/TXT.png'
		    };
		
		    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon
		    
		    return (
		      <img 
		        src={iconUrl} 
		        alt={`${type} icon`} 
		        className="w-full h-full object-contain"
		        onError={(e) => {
		          // Fallback to a simple text indicator if image fails to load
		          const target = e.target as HTMLImageElement;
		          target.style.display = 'none';
		          target.parentElement!.innerHTML = '📄';
		        }}
		      />
		    );
		  };
		
		  // Split content into lines for highlighting
		  const lines = sourceContent.split('\n');
		  
		  // Determine the highlight range based on whether we have valid citation line data
		  let startLine: number;
		  let endLine: number;
		  
		  if (hasValidCitationLines) {
		    // For real citations with valid line data, highlight the specific lines
		    startLine = citation.chunk_lines_from!;
		    endLine = citation.chunk_lines_to!;
		    console.log('SourceContentViewer: Will highlight lines', { startLine, endLine });
		  } else {
		    // For source list clicks or citations without line data, don't highlight
		    startLine = -1;
		    endLine = -1;
		    console.log('SourceContentViewer: No highlighting (no valid line data)');
		  }
		
		  const renderHighlightedContent = () => {
		    return lines.map((line, index) => {
		      const lineNumber = index + 1;
		      const isHighlighted = startLine > 0 && lineNumber >= startLine && lineNumber <= endLine;
		      const isFirstHighlightedLine = isHighlighted && lineNumber === startLine;
		      
		      return (
		        <div
		          key={index}
		          ref={isFirstHighlightedLine ? highlightedContentRef : null}
		          className={`py-2 px-3 rounded leading-relaxed ${
		            isHighlighted 
		              ? 'border-l-4' 
		              : 'hover:bg-gray-50'
		          }`}
		          style={isHighlighted ? { 
		            backgroundColor: '#eadef9', 
		            borderLeftColor: '#9333ea' 
		          } : {}}
		        >
		          <span className={isHighlighted ? 'font-medium' : ''}>{line}</span>
		        </div>
		      );
		    });
		  };
		
		  return (
		    <div className={`flex flex-col h-full overflow-hidden ${className}`}>
		      {/* Header */}
		      <div className="p-4 border-b border-gray-200 flex-shrink-0">
		        <div className="flex items-center space-x-2 mb-2">
		          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
		            {getSourceIcon(citation.source_type)}
		          </div>
		          <span className="font-medium text-gray-900 truncate">{citation.source_title}</span>
		        </div>
		      </div>
		
		      {/* Source Guide Accordion */}
		      {sourceSummary && (
		        <div className="border-b border-gray-200 flex-shrink-0">
		          <Accordion type="single" value={accordionValue} onValueChange={setAccordionValue} collapsible>
		            <AccordionItem value="guide" className="border-0">
		              <AccordionTrigger 
		                className="px-4 py-3 text-sm font-medium hover:no-underline hover:bg-blue-50" 
		                style={{ color: '#234776' }}
		                chevronColor="#234776"
		              >
		                <div className="flex items-center space-x-2">
		                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#234776">
		                    <path d="M166.67-120.67 120-167.33l317.67-318L254-531l194-121-16.33-228 175 147L818-818.33l-85.67 211.66L880-432l-228.67-16.67-120.66 194L485-438.33 166.67-120.67Zm24.66-536L120-728l72-72 71.33 71.33-72 72Zm366.34 233 58-94.33 111 8.33-72-85 41.66-102.66-102.66 41.66-85-71.66L517-616.67l-94.33 59 108 26.67 27 107.33Zm171 303.67-71.34-72 71.34-71.33 71.33 72L728.67-120ZM575-576Z"/>
		                  </svg>
		                  <span>Source guide</span>
		                </div>
		              </AccordionTrigger>
		              <AccordionContent className="px-4 pb-4">
		                <div className="text-sm text-gray-700 space-y-4">
		                  <div>
		                    <h4 className="font-medium mb-2">Summary</h4>
		                    <p className="leading-relaxed">{sourceSummary}</p>
		                  </div>
		                  
		                  {/* Show URL for website sources */}
		                  {citation.source_type === 'website' && sourceUrl && (
		                    <div>
		                      <h4 className="font-medium mb-2">URL</h4>
		                      <a 
		                        href={sourceUrl} 
		                        target="_blank" 
		                        rel="noopener noreferrer"
		                        className="text-blue-600 hover:text-blue-800 hover:underline break-all text-sm"
		                      >
		                        {sourceUrl}
		                      </a>
		                    </div>
		                  )}
		                </div>
		              </AccordionContent>
		            </AccordionItem>
		          </Accordion>
		        </div>
		      )}
		
		      {/* Content */}
		      <ScrollArea className="flex-1 h-full" ref={scrollAreaViewportRef}>
		        <div className="p-4">
		          <div className="prose prose-gray max-w-none space-y-1">
		            {renderHighlightedContent()}
		          </div>
		        </div>
		      </ScrollArea>
		    </div>
		  );
		};
		
		export default SourceContentViewer;]]></file>
	<file path='src\components\chat\SourceViewer.tsx'><![CDATA[
		
		import React from 'react';
		import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
		import { Badge } from '@/components/ui/badge';
		import { ScrollArea } from '@/components/ui/scroll-area';
		import { Citation } from '@/types/message';
		
		interface SourceViewerProps {
		  citation: Citation | null;
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		}
		
		const SourceViewer = ({ citation, open, onOpenChange }: SourceViewerProps) => {
		  if (!citation) return null;
		
		  const getSourceIcon = (type: string) => {
		    switch (type) {
		      case 'pdf':
		        return '📄';
		      case 'text':
		        return '📝';
		      case 'website':
		        return '🌐';
		      case 'youtube':
		        return '📺';
		      case 'audio':
		        return '🎵';
		      default:
		        return '📄';
		    }
		  };
		
		  return (
		    <Dialog open={open} onOpenChange={onOpenChange}>
		      <DialogContent className="max-w-2xl">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <span className="text-xl">{getSourceIcon(citation.source_type)}</span>
		            <span>{citation.source_title}</span>
		          </DialogTitle>
		        </DialogHeader>
		        
		        <div className="space-y-4">
		          <div className="flex items-center space-x-2">
		            <Badge variant="outline" className="text-xs">
		              Citation {citation.citation_id}
		            </Badge>
		            {citation.chunk_lines_from && citation.chunk_lines_to && (
		              <Badge variant="outline" className="text-xs">
		                Lines {citation.chunk_lines_from}-{citation.chunk_lines_to}
		              </Badge>
		            )}
		          </div>
		          
		          {citation.excerpt && (
		            <div className="border-l-4 border-blue-500 pl-4">
		              <h4 className="font-medium text-gray-900 mb-2">Source Excerpt</h4>
		              <ScrollArea className="max-h-64">
		                <p className="text-sm text-gray-700 leading-relaxed">
		                  {citation.excerpt}
		                </p>
		              </ScrollArea>
		            </div>
		          )}
		        </div>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default SourceViewer;]]></file>
	<file path='src\components\dashboard\DashboardHeader.tsx'><![CDATA[
		
		import React from 'react';
		import { Button } from '@/components/ui/button';
		import { User, LogOut } from 'lucide-react';
		import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
		import { useLogout } from '@/services/authService';
		import Logo from '@/components/ui/Logo';
		
		interface DashboardHeaderProps {
		  userEmail?: string;
		}
		
		const DashboardHeader = ({ userEmail }: DashboardHeaderProps) => {
		  const { logout } = useLogout();
		
		  return (
		    <header className="bg-white px-6 py-4">
		      <div className="flex items-center justify-between">
		        <div className="flex items-center space-x-2">
		          <Logo />
		          <h1 className="text-xl font-medium text-gray-900">InsightsLM</h1>
		        </div>
		        
		        <div className="flex items-center space-x-4">
		          <DropdownMenu>
		            <DropdownMenuTrigger asChild>
		              <Button variant="ghost" size="sm" className="p-0">
		                <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-purple-600 transition-colors">
		                  <User className="h-4 w-4 text-white" />
		                </div>
		              </Button>
		            </DropdownMenuTrigger>
		            <DropdownMenuContent align="end" className="w-48">
		              <DropdownMenuItem onClick={logout} className="cursor-pointer">
		                <LogOut className="h-4 w-4 mr-2" />
		                Sign Out
		              </DropdownMenuItem>
		            </DropdownMenuContent>
		          </DropdownMenu>
		        </div>
		      </div>
		    </header>
		  );
		};
		
		export default DashboardHeader;]]></file>
	<file path='src\components\dashboard\EmptyDashboard.tsx'><![CDATA[
		import React from 'react';
		import { Button } from '@/components/ui/button';
		import { Upload, FileText, Globe, Video, Mic } from 'lucide-react';
		import { useNavigate } from 'react-router-dom';
		import { useNotebooks } from '@/hooks/useNotebooks';
		const EmptyDashboard = () => {
		  const navigate = useNavigate();
		  const {
		    createNotebook,
		    isCreating
		  } = useNotebooks();
		  const handleCreateNotebook = () => {
		    console.log('Create notebook button clicked');
		    console.log('isCreating:', isCreating);
		    createNotebook({
		      title: 'Untitled notebook',
		      description: ''
		    }, {
		      onSuccess: data => {
		        console.log('Navigating to notebook:', data.id);
		        navigate(`/notebook/${data.id}`);
		      },
		      onError: error => {
		        console.error('Failed to create notebook:', error);
		      }
		    });
		  };
		  return <div className="text-center py-16">
		      <div className="mb-12">
		        <h2 className="text-3xl font-medium text-gray-900 mb-4">Create your first notebook</h2>
		        <p className="text-lg text-gray-600 max-w-2xl mx-auto">InsightsLM is an AI-powered research and writing assistant that works best with the sources you upload</p>
		      </div>
		
		      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12">
		        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
		          <div className="w-12 h-12 bg-blue-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
		            <FileText className="h-6 w-6 text-blue-600" />
		          </div>
		          <h3 className="text-lg font-medium text-gray-900 mb-2">PDFs</h3>
		          <p className="text-gray-600">Upload research papers, reports, and documents</p>
		        </div>
		
		        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
		          <div className="w-12 h-12 bg-green-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
		            <Globe className="h-6 w-6 text-green-600" />
		          </div>
		          <h3 className="text-lg font-medium text-gray-900 mb-2">Websites</h3>
		          <p className="text-gray-600">Add web pages and online articles as sources</p>
		        </div>
		
		        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
		          <div className="w-12 h-12 bg-purple-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
		            <Video className="h-6 w-6 text-purple-600" />
		          </div>
		          <h3 className="text-lg font-medium text-gray-900 mb-2">Audio</h3>
		          <p className="text-gray-600">Include multimedia content in your research</p>
		        </div>
		      </div>
		
		      <Button onClick={handleCreateNotebook} size="lg" className="bg-blue-600 hover:bg-blue-700" disabled={isCreating}>
		        <Upload className="h-5 w-5 mr-2" />
		        {isCreating ? 'Creating...' : 'Create notebook'}
		      </Button>
		    </div>;
		};
		export default EmptyDashboard;]]></file>
	<file path='src\components\dashboard\NotebookCard.tsx'><![CDATA[
		import React, { useState } from 'react';
		import { Trash2 } from 'lucide-react';
		import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
		import { useNotebookDelete } from '@/hooks/useNotebookDelete';
		
		interface NotebookCardProps {
		  notebook: {
		    id: string;
		    title: string;
		    date: string;
		    sources: number;
		    icon: string;
		    color: string;
		    hasCollaborators?: boolean;
		  };
		}
		
		const NotebookCard = ({
		  notebook
		}: NotebookCardProps) => {
		  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
		  const {
		    deleteNotebook,
		    isDeleting
		  } = useNotebookDelete();
		
		  const handleDeleteClick = (e: React.MouseEvent) => {
		    e.stopPropagation();
		    e.preventDefault();
		    console.log('Delete button clicked for notebook:', notebook.id);
		    setShowDeleteDialog(true);
		  };
		
		  const handleConfirmDelete = (e: React.MouseEvent) => {
		    e.stopPropagation();
		    e.preventDefault();
		    console.log('Confirming delete for notebook:', notebook.id);
		    deleteNotebook(notebook.id);
		    setShowDeleteDialog(false);
		  };
		
		  // Generate CSS classes from color name
		  const colorName = notebook.color || 'gray';
		  const backgroundClass = `bg-${colorName}-100`;
		  const borderClass = `border-${colorName}-200`;
		
		  return <div 
		      className={`rounded-lg border ${borderClass} ${backgroundClass} p-4 hover:shadow-md transition-shadow cursor-pointer relative h-48 flex flex-col`}
		    >
		      <div className="absolute top-3 right-3" data-delete-action="true">
		        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
		          <AlertDialogTrigger asChild>
		            <button onClick={handleDeleteClick} className="p-1 hover:bg-red-50 rounded text-gray-400 hover:text-red-500 transition-colors delete-button" disabled={isDeleting} data-delete-action="true">
		              <Trash2 className="h-4 w-4" />
		            </button>
		          </AlertDialogTrigger>
		          <AlertDialogContent>
		            <AlertDialogHeader>
		              <AlertDialogTitle>Delete this notebook?</AlertDialogTitle>
		              <AlertDialogDescription>
		                You're about to delete this notebook and all of its content. This cannot be undone.
		              </AlertDialogDescription>
		            </AlertDialogHeader>
		            <AlertDialogFooter>
		              <AlertDialogCancel>Cancel</AlertDialogCancel>
		              <AlertDialogAction onClick={handleConfirmDelete} className="bg-blue-600 hover:bg-blue-700" disabled={isDeleting}>
		                {isDeleting ? 'Deleting...' : 'Delete'}
		              </AlertDialogAction>
		            </AlertDialogFooter>
		          </AlertDialogContent>
		        </AlertDialog>
		      </div>
		      
		      <div className="w-12 h-12 rounded-lg flex items-center justify-center mb-4">
		        <span className="text-3xl">{notebook.icon}</span>
		      </div>
		      
		      <h3 className="text-gray-900 mb-2 pr-6 line-clamp-2 text-2xl font-normal flex-grow">
		        {notebook.title}
		      </h3>
		      
		      <div className="flex items-center justify-between text-sm text-gray-500 mt-auto">
		        <span>{notebook.date} • {notebook.sources} source{notebook.sources !== 1 ? 's' : ''}</span>
		      </div>
		    </div>;
		};
		
		export default NotebookCard;]]></file>
	<file path='src\components\dashboard\NotebookGrid.tsx'><![CDATA[
		
		import React, { useState, useMemo } from 'react';
		import { Button } from '@/components/ui/button';
		import NotebookCard from './NotebookCard';
		import { Check, Grid3X3, List, ChevronDown } from 'lucide-react';
		import { useNotebooks } from '@/hooks/useNotebooks';
		import { useNavigate } from 'react-router-dom';
		import {
		  DropdownMenu,
		  DropdownMenuContent,
		  DropdownMenuItem,
		  DropdownMenuTrigger,
		} from '@/components/ui/dropdown-menu';
		
		const NotebookGrid = () => {
		  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
		  const [sortBy, setSortBy] = useState('Most recent');
		  const {
		    notebooks,
		    isLoading,
		    createNotebook,
		    isCreating
		  } = useNotebooks();
		  const navigate = useNavigate();
		
		  const sortedNotebooks = useMemo(() => {
		    if (!notebooks) return [];
		    
		    const sorted = [...notebooks];
		    
		    if (sortBy === 'Most recent') {
		      return sorted.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
		    } else if (sortBy === 'Title') {
		      return sorted.sort((a, b) => a.title.localeCompare(b.title));
		    }
		    
		    return sorted;
		  }, [notebooks, sortBy]);
		
		  const handleCreateNotebook = () => {
		    createNotebook({
		      title: 'Untitled notebook',
		      description: ''
		    }, {
		      onSuccess: data => {
		        console.log('Navigating to notebook:', data.id);
		        navigate(`/notebook/${data.id}`);
		      },
		      onError: error => {
		        console.error('Failed to create notebook:', error);
		      }
		    });
		  };
		
		  const handleNotebookClick = (notebookId: string, e: React.MouseEvent) => {
		    // Check if the click is coming from a delete action or other interactive element
		    const target = e.target as HTMLElement;
		    const isDeleteAction = target.closest('[data-delete-action="true"]') || target.closest('.delete-button') || target.closest('[role="dialog"]');
		    if (isDeleteAction) {
		      console.log('Click prevented due to delete action');
		      return;
		    }
		    navigate(`/notebook/${notebookId}`);
		  };
		
		  if (isLoading) {
		    return <div className="text-center py-16">
		        <p className="text-gray-600">Loading notebooks...</p>
		      </div>;
		  }
		
		  return <div>
		      <div className="flex items-center justify-between mb-8">
		        <Button className="bg-black hover:bg-gray-800 text-white rounded-full px-6" onClick={handleCreateNotebook} disabled={isCreating}>
		          {isCreating ? 'Creating...' : '+ Create new'}
		        </Button>
		        
		        <div className="flex items-center space-x-4">
		          <DropdownMenu>
		            <DropdownMenuTrigger asChild>
		              <div className="flex items-center space-x-2 bg-white rounded-lg border px-3 py-2 cursor-pointer hover:bg-gray-50 transition-colors">
		                <span className="text-sm text-gray-600">{sortBy}</span>
		                <ChevronDown className="h-4 w-4 text-gray-400" />
		              </div>
		            </DropdownMenuTrigger>
		            <DropdownMenuContent align="end" className="w-48">
		              <DropdownMenuItem onClick={() => setSortBy('Most recent')} className="flex items-center justify-between">
		                Most recent
		                {sortBy === 'Most recent' && <Check className="h-4 w-4" />}
		              </DropdownMenuItem>
		              <DropdownMenuItem onClick={() => setSortBy('Title')} className="flex items-center justify-between">
		                Title
		                {sortBy === 'Title' && <Check className="h-4 w-4" />}
		              </DropdownMenuItem>
		            </DropdownMenuContent>
		          </DropdownMenu>
		        </div>
		      </div>
		
		      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
		        {sortedNotebooks.map(notebook => <div key={notebook.id} onClick={e => handleNotebookClick(notebook.id, e)}>
		            <NotebookCard notebook={{
		          id: notebook.id,
		          title: notebook.title,
		          date: new Date(notebook.updated_at).toLocaleDateString('en-US', {
		            month: 'short',
		            day: 'numeric',
		            year: 'numeric'
		          }),
		          sources: notebook.sources?.[0]?.count || 0,
		          icon: notebook.icon || '📝',
		          color: notebook.color || 'bg-gray-100'
		        }} />
		          </div>)}
		      </div>
		    </div>;
		};
		
		export default NotebookGrid;]]></file>
	<file path='src\components\notebook\AddSourcesDialog.tsx'><![CDATA[
		import React, { useState, useCallback, useEffect } from 'react';
		import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Upload, FileText, Link, Copy } from 'lucide-react';
		import MultipleWebsiteUrlsDialog from './MultipleWebsiteUrlsDialog';
		import CopiedTextDialog from './CopiedTextDialog';
		import { useSources } from '@/hooks/useSources';
		import { useFileUpload } from '@/hooks/useFileUpload';
		import { useDocumentProcessing } from '@/hooks/useDocumentProcessing';
		import { useNotebookGeneration } from '@/hooks/useNotebookGeneration';
		import { useToast } from '@/hooks/use-toast';
		import { supabase } from '@/integrations/supabase/client';
		
		interface AddSourcesDialogProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  notebookId?: string;
		}
		
		const AddSourcesDialog = ({
		  open,
		  onOpenChange,
		  notebookId
		}: AddSourcesDialogProps) => {
		  const [dragActive, setDragActive] = useState(false);
		  const [showCopiedTextDialog, setShowCopiedTextDialog] = useState(false);
		  const [showMultipleWebsiteDialog, setShowMultipleWebsiteDialog] = useState(false);
		  const [isLocallyProcessing, setIsLocallyProcessing] = useState(false);
		
		  const {
		    addSourceAsync,
		    updateSource,
		    isAdding
		  } = useSources(notebookId);
		
		  const {
		    uploadFile,
		    isUploading
		  } = useFileUpload();
		
		  const {
		    processDocumentAsync,
		    isProcessing
		  } = useDocumentProcessing();
		
		  const {
		    generateNotebookContentAsync,
		    isGenerating
		  } = useNotebookGeneration();
		
		  const {
		    toast
		  } = useToast();
		
		  // Reset local processing state when dialog opens
		  useEffect(() => {
		    if (open) {
		      setIsLocallyProcessing(false);
		    }
		  }, [open]);
		
		  const handleDrag = useCallback((e: React.DragEvent) => {
		    e.preventDefault();
		    e.stopPropagation();
		    if (e.type === 'dragenter' || e.type === 'dragover') {
		      setDragActive(true);
		    } else if (e.type === 'dragleave') {
		      setDragActive(false);
		    }
		  }, []);
		
		  const handleDrop = useCallback((e: React.DragEvent) => {
		    e.preventDefault();
		    e.stopPropagation();
		    setDragActive(false);
		    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
		      const files = Array.from(e.dataTransfer.files);
		      handleFileUpload(files);
		    }
		  }, []);
		
		  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
		    if (e.target.files && e.target.files[0]) {
		      const files = Array.from(e.target.files);
		      handleFileUpload(files);
		    }
		  }, []);
		
		  const processFileAsync = async (file: File, sourceId: string, notebookId: string) => {
		    try {
		      console.log('Starting file processing for:', file.name, 'source:', sourceId);
		      const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';
		
		      // Update status to uploading
		      updateSource({
		        sourceId,
		        updates: {
		          processing_status: 'uploading'
		        }
		      });
		
		      // Upload the file
		      const filePath = await uploadFile(file, notebookId, sourceId);
		      if (!filePath) {
		        throw new Error('File upload failed - no file path returned');
		      }
		      console.log('File uploaded successfully:', filePath);
		
		      // Update with file path and set to processing
		      updateSource({
		        sourceId,
		        updates: {
		          file_path: filePath,
		          processing_status: 'processing'
		        }
		      });
		
		      // Start document processing
		      try {
		        await processDocumentAsync({
		          sourceId,
		          filePath,
		          sourceType: fileType
		        });
		
		        // Generate notebook content
		        await generateNotebookContentAsync({
		          notebookId,
		          filePath,
		          sourceType: fileType
		        });
		        console.log('Document processing completed for:', sourceId);
		      } catch (processingError) {
		        console.error('Document processing failed:', processingError);
		
		        // Update to completed with basic info if processing fails
		        updateSource({
		          sourceId,
		          updates: {
		            processing_status: 'completed'
		          }
		        });
		      }
		    } catch (error) {
		      console.error('File processing failed for:', file.name, error);
		
		      // Update status to failed
		      updateSource({
		        sourceId,
		        updates: {
		          processing_status: 'failed'
		        }
		      });
		    }
		  };
		
		  const handleFileUpload = async (files: File[]) => {
		    if (!notebookId) {
		      toast({
		        title: "Error",
		        description: "No notebook selected",
		        variant: "destructive"
		      });
		      return;
		    }
		
		    console.log('Processing multiple files with delay strategy:', files.length);
		    setIsLocallyProcessing(true);
		
		    try {
		      // Step 1: Create the first source immediately (this will trigger generation if it's the first source)
		      const firstFile = files[0];
		      const firstFileType = firstFile.type.includes('pdf') ? 'pdf' : firstFile.type.includes('audio') ? 'audio' : 'text';
		      const firstSourceData = {
		        notebookId,
		        title: firstFile.name,
		        type: firstFileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
		        file_size: firstFile.size,
		        processing_status: 'pending',
		        metadata: {
		          fileName: firstFile.name,
		          fileType: firstFile.type
		        }
		      };
		      
		      console.log('Creating first source for:', firstFile.name);
		      const firstSource = await addSourceAsync(firstSourceData);
		      
		      let remainingSources = [];
		      
		      // Step 2: If there are more files, add a delay before creating the rest
		      if (files.length > 1) {
		        console.log('Adding 150ms delay before creating remaining sources...');
		        await new Promise(resolve => setTimeout(resolve, 150));
		        
		        // Create remaining sources
		        remainingSources = await Promise.all(files.slice(1).map(async (file, index) => {
		          const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';
		          const sourceData = {
		            notebookId,
		            title: file.name,
		            type: fileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
		            file_size: file.size,
		            processing_status: 'pending',
		            metadata: {
		              fileName: file.name,
		              fileType: file.type
		            }
		          };
		          console.log('Creating source for:', file.name);
		          return await addSourceAsync(sourceData);
		        }));
		        
		        console.log('Remaining sources created:', remainingSources.length);
		      }
		
		      // Combine all created sources
		      const allCreatedSources = [firstSource, ...remainingSources];
		
		      console.log('All sources created successfully:', allCreatedSources.length);
		
		      // Step 3: Close dialog immediately
		      setIsLocallyProcessing(false);
		      onOpenChange(false);
		
		      // Step 4: Show success toast
		      toast({
		        title: "Files Added",
		        description: `${files.length} file${files.length > 1 ? 's' : ''} added and processing started`
		      });
		
		      // Step 5: Process files in parallel (background)
		      const processingPromises = files.map((file, index) => processFileAsync(file, allCreatedSources[index].id, notebookId));
		
		      // Don't await - let processing happen in background
		      Promise.allSettled(processingPromises).then(results => {
		        const successful = results.filter(r => r.status === 'fulfilled').length;
		        const failed = results.filter(r => r.status === 'rejected').length;
		
		        console.log('File processing completed:', {
		          successful,
		          failed
		        });
		
		        if (failed > 0) {
		          toast({
		            title: "Processing Issues",
		            description: `${failed} file${failed > 1 ? 's' : ''} had processing issues. Check the sources list for details.`,
		            variant: "destructive"
		          });
		        }
		      });
		    } catch (error) {
		      console.error('Error creating sources:', error);
		      setIsLocallyProcessing(false);
		      toast({
		        title: "Error",
		        description: "Failed to add files. Please try again.",
		        variant: "destructive"
		      });
		    }
		  };
		
		  const handleTextSubmit = async (title: string, content: string) => {
		    if (!notebookId) return;
		    setIsLocallyProcessing(true);
		
		    try {
		      // Create source record first to get the ID
		      const createdSource = await addSourceAsync({
		        notebookId,
		        title,
		        type: 'text',
		        content,
		        processing_status: 'processing',
		        metadata: {
		          characterCount: content.length,
		          webhookProcessed: true
		        }
		      });
		
		      // Send to webhook endpoint with source ID
		      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
		        body: {
		          type: 'copied-text',
		          notebookId,
		          title,
		          content,
		          sourceIds: [createdSource.id], // Pass the source ID
		          timestamp: new Date().toISOString()
		        }
		      });
		
		      if (error) {
		        throw error;
		      }
		
		      toast({
		        title: "Success",
		        description: "Text has been added and sent for processing"
		      });
		    } catch (error) {
		      console.error('Error adding text source:', error);
		      toast({
		        title: "Error",
		        description: "Failed to add text source",
		        variant: "destructive"
		      });
		    } finally {
		      setIsLocallyProcessing(false);
		    }
		
		    onOpenChange(false);
		  };
		
		  const handleMultipleWebsiteSubmit = async (urls: string[]) => {
		    if (!notebookId) return;
		    setIsLocallyProcessing(true);
		
		    try {
		      console.log('Creating sources for multiple websites with delay strategy:', urls.length);
		      
		      // Create the first source immediately (this will trigger generation if it's the first source)
		      const firstSource = await addSourceAsync({
		        notebookId,
		        title: `Website 1: ${urls[0]}`,
		        type: 'website',
		        url: urls[0],
		        processing_status: 'processing',
		        metadata: {
		          originalUrl: urls[0],
		          webhookProcessed: true
		        }
		      });
		      
		      console.log('First source created:', firstSource.id);
		      
		      let remainingSources = [];
		      
		      // If there are more URLs, add a delay before creating the rest
		      if (urls.length > 1) {
		        console.log('Adding 150ms delay before creating remaining sources...');
		        await new Promise(resolve => setTimeout(resolve, 150));
		        
		        // Create remaining sources
		        remainingSources = await Promise.all(urls.slice(1).map(async (url, index) => {
		          return await addSourceAsync({
		            notebookId,
		            title: `Website ${index + 2}: ${url}`,
		            type: 'website',
		            url,
		            processing_status: 'processing',
		            metadata: {
		              originalUrl: url,
		              webhookProcessed: true
		            }
		          });
		        }));
		        
		        console.log('Remaining sources created:', remainingSources.length);
		      }
		
		      // Combine all created sources
		      const allCreatedSources = [firstSource, ...remainingSources];
		
		      // Send to webhook endpoint with all source IDs
		      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
		        body: {
		          type: 'multiple-websites',
		          notebookId,
		          urls,
		          sourceIds: allCreatedSources.map(source => source.id), // Pass array of source IDs
		          timestamp: new Date().toISOString()
		        }
		      });
		
		      if (error) {
		        throw error;
		      }
		
		      toast({
		        title: "Success",
		        description: `${urls.length} website${urls.length > 1 ? 's' : ''} added and sent for processing`
		      });
		
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error adding multiple websites:', error);
		      toast({
		        title: "Error",
		        description: "Failed to add websites",
		        variant: "destructive"
		      });
		    } finally {
		      setIsLocallyProcessing(false);
		    }
		  };
		
		  // Use local processing state instead of global processing states
		  const isProcessingFiles = isLocallyProcessing;
		
		  return (
		    <>
		      <Dialog open={open} onOpenChange={onOpenChange}>
		        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
		          <DialogHeader className="pb-4">
		            <div className="flex items-center justify-between">
		              <div className="flex items-center space-x-2">
		                <div className="w-6 h-6 bg-black rounded flex items-center justify-center">
		                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#FFFFFF">
		                    <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
		                  </svg>
		                </div>
		                <DialogTitle className="text-xl font-medium">InsightsLM</DialogTitle>
		              </div>
		            </div>
		          </DialogHeader>
		
		          <div className="space-y-6">
		            <div>
		              <h2 className="text-xl font-medium mb-2">Add sources</h2>
		              <p className="text-gray-600 text-sm mb-1">Sources let InsightsLM base its responses on the information that matters most to you.</p>
		              <p className="text-gray-500 text-xs">
		                (Examples: marketing plans, course reading, research notes, meeting transcripts, sales documents, etc.)
		              </p>
		            </div>
		
		            {/* File Upload Area */}
		            <div 
		              className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${
		                dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
		              } ${isProcessingFiles ? 'opacity-50 pointer-events-none' : ''}`}
		              onDragEnter={handleDrag}
		              onDragLeave={handleDrag}
		              onDragOver={handleDrag}
		              onDrop={handleDrop}
		            >
		              <div className="flex flex-col items-center space-y-4">
		                <div className="w-12 h-12 rounded-full flex items-center justify-center bg-slate-100">
		                  <Upload className="h-6 w-6 text-slate-600" />
		                </div>
		                <div>
		                  <h3 className="font-medium text-gray-900 mb-2">
		                    {isProcessingFiles ? 'Processing files...' : 'Upload sources'}
		                  </h3>
		                  <p className="text-gray-600 text-sm">
		                    {isProcessingFiles ? (
		                      'Please wait while we process your files'
		                    ) : (
		                      <>
		                        Drag & drop or{' '}
		                        <button 
		                          className="text-blue-600 hover:underline" 
		                          onClick={() => document.getElementById('file-upload')?.click()}
		                          disabled={isProcessingFiles}
		                        >
		                          choose file
		                        </button>{' '}
		                        to upload
		                      </>
		                    )}
		                  </p>
		                </div>
		                <p className="text-xs text-gray-500">
		                  Supported file types: PDF, txt, Markdown, Audio (e.g. mp3)
		                </p>
		                <input
		                  id="file-upload"
		                  type="file"
		                  multiple
		                  className="hidden"
		                  accept=".pdf,.txt,.md,.mp3,.wav,.m4a"
		                  onChange={handleFileSelect}
		                  disabled={isProcessingFiles}
		                />
		              </div>
		            </div>
		
		            {/* Integration Options */}
		            <div className="grid grid-cols-2 gap-4">
		              <Button
		                variant="outline"
		                className="h-auto p-4 flex flex-col items-center space-y-2"
		                onClick={() => setShowMultipleWebsiteDialog(true)}
		                disabled={isProcessingFiles}
		              >
		                <Link className="h-6 w-6 text-green-600" />
		                <span className="font-medium">Link - Website</span>
		                <span className="text-sm text-gray-500">Multiple URLs at once</span>
		              </Button>
		
		              <Button
		                variant="outline"
		                className="h-auto p-4 flex flex-col items-center space-y-2"
		                onClick={() => setShowCopiedTextDialog(true)}
		                disabled={isProcessingFiles}
		              >
		                <Copy className="h-6 w-6 text-purple-600" />
		                <span className="font-medium">Paste Text - Copied Text</span>
		                <span className="text-sm text-gray-500">Add copied content</span>
		              </Button>
		            </div>
		          </div>
		        </DialogContent>
		      </Dialog>
		
		      {/* Sub-dialogs */}
		      <CopiedTextDialog 
		        open={showCopiedTextDialog} 
		        onOpenChange={setShowCopiedTextDialog} 
		        onSubmit={handleTextSubmit} 
		      />
		
		      <MultipleWebsiteUrlsDialog 
		        open={showMultipleWebsiteDialog} 
		        onOpenChange={setShowMultipleWebsiteDialog} 
		        onSubmit={handleMultipleWebsiteSubmit} 
		      />
		    </>
		  );
		};
		
		export default AddSourcesDialog;]]></file>
	<file path='src\components\notebook\AudioPlayer.tsx'><![CDATA[
		import React, { useState, useRef, useEffect } from 'react';
		import { Button } from '@/components/ui/button';
		import { Card } from '@/components/ui/card';
		import { Slider } from '@/components/ui/slider';
		import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
		import { Play, Pause, RotateCcw, Volume2, Download, MoreVertical, Trash2, Loader2, RefreshCw, AlertTriangle } from 'lucide-react';
		import { useToast } from '@/hooks/use-toast';
		
		interface AudioPlayerProps {
		  audioUrl: string;
		  title?: string;
		  notebookId?: string;
		  expiresAt?: string | null;
		  onError?: () => void;
		  onDeleted?: () => void;
		  onRetry?: () => void;
		  onUrlRefresh?: (notebookId: string) => void;
		}
		
		const AudioPlayer = ({ 
		  audioUrl, 
		  title = "Deep Dive Conversation", 
		  notebookId,
		  expiresAt,
		  onError,
		  onDeleted,
		  onRetry,
		  onUrlRefresh
		}: AudioPlayerProps) => {
		  const [isPlaying, setIsPlaying] = useState(false);
		  const [currentTime, setCurrentTime] = useState(0);
		  const [duration, setDuration] = useState(0);
		  const [volume, setVolume] = useState(1);
		  const [loading, setLoading] = useState(true);
		  const [isDeleting, setIsDeleting] = useState(false);
		  const [isDownloading, setIsDownloading] = useState(false);
		  const [audioError, setAudioError] = useState<string | null>(null);
		  const [retryCount, setRetryCount] = useState(0);
		  const [autoRetryInProgress, setAutoRetryInProgress] = useState(false);
		  const audioRef = useRef<HTMLAudioElement>(null);
		  const { toast } = useToast();
		
		  // Check if audio is expired
		  const isExpired = expiresAt ? new Date(expiresAt) <= new Date() : false;
		
		  useEffect(() => {
		    const audio = audioRef.current;
		    if (!audio) return;
		
		    const updateTime = () => setCurrentTime(audio.currentTime);
		    const updateDuration = () => {
		      setDuration(audio.duration);
		      setLoading(false);
		      setAudioError(null);
		      setRetryCount(0);
		    };
		    const handleEnded = () => setIsPlaying(false);
		    const handleError = async (e: Event) => {
		      console.error('Audio error:', e);
		      setLoading(false);
		      setIsPlaying(false);
		      
		      // If the URL has expired and we have a notebookId, try to refresh it automatically
		      if ((isExpired || audioError?.includes('403') || audioError?.includes('expired')) && 
		          notebookId && onUrlRefresh && retryCount < 2 && !autoRetryInProgress) {
		        console.log('Audio URL expired or access denied, attempting automatic refresh...');
		        setAutoRetryInProgress(true);
		        setRetryCount(prev => prev + 1);
		        onUrlRefresh(notebookId);
		        return;
		      }
		
		      if (retryCount < 2 && !autoRetryInProgress) {
		        // Auto-retry up to 2 times for transient errors
		        setTimeout(() => {
		          setRetryCount(prev => prev + 1);
		          audio.load();
		        }, 1000 * (retryCount + 1)); // Exponential backoff
		      } else {
		        setAudioError('Failed to load audio');
		        setAutoRetryInProgress(false);
		        onError?.();
		      }
		    };
		
		    const handleCanPlay = () => {
		      setLoading(false);
		      setAudioError(null);
		      setRetryCount(0);
		      setAutoRetryInProgress(false);
		    };
		
		    const handleLoadStart = () => {
		      if (autoRetryInProgress) {
		        setLoading(true);
		      }
		    };
		
		    audio.addEventListener('timeupdate', updateTime);
		    audio.addEventListener('loadedmetadata', updateDuration);
		    audio.addEventListener('canplay', handleCanPlay);
		    audio.addEventListener('loadstart', handleLoadStart);
		    audio.addEventListener('ended', handleEnded);
		    audio.addEventListener('error', handleError);
		
		    return () => {
		      audio.removeEventListener('timeupdate', updateTime);
		      audio.removeEventListener('loadedmetadata', updateDuration);
		      audio.removeEventListener('canplay', handleCanPlay);
		      audio.removeEventListener('loadstart', handleLoadStart);
		      audio.removeEventListener('ended', handleEnded);
		      audio.removeEventListener('error', handleError);
		    };
		  }, [onError, isExpired, retryCount, notebookId, onUrlRefresh, audioError, autoRetryInProgress]);
		
		  // Reload audio when URL changes (for automatic refresh)
		  useEffect(() => {
		    const audio = audioRef.current;
		    if (audio && autoRetryInProgress) {
		      console.log('Reloading audio with new URL...');
		      audio.load();
		    }
		  }, [audioUrl, autoRetryInProgress]);
		
		  const togglePlayPause = () => {
		    const audio = audioRef.current;
		    if (!audio || audioError) return;
		
		    if (isPlaying) {
		      audio.pause();
		    } else {
		      const playPromise = audio.play();
		      if (playPromise !== undefined) {
		        playPromise.catch(error => {
		          console.error('Play failed:', error);
		          setAudioError('Playback failed');
		        });
		      }
		    }
		    setIsPlaying(!isPlaying);
		  };
		
		  const handleSeek = (value: number[]) => {
		    const audio = audioRef.current;
		    if (!audio || audioError) return;
		
		    const time = value[0];
		    audio.currentTime = time;
		    setCurrentTime(time);
		  };
		
		  const handleVolumeChange = (value: number[]) => {
		    const audio = audioRef.current;
		    if (!audio) return;
		
		    const vol = value[0];
		    audio.volume = vol;
		    setVolume(vol);
		  };
		
		  const restart = () => {
		    const audio = audioRef.current;
		    if (!audio || audioError) return;
		
		    audio.currentTime = 0;
		    setCurrentTime(0);
		  };
		
		  const retryLoad = () => {
		    const audio = audioRef.current;
		    if (!audio) return;
		
		    setLoading(true);
		    setAudioError(null);
		    setRetryCount(0);
		    setAutoRetryInProgress(false);
		    audio.load();
		  };
		
		  const formatTime = (time: number) => {
		    const minutes = Math.floor(time / 60);
		    const seconds = Math.floor(time % 60);
		    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
		  };
		
		  const downloadAudio = async () => {
		    setIsDownloading(true);
		    
		    try {
		      // Fetch the audio file
		      const response = await fetch(audioUrl);
		      if (!response.ok) {
		        throw new Error('Failed to fetch audio file');
		      }
		      
		      // Create a blob from the response
		      const blob = await response.blob();
		      
		      // Create a temporary URL for the blob
		      const blobUrl = URL.createObjectURL(blob);
		      
		      // Create a temporary anchor element and trigger download
		      const link = document.createElement('a');
		      link.href = blobUrl;
		      link.download = `${title}.mp3`;
		      document.body.appendChild(link);
		      link.click();
		      
		      // Clean up
		      document.body.removeChild(link);
		      URL.revokeObjectURL(blobUrl);
		      
		      toast({
		        title: "Download Started",
		        description: "Your audio file is being downloaded.",
		      });
		    } catch (error) {
		      console.error('Download failed:', error);
		      toast({
		        title: "Download Failed",
		        description: "Failed to download the audio file. Please try again.",
		        variant: "destructive",
		      });
		    } finally {
		      setIsDownloading(false);
		    }
		  };
		
		  const deleteAudio = async () => {
		    if (!notebookId) {
		      toast({
		        title: "Error",
		        description: "Cannot delete audio - notebook ID not found",
		        variant: "destructive",
		      });
		      return;
		    }
		
		    setIsDeleting(true);
		    
		    try {
		      const { supabase } = await import('@/integrations/supabase/client');
		      
		      // First, try to remove all files in the notebook folder from storage
		      try {
		        console.log('Attempting to list files in folder:', notebookId);
		        
		        // List all files in the notebook folder
		        const { data: files, error: listError } = await supabase.storage
		          .from('audio')
		          .list(notebookId);
		
		        if (listError) {
		          console.error('Error listing files:', listError);
		        } else if (files && files.length > 0) {
		          // Delete all files in the folder
		          const filePaths = files.map(file => `${notebookId}/${file.name}`);
		          console.log('Deleting files:', filePaths);
		          
		          const { error: deleteError } = await supabase.storage
		            .from('audio')
		            .remove(filePaths);
		
		          if (deleteError) {
		            console.error('Error deleting files from storage:', deleteError);
		          } else {
		            console.log('Successfully deleted files from storage');
		          }
		        }
		      } catch (storageError) {
		        console.error('Storage operation failed:', storageError);
		        // Continue with database update even if storage deletion fails
		      }
		
		      // Update the notebook to clear audio overview fields
		      const { error } = await supabase
		        .from('notebooks')
		        .update({
		          audio_overview_url: null,
		          audio_url_expires_at: null,
		          audio_overview_generation_status: null
		        })
		        .eq('id', notebookId);
		
		      if (error) {
		        console.error('Error updating notebook:', error);
		        throw error;
		      }
		
		      toast({
		        title: "Audio Deleted",
		        description: "The audio overview and associated files have been successfully deleted.",
		      });
		
		      // Call the onDeleted callback to update parent component
		      onDeleted?.();
		
		    } catch (error) {
		      console.error('Failed to delete audio:', error);
		      toast({
		        title: "Delete Failed",
		        description: "Failed to delete the audio overview. Please try again.",
		        variant: "destructive",
		      });
		    } finally {
		      setIsDeleting(false);
		    }
		  };
		
		  return (
		    <Card className="p-4 space-y-4">
		      <audio ref={audioRef} src={audioUrl} preload="metadata" />
		      
		      <div className="flex items-center justify-between">
		        <div className="flex-1">
		          <h4 className="font-medium text-gray-900">{title}</h4>
		        </div>
		        <DropdownMenu>
		          <DropdownMenuTrigger asChild>
		            <Button variant="ghost" size="sm" disabled={isDeleting}>
		              {isDeleting ? (
		                <Loader2 className="h-4 w-4 animate-spin" />
		              ) : (
		                <MoreVertical className="h-4 w-4" />
		              )}
		            </Button>
		          </DropdownMenuTrigger>
		          <DropdownMenuContent align="end">
		            <DropdownMenuItem onClick={downloadAudio} disabled={isDownloading}>
		              {isDownloading ? (
		                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
		              ) : (
		                <Download className="h-4 w-4 mr-2" />
		              )}
		              {isDownloading ? 'Downloading...' : 'Download'}
		            </DropdownMenuItem>
		            <DropdownMenuItem 
		              onClick={deleteAudio}
		              className="text-red-600 focus:text-red-600"
		              disabled={isDeleting}
		            >
		              <Trash2 className="h-4 w-4 mr-2" />
		              Delete
		            </DropdownMenuItem>
		          </DropdownMenuContent>
		        </DropdownMenu>
		      </div>
		
		      {/* Auto-refresh indicator */}
		      {autoRetryInProgress && (
		        <div className="flex items-center justify-between p-3 bg-blue-50 rounded-md border border-blue-200">
		          <div className="flex items-center space-x-2">
		            <Loader2 className="h-4 w-4 text-blue-600 animate-spin" />
		            <span className="text-sm text-blue-600">Refreshing audio access...</span>
		          </div>
		        </div>
		      )}
		
		      {/* Error State */}
		      {audioError && !autoRetryInProgress && (
		        <div className="flex items-center justify-between p-3 bg-red-50 rounded-md border border-red-200">
		          <div className="flex items-center space-x-2">
		            <AlertTriangle className="h-4 w-4 text-red-600" />
		            <span className="text-sm text-red-600">{audioError}</span>
		          </div>
		          <Button
		            variant="outline"
		            size="sm"
		            onClick={onRetry || retryLoad}
		            className="text-red-600 border-red-300 hover:bg-red-50"
		          >
		            <RefreshCw className="h-4 w-4 mr-1" />
		            Retry
		          </Button>
		        </div>
		      )}
		
		      {/* Progress Bar */}
		      <div className="space-y-2">
		        <Slider
		          value={[currentTime]}
		          max={duration || 100}
		          step={1}
		          onValueChange={handleSeek}
		          className="w-full"
		          disabled={loading || !!audioError}
		        />
		        <div className="flex justify-between text-xs text-gray-500">
		          <span>{formatTime(currentTime)}</span>
		          <span>{formatTime(duration)}</span>
		        </div>
		      </div>
		
		      {/* Controls */}
		      <div className="flex items-center justify-between">
		        <div className="flex items-center space-x-2">
		          <Button
		            variant="ghost"
		            size="sm"
		            onClick={restart}
		            disabled={loading || !!audioError}
		          >
		            <RotateCcw className="h-4 w-4" />
		          </Button>
		          
		          <Button
		            variant="default"
		            size="sm"
		            onClick={togglePlayPause}
		            disabled={loading || !!audioError}
		            className="w-12"
		          >
		            {loading ? (
		              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
		            ) : isPlaying ? (
		              <Pause className="h-4 w-4" />
		            ) : (
		              <Play className="h-4 w-4" />
		            )}
		          </Button>
		        </div>
		
		        {/* Volume Control */}
		        <div className="flex items-center space-x-2 w-24">
		          <Volume2 className="h-4 w-4 text-gray-500" />
		          <Slider
		            value={[volume]}
		            max={1}
		            step={0.1}
		            onValueChange={handleVolumeChange}
		            className="flex-1"
		          />
		        </div>
		      </div>
		    </Card>
		  );
		};
		
		export default AudioPlayer;]]></file>
	<file path='src\components\notebook\ChatArea.tsx'><![CDATA[
		import React, { useState, useEffect, useRef } from 'react';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Send, Upload, FileText, Loader2, RefreshCw } from 'lucide-react';
		import { Card } from '@/components/ui/card';
		import { ScrollArea } from '@/components/ui/scroll-area';
		import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';
		import { useChatMessages } from '@/hooks/useChatMessages';
		import { useSources } from '@/hooks/useSources';
		import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
		import SaveToNoteButton from './SaveToNoteButton';
		import AddSourcesDialog from './AddSourcesDialog';
		import { Citation } from '@/types/message';
		
		interface ChatAreaProps {
		  hasSource: boolean;
		  notebookId?: string;
		  notebook?: {
		    id: string;
		    title: string;
		    description?: string;
		    generation_status?: string;
		    icon?: string;
		    example_questions?: string[];
		  } | null;
		  onCitationClick?: (citation: Citation) => void;
		}
		
		const ChatArea = ({
		  hasSource,
		  notebookId,
		  notebook,
		  onCitationClick
		}: ChatAreaProps) => {
		  const [message, setMessage] = useState('');
		  const [pendingUserMessage, setPendingUserMessage] = useState<string | null>(null);
		  const [showAiLoading, setShowAiLoading] = useState(false);
		  const [clickedQuestions, setClickedQuestions] = useState<Set<string>>(new Set());
		  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
		  
		  const isGenerating = notebook?.generation_status === 'generating';
		  
		  const {
		    messages,
		    sendMessage,
		    isSending,
		    deleteChatHistory,
		    isDeletingChatHistory
		  } = useChatMessages(notebookId);
		  
		  const {
		    sources
		  } = useSources(notebookId);
		  
		  const sourceCount = sources?.length || 0;
		
		  // Check if at least one source has been successfully processed
		  const hasProcessedSource = sources?.some(source => source.processing_status === 'completed') || false;
		
		  // Chat should be disabled if there are no processed sources
		  const isChatDisabled = !hasProcessedSource;
		
		  // Track when we send a message to show loading state
		  const [lastMessageCount, setLastMessageCount] = useState(0);
		
		  // Ref for auto-scrolling to the most recent message
		  const latestMessageRef = useRef<HTMLDivElement>(null);
		  const scrollAreaRef = useRef<HTMLDivElement>(null);
		  useEffect(() => {
		    // If we have new messages and we have a pending message, clear it
		    if (messages.length > lastMessageCount && pendingUserMessage) {
		      setPendingUserMessage(null);
		      setShowAiLoading(false);
		    }
		    setLastMessageCount(messages.length);
		  }, [messages.length, lastMessageCount, pendingUserMessage]);
		
		  // Auto-scroll when pending message is set, when messages update, or when AI loading appears
		  useEffect(() => {
		    if (latestMessageRef.current && scrollAreaRef.current) {
		      // Find the viewport within the ScrollArea
		      const viewport = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
		      if (viewport) {
		        // Use a small delay to ensure the DOM has updated
		        setTimeout(() => {
		          latestMessageRef.current?.scrollIntoView({
		            behavior: 'smooth',
		            block: 'start'
		          });
		        }, 50);
		      }
		    }
		  }, [pendingUserMessage, messages.length, showAiLoading]);
		  const handleSendMessage = async (messageText?: string) => {
		    const textToSend = messageText || message.trim();
		    if (textToSend && notebookId) {
		      try {
		        // Store the pending message to display immediately
		        setPendingUserMessage(textToSend);
		        await sendMessage({
		          notebookId: notebookId,
		          role: 'user',
		          content: textToSend
		        });
		        setMessage('');
		
		        // Show AI loading after user message is sent
		        setShowAiLoading(true);
		      } catch (error) {
		        console.error('Failed to send message:', error);
		        // Clear pending message on error
		        setPendingUserMessage(null);
		        setShowAiLoading(false);
		      }
		    }
		  };
		  const handleRefreshChat = () => {
		    if (notebookId) {
		      console.log('Refresh button clicked for notebook:', notebookId);
		      deleteChatHistory(notebookId);
		      // Reset clicked questions when chat is refreshed
		      setClickedQuestions(new Set());
		    }
		  };
		  const handleCitationClick = (citation: Citation) => {
		    onCitationClick?.(citation);
		  };
		  const handleExampleQuestionClick = (question: string) => {
		    // Add question to clicked set to remove it from display
		    setClickedQuestions(prev => new Set(prev).add(question));
		    setMessage(question);
		    handleSendMessage(question);
		  };
		
		  // Helper function to determine if message is from user
		  const isUserMessage = (msg: any) => {
		    const messageType = msg.message?.type || msg.message?.role;
		    return messageType === 'human' || messageType === 'user';
		  };
		
		  // Helper function to determine if message is from AI
		  const isAiMessage = (msg: any) => {
		    const messageType = msg.message?.type || msg.message?.role;
		    return messageType === 'ai' || messageType === 'assistant';
		  };
		
		  // Get the index of the last message for auto-scrolling
		  const shouldShowScrollTarget = () => {
		    return messages.length > 0 || pendingUserMessage || showAiLoading;
		  };
		
		  // Show refresh button if there are any messages (including system messages)
		  const shouldShowRefreshButton = messages.length > 0;
		
		  // Get example questions from the notebook, filtering out clicked ones
		  const exampleQuestions = notebook?.example_questions?.filter(q => !clickedQuestions.has(q)) || [];
		
		  // Update placeholder text based on processing status
		  const getPlaceholderText = () => {
		    if (isChatDisabled) {
		      if (sourceCount === 0) {
		        return "Upload a source to get started...";
		      } else {
		        return "Please wait while your sources are being processed...";
		      }
		    }
		    return "Start typing...";
		  };
		  return <div className="flex-1 flex flex-col h-full overflow-hidden">
		      {hasSource ? <div className="flex-1 flex flex-col h-full overflow-hidden">
		          {/* Chat Header */}
		          <div className="p-4 border-b border-gray-200 flex-shrink-0">
		            <div className="max-w-4xl mx-auto flex items-center justify-between">
		              <h2 className="text-lg font-medium text-gray-900">Chat</h2>
		              {shouldShowRefreshButton && <Button variant="ghost" size="sm" onClick={handleRefreshChat} disabled={isDeletingChatHistory || isChatDisabled} className="flex items-center space-x-2">
		                  <RefreshCw className={`h-4 w-4 ${isDeletingChatHistory ? 'animate-spin' : ''}`} />
		                  <span>{isDeletingChatHistory ? 'Clearing...' : 'Clear Chat'}</span>
		                </Button>}
		            </div>
		          </div>
		
		          <ScrollArea className="flex-1 h-full" ref={scrollAreaRef}>
		            {/* Document Summary */}
		            <div className="p-8 border-b border-gray-200">
		              <div className="max-w-4xl mx-auto">
		                <div className="flex items-center space-x-4 mb-6">
		                  <div className="w-10 h-10 flex items-center justify-center bg-transparent">
		                    {isGenerating ? <Loader2 className="text-black font-normal w-10 h-10 animate-spin" /> : <span className="text-[40px] leading-none">{notebook?.icon || '☕'}</span>}
		                  </div>
		                  <div>
		                    <h1 className="text-2xl font-medium text-gray-900">
		                      {isGenerating ? 'Generating content...' : notebook?.title || 'Untitled Notebook'}
		                    </h1>
		                    <p className="text-sm text-gray-600">{sourceCount} source{sourceCount !== 1 ? 's' : ''}</p>
		                  </div>
		                </div>
		                
		                <div className="bg-gray-50 rounded-lg p-6 mb-6">
		                  {isGenerating ? <div className="flex items-center space-x-2 text-gray-600">
		                      
		                      <p>AI is analyzing your source and generating a title and description...</p>
		                    </div> : <MarkdownRenderer content={notebook?.description || 'No description available for this notebook.'} className="prose prose-gray max-w-none text-gray-700 leading-relaxed" />}
		                </div>
		
		                {/* Chat Messages */}
		                {(messages.length > 0 || pendingUserMessage || showAiLoading) && <div className="mb-6 space-y-4">
		                    {messages.map((msg, index) => <div key={msg.id} className={`flex ${isUserMessage(msg) ? 'justify-end' : 'justify-start'}`}>
		                        <div className={`${isUserMessage(msg) ? 'max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg' : 'w-full'}`}>
		                          <div className={isUserMessage(msg) ? '' : 'prose prose-gray max-w-none text-gray-800'}>
		                            <MarkdownRenderer content={msg.message.content} className={isUserMessage(msg) ? '' : ''} onCitationClick={handleCitationClick} isUserMessage={isUserMessage(msg)} />
		                          </div>
		                          {isAiMessage(msg) && <div className="mt-2 flex justify-start">
		                              <SaveToNoteButton content={msg.message.content} notebookId={notebookId} />
		                            </div>}
		                        </div>
		                      </div>)}
		                    
		                    {/* Pending user message */}
		                    {pendingUserMessage && <div className="flex justify-end">
		                        <div className="max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg">
		                          <MarkdownRenderer content={pendingUserMessage} className="" isUserMessage={true} />
		                        </div>
		                      </div>}
		                    
		                    {/* AI Loading Indicator */}
		                    {showAiLoading && <div className="flex justify-start" ref={latestMessageRef}>
		                        <div className="flex items-center space-x-2 px-4 py-3 bg-gray-100 rounded-lg">
		                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
		                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
		                    animationDelay: '0.1s'
		                  }}></div>
		                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
		                    animationDelay: '0.2s'
		                  }}></div>
		                        </div>
		                      </div>}
		                    
		                    {/* Scroll target for when no AI loading is shown */}
		                    {!showAiLoading && shouldShowScrollTarget() && <div ref={latestMessageRef} />}
		                  </div>}
		              </div>
		            </div>
		          </ScrollArea>
		
		          {/* Chat Input - Fixed at bottom */}
		          <div className="p-6 border-t border-gray-200 flex-shrink-0">
		            <div className="max-w-4xl mx-auto">
		              <div className="flex space-x-4">
		                <div className="flex-1 relative">
		                  <Input placeholder={getPlaceholderText()} value={message} onChange={e => setMessage(e.target.value)} onKeyDown={e => e.key === 'Enter' && !isChatDisabled && !isSending && !pendingUserMessage && handleSendMessage()} className="pr-12" disabled={isChatDisabled || isSending || !!pendingUserMessage} />
		                  <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-gray-500">
		                    {sourceCount} source{sourceCount !== 1 ? 's' : ''}
		                  </div>
		                </div>
		                <Button onClick={() => handleSendMessage()} disabled={!message.trim() || isChatDisabled || isSending || !!pendingUserMessage}>
		                  {isSending || pendingUserMessage ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
		                </Button>
		              </div>
		              
		              {/* Example Questions Carousel */}
		              {!isChatDisabled && !pendingUserMessage && !showAiLoading && exampleQuestions.length > 0 && <div className="mt-4">
		                  <Carousel className="w-full max-w-4xl">
		                    <CarouselContent className="-ml-2 md:-ml-4">
		                      {exampleQuestions.map((question, index) => <CarouselItem key={index} className="pl-2 md:pl-4 basis-auto">
		                          <Button variant="outline" size="sm" className="text-left whitespace-nowrap h-auto py-2 px-3 text-sm" onClick={() => handleExampleQuestionClick(question)}>
		                            {question}
		                          </Button>
		                        </CarouselItem>)}
		                    </CarouselContent>
		                    {exampleQuestions.length > 2 && <>
		                        <CarouselPrevious className="left-0" />
		                        <CarouselNext className="right-0" />
		                      </>}
		                  </Carousel>
		                </div>}
		            </div>
		          </div>
		        </div> :
		    // Empty State
		    <div className="flex-1 flex flex-col items-center justify-center p-8 overflow-hidden">
		          <div className="text-center mb-8">
		            <div className="w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center bg-gray-100">
		              <Upload className="h-8 w-8 text-slate-600" />
		            </div>
		            <h2 className="text-xl font-medium text-gray-900 mb-4">Add a source to get started</h2>
		            <Button onClick={() => setShowAddSourcesDialog(true)}>
		              <Upload className="h-4 w-4 mr-2" />
		              Upload a source
		            </Button>
		          </div>
		
		          {/* Bottom Input */}
		          <div className="w-full max-w-2xl">
		            <div className="flex space-x-4">
		              <Input placeholder="Upload a source to get started" disabled className="flex-1" />
		              <div className="flex items-center text-sm text-gray-500">
		                0 sources
		              </div>
		              <Button disabled>
		                <Send className="h-4 w-4" />
		              </Button>
		            </div>
		          </div>
		        </div>}
		      
		      {/* Footer */}
		      <div className="p-4 border-t border-gray-200 flex-shrink-0">
		        <p className="text-center text-sm text-gray-500">InsightsLM can be inaccurate; please double-check its responses.</p>
		      </div>
		      
		      {/* Add Sources Dialog */}
		      <AddSourcesDialog open={showAddSourcesDialog} onOpenChange={setShowAddSourcesDialog} notebookId={notebookId} />
		    </div>;
		};
		
		export default ChatArea;]]></file>
	<file path='src\components\notebook\CopiedTextDialog.tsx'><![CDATA[
		
		import React, { useState, useEffect } from 'react';
		import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Textarea } from '@/components/ui/textarea';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { Copy, ClipboardPaste } from 'lucide-react';
		
		interface CopiedTextDialogProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  onSubmit: (title: string, content: string) => void;
		}
		
		const CopiedTextDialog = ({
		  open,
		  onOpenChange,
		  onSubmit
		}: CopiedTextDialogProps) => {
		  const [title, setTitle] = useState('');
		  const [content, setContent] = useState('');
		  const [isSubmitting, setIsSubmitting] = useState(false);
		
		  // Auto-populate with clipboard content when dialog opens
		  useEffect(() => {
		    if (open) {
		      navigator.clipboard.readText()
		        .then(text => {
		          if (text && text.trim()) {
		            setContent(text);
		            // Generate a default title based on content length
		            const words = text.trim().split(' ').slice(0, 8).join(' ');
		            setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
		          }
		        })
		        .catch(err => {
		          console.log('Could not read clipboard:', err);
		        });
		    }
		  }, [open]);
		
		  const handleSubmit = async () => {
		    if (!title.trim() || !content.trim()) {
		      return;
		    }
		
		    setIsSubmitting(true);
		    try {
		      await onSubmit(title.trim(), content.trim());
		      setTitle('');
		      setContent('');
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error submitting copied text:', error);
		    } finally {
		      setIsSubmitting(false);
		    }
		  };
		
		  const handleClose = () => {
		    setTitle('');
		    setContent('');
		    onOpenChange(false);
		  };
		
		  const handlePasteFromClipboard = async () => {
		    try {
		      const text = await navigator.clipboard.readText();
		      if (text) {
		        setContent(text);
		        if (!title.trim()) {
		          const words = text.trim().split(' ').slice(0, 8).join(' ');
		          setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
		        }
		      }
		    } catch (err) {
		      console.error('Could not read clipboard:', err);
		    }
		  };
		
		  const isValid = title.trim() !== '' && content.trim() !== '';
		  const characterCount = content.length;
		
		  return (
		    <Dialog open={open} onOpenChange={handleClose}>
		      <DialogContent className="max-w-2xl">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <Copy className="h-5 w-5 text-purple-600" />
		            <span>Add Copied Text</span>
		          </DialogTitle>
		        </DialogHeader>
		
		        <div className="space-y-4">
		          <div>
		            <p className="text-sm text-gray-600 mb-4">
		              This dialog automatically reads from your clipboard. You can also manually paste content below.
		            </p>
		          </div>
		
		          <div className="space-y-2">
		            <Label htmlFor="title" className="text-sm font-medium">
		              Title
		            </Label>
		            <Input
		              id="title"
		              placeholder="Enter a title for this content..."
		              value={title}
		              onChange={(e) => setTitle(e.target.value)}
		            />
		          </div>
		
		          <div className="space-y-2">
		            <div className="flex items-center justify-between">
		              <Label htmlFor="content" className="text-sm font-medium">
		                Content
		              </Label>
		              <Button
		                variant="outline"
		                size="sm"
		                onClick={handlePasteFromClipboard}
		                className="flex items-center space-x-1"
		              >
		                <ClipboardPaste className="h-4 w-4" />
		                <span>Paste from Clipboard</span>
		              </Button>
		            </div>
		            <Textarea
		              id="content"
		              placeholder="Your copied content will appear here..."
		              value={content}
		              onChange={(e) => setContent(e.target.value)}
		              className="min-h-[200px] resize-y"
		            />
		            <div className="flex justify-between text-xs text-gray-500">
		              <span>{characterCount} characters</span>
		              {characterCount > 10000 && (
		                <span className="text-amber-600">Large content may take longer to process</span>
		              )}
		            </div>
		          </div>
		
		          <div className="flex justify-end space-x-2 pt-4">
		            <Button variant="outline" onClick={handleClose}>
		              Cancel
		            </Button>
		            <Button 
		              onClick={handleSubmit} 
		              disabled={!isValid || isSubmitting}
		            >
		              {isSubmitting ? 'Adding...' : 'Add Copied Text'}
		            </Button>
		          </div>
		        </div>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default CopiedTextDialog;]]></file>
	<file path='src\components\notebook\MobileNotebookTabs.tsx'><![CDATA[
		
		import React from 'react';
		import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
		import { FileText, MessageCircle, NotebookPen } from 'lucide-react';
		import SourcesSidebar from './SourcesSidebar';
		import ChatArea from './ChatArea';
		import StudioSidebar from './StudioSidebar';
		import { Citation } from '@/types/message';
		
		interface MobileNotebookTabsProps {
		  hasSource: boolean;
		  notebookId?: string;
		  notebook?: {
		    id: string;
		    title: string;
		    description?: string;
		    generation_status?: string;
		    icon?: string;
		    example_questions?: string[];
		  } | null;
		  selectedCitation?: Citation | null;
		  onCitationClose?: () => void;
		  setSelectedCitation?: (citation: Citation | null) => void;
		  onCitationClick?: (citation: Citation) => void;
		}
		
		const MobileNotebookTabs = ({
		  hasSource,
		  notebookId,
		  notebook,
		  selectedCitation,
		  onCitationClose,
		  setSelectedCitation,
		  onCitationClick
		}: MobileNotebookTabsProps) => {
		  return (
		    <Tabs defaultValue="chat" className="flex-1 flex flex-col overflow-hidden">
		      <TabsList className="grid w-full grid-cols-3 bg-gray-100 p-1 h-12 rounded-none border-b border-gray-200">
		        <TabsTrigger 
		          value="sources" 
		          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
		        >
		          <FileText className="h-4 w-4" />
		          <span className="hidden sm:inline">Sources</span>
		        </TabsTrigger>
		        <TabsTrigger 
		          value="chat" 
		          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
		        >
		          <MessageCircle className="h-4 w-4" />
		          <span className="hidden sm:inline">Chat</span>
		        </TabsTrigger>
		        <TabsTrigger 
		          value="studio" 
		          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
		        >
		          <NotebookPen className="h-4 w-4" />
		          <span className="hidden sm:inline">Notes</span>
		        </TabsTrigger>
		      </TabsList>
		
		      <TabsContent value="sources" className="flex-1 overflow-hidden mt-0">
		        <SourcesSidebar 
		          hasSource={hasSource}
		          notebookId={notebookId}
		          selectedCitation={selectedCitation}
		          onCitationClose={onCitationClose}
		          setSelectedCitation={setSelectedCitation}
		        />
		      </TabsContent>
		
		      <TabsContent value="chat" className="flex-1 overflow-hidden mt-0">
		        <ChatArea 
		          hasSource={hasSource}
		          notebookId={notebookId}
		          notebook={notebook}
		          onCitationClick={onCitationClick}
		        />
		      </TabsContent>
		
		      <TabsContent value="studio" className="flex-1 overflow-hidden mt-0">
		        <StudioSidebar 
		          notebookId={notebookId}
		          onCitationClick={onCitationClick}
		        />
		      </TabsContent>
		    </Tabs>
		  );
		};
		
		export default MobileNotebookTabs;]]></file>
	<file path='src\components\notebook\MultipleWebsiteUrlsDialog.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Textarea } from '@/components/ui/textarea';
		import { Label } from '@/components/ui/label';
		import { Link } from 'lucide-react';
		
		interface MultipleWebsiteUrlsDialogProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  onSubmit: (urls: string[]) => void;
		}
		
		const MultipleWebsiteUrlsDialog = ({
		  open,
		  onOpenChange,
		  onSubmit
		}: MultipleWebsiteUrlsDialogProps) => {
		  const [urlsText, setUrlsText] = useState('');
		  const [isSubmitting, setIsSubmitting] = useState(false);
		
		  const handleSubmit = async () => {
		    // Parse URLs from textarea - split by newlines and filter out empty lines
		    const urls = urlsText
		      .split('\n')
		      .map(url => url.trim())
		      .filter(url => url !== '');
		    
		    if (urls.length === 0) {
		      return;
		    }
		
		    setIsSubmitting(true);
		    try {
		      await onSubmit(urls);
		      setUrlsText('');
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error submitting URLs:', error);
		    } finally {
		      setIsSubmitting(false);
		    }
		  };
		
		  const handleClose = () => {
		    setUrlsText('');
		    onOpenChange(false);
		  };
		
		  // Count valid URLs for display
		  const validUrls = urlsText
		    .split('\n')
		    .map(url => url.trim())
		    .filter(url => url !== '');
		  
		  const isValid = validUrls.length > 0;
		
		  return (
		    <Dialog open={open} onOpenChange={handleClose}>
		      <DialogContent className="max-w-2xl">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <Link className="h-5 w-5 text-green-600" />
		            <span>Add Multiple Website URLs</span>
		          </DialogTitle>
		        </DialogHeader>
		
		        <div className="space-y-4">
		          <div>
		            <Label className="text-sm font-medium">Website URLs</Label>
		            <p className="text-sm text-gray-600 mb-3">
		              Enter multiple website URLs, one per line. Each URL will be scraped as a separate source.
		            </p>
		          </div>
		
		          <div>
		            <Textarea
		              placeholder={`Enter URLs one per line, for example:
		https://example.com
		https://another-site.com
		https://third-website.org`}
		              value={urlsText}
		              onChange={(e) => setUrlsText(e.target.value)}
		              className="min-h-32 resize-y"
		              rows={6}
		            />
		            {validUrls.length > 0 && (
		              <p className="text-sm text-gray-500 mt-2">
		                {validUrls.length} URL{validUrls.length !== 1 ? 's' : ''} detected
		              </p>
		            )}
		          </div>
		
		          <div className="flex justify-end space-x-2 pt-4">
		            <Button variant="outline" onClick={handleClose}>
		              Cancel
		            </Button>
		            <Button 
		              onClick={handleSubmit} 
		              disabled={!isValid || isSubmitting}
		            >
		              {isSubmitting ? 'Adding...' : `Add ${validUrls.length} Website${validUrls.length !== 1 ? 's' : ''}`}
		            </Button>
		          </div>
		        </div>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default MultipleWebsiteUrlsDialog;]]></file>
	<file path='src\components\notebook\NotebookHeader.tsx'><![CDATA[
		import React, { useState } from 'react';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { User, LogOut } from 'lucide-react';
		import { useNavigate } from 'react-router-dom';
		import { useNotebookUpdate } from '@/hooks/useNotebookUpdate';
		import {
		  DropdownMenu,
		  DropdownMenuContent,
		  DropdownMenuItem,
		  DropdownMenuTrigger,
		} from '@/components/ui/dropdown-menu';
		import { useLogout } from '@/services/authService';
		import Logo from '@/components/ui/Logo';
		
		interface NotebookHeaderProps {
		  title: string;
		  notebookId?: string;
		}
		
		const NotebookHeader = ({ title, notebookId }: NotebookHeaderProps) => {
		  const navigate = useNavigate();
		  const { logout } = useLogout();
		  const [isEditing, setIsEditing] = useState(false);
		  const [editedTitle, setEditedTitle] = useState(title);
		  const { updateNotebook, isUpdating } = useNotebookUpdate();
		
		  const handleTitleClick = () => {
		    if (notebookId) {
		      setIsEditing(true);
		      setEditedTitle(title);
		    }
		  };
		
		  const handleTitleSubmit = () => {
		    if (notebookId && editedTitle.trim() && editedTitle !== title) {
		      updateNotebook({
		        id: notebookId,
		        updates: { title: editedTitle.trim() }
		      });
		    }
		    setIsEditing(false);
		  };
		
		  const handleKeyDown = (e: React.KeyboardEvent) => {
		    if (e.key === 'Enter') {
		      handleTitleSubmit();
		    } else if (e.key === 'Escape') {
		      setEditedTitle(title);
		      setIsEditing(false);
		    }
		  };
		
		  const handleBlur = () => {
		    handleTitleSubmit();
		  };
		
		  const handleIconClick = () => {
		    navigate('/');
		  };
		
		  return (
		    <header className="bg-white border-b border-gray-200 px-6 py-4">
		      <div className="flex items-center justify-between">
		        <div className="flex items-center space-x-4">
		          <div className="flex items-center space-x-2">
		            <button 
		              onClick={handleIconClick}
		              className="hover:bg-gray-50 rounded transition-colors p-1"
		            >
		              <Logo />
		            </button>
		            {isEditing ? (
		              <Input
		                value={editedTitle}
		                onChange={(e) => setEditedTitle(e.target.value)}
		                onKeyDown={handleKeyDown}
		                onBlur={handleBlur}
		                className="text-lg font-medium text-gray-900 border-none shadow-none p-0 h-auto focus-visible:ring-0 min-w-[300px] w-auto"
		                autoFocus
		                disabled={isUpdating}
		              />
		            ) : (
		              <span 
		                className="text-lg font-medium text-gray-900 cursor-pointer hover:bg-gray-50 rounded px-2 py-1 transition-colors"
		                onClick={handleTitleClick}
		              >
		                {title}
		              </span>
		            )}
		          </div>
		        </div>
		        
		        <div className="flex items-center space-x-4">
		          <div className="flex items-center space-x-2">
		            <DropdownMenu>
		              <DropdownMenuTrigger asChild>
		                <Button variant="ghost" size="sm" className="p-0">
		                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-purple-600 transition-colors">
		                    <User className="h-4 w-4 text-white" />
		                  </div>
		                </Button>
		              </DropdownMenuTrigger>
		              <DropdownMenuContent align="end" className="w-48">
		                <DropdownMenuItem onClick={logout} className="cursor-pointer">
		                  <LogOut className="h-4 w-4 mr-2" />
		                  Sign Out
		                </DropdownMenuItem>
		              </DropdownMenuContent>
		            </DropdownMenu>
		          </div>
		        </div>
		      </div>
		    </header>
		  );
		};
		
		export default NotebookHeader;]]></file>
	<file path='src\components\notebook\NoteEditor.tsx'><![CDATA[
		
		import React, { useState, useEffect } from 'react';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Textarea } from '@/components/ui/textarea';
		import { Trash2, Save, X, Wand2 } from 'lucide-react';
		import { Note } from '@/hooks/useNotes';
		import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
		import { Citation } from '@/types/message';
		import { supabase } from '@/integrations/supabase/client';
		
		interface NoteEditorProps {
		  note?: Note;
		  onSave: (title: string, content: string) => void;
		  onDelete?: () => void;
		  onCancel: () => void;
		  isLoading?: boolean;
		  onCitationClick?: (citation: Citation) => void;
		}
		
		const NoteEditor = ({ note, onSave, onDelete, onCancel, isLoading, onCitationClick }: NoteEditorProps) => {
		  const [title, setTitle] = useState(note?.title || '');
		  const [content, setContent] = useState(note?.content || '');
		  // AI response notes should NEVER be in edit mode - they're read-only
		  const [isEditing, setIsEditing] = useState(!note || note.source_type === 'user');
		  const [isGeneratingTitle, setIsGeneratingTitle] = useState(false);
		
		  useEffect(() => {
		    setTitle(note?.title || '');
		    setContent(note?.content || '');
		    // AI response notes should NEVER be editable - they open in view mode
		    setIsEditing(!note || note.source_type === 'user');
		  }, [note]);
		
		  const handleSave = () => {
		    if (title.trim() && content.trim()) {
		      onSave(title.trim(), content.trim());
		    }
		  };
		
		  const handleEdit = () => {
		    // Only allow editing of user notes, not AI responses
		    if (note?.source_type === 'ai_response') {
		      console.log('NoteEditor: Cannot edit AI response note');
		      return;
		    }
		    setIsEditing(true);
		  };
		
		  const handleCancelEdit = () => {
		    if (note) {
		      setTitle(note.title);
		      setContent(note.content);
		      // AI response notes should return to view mode, user notes can be cancelled
		      setIsEditing(note.source_type === 'ai_response' ? false : false);
		    } else {
		      onCancel();
		    }
		  };
		
		  const handleGenerateTitle = async () => {
		    if (!note || note.source_type !== 'ai_response') return;
		    
		    setIsGeneratingTitle(true);
		    try {
		      const { data, error } = await supabase.functions.invoke('generate-note-title', {
		        body: { content: note.content }
		      });
		      
		      if (error) throw error;
		      
		      if (data?.title) {
		        setTitle(data.title);
		      }
		    } catch (error) {
		      console.error('Error generating title:', error);
		    } finally {
		      setIsGeneratingTitle(false);
		    }
		  };
		
		  // Parse AI response content if it's structured
		  const parseContent = (contentStr: string) => {
		    try {
		      const parsed = JSON.parse(contentStr);
		      if (parsed.segments && parsed.citations) {
		        return parsed;
		      }
		    } catch (e) {
		      // Not JSON, return as string
		    }
		    return contentStr;
		  };
		
		  const isAIResponse = note?.source_type === 'ai_response';
		  const parsedContent = isAIResponse ? parseContent(content) : content;
		
		  if (!isEditing && note) {
		    // View mode for existing notes
		    return (
		      <div className="flex flex-col h-full">
		        {/* Header */}
		        <div className="p-4 border-b border-gray-200 flex-shrink-0">
		          <div className="flex items-center justify-between mb-4">
		            <h3 className="font-medium text-gray-900">
		              {isAIResponse ? 'AI Response' : 'Note'}
		            </h3>
		            <div className="flex items-center space-x-2">
		              {!isAIResponse && (
		                <Button variant="ghost" size="sm" onClick={handleEdit}>
		                  Edit
		                </Button>
		              )}
		              <Button variant="ghost" size="sm" onClick={onCancel}>
		                <X className="h-4 w-4" />
		              </Button>
		            </div>
		          </div>
		          
		          <h2 className="text-lg font-semibold text-gray-900">{title}</h2>
		        </div>
		
		        {/* Content */}
		        <div className="flex-1 p-4 overflow-auto">
		          {isAIResponse && typeof parsedContent === 'object' ? (
		            <MarkdownRenderer 
		              content={parsedContent}
		              className="prose max-w-none"
		              onCitationClick={onCitationClick}
		            />
		          ) : (
		            <div className="whitespace-pre-wrap text-gray-700">{typeof parsedContent === 'string' ? parsedContent : content}</div>
		          )}
		        </div>
		
		        {/* Footer */}
		        <div className="p-4 border-t border-gray-200 flex-shrink-0">
		          <div className="flex justify-between">
		            <div>
		              {note && onDelete && (
		                <Button 
		                  variant="ghost" 
		                  size="sm" 
		                  onClick={onDelete}
		                  disabled={isLoading}
		                  className="text-red-600 hover:text-red-700"
		                >
		                  <Trash2 className="h-4 w-4 mr-2" />
		                  Delete
		                </Button>
		              )}
		            </div>
		            <div className="text-xs text-gray-500">
		              {note?.created_at && new Date(note.created_at).toLocaleDateString()}
		            </div>
		          </div>
		        </div>
		      </div>
		    );
		  }
		
		  // Edit mode (only for user notes or new notes)
		  return (
		    <div className="flex flex-col h-full">
		      {/* Header */}
		      <div className="p-4 border-b border-gray-200 flex-shrink-0">
		        <div className="flex items-center justify-between mb-4">
		          <h3 className="font-medium text-gray-900">
		            {note ? 'Edit Note' : 'New Note'}
		          </h3>
		          <Button variant="ghost" size="sm" onClick={handleCancelEdit}>
		            <X className="h-4 w-4" />
		          </Button>
		        </div>
		        
		        <div className="flex space-x-2 mb-4">
		          <Input
		            placeholder="Note title"
		            value={title}
		            onChange={(e) => setTitle(e.target.value)}
		            className="flex-1"
		          />
		          {isAIResponse && (
		            <Button 
		              variant="outline" 
		              size="sm"
		              onClick={handleGenerateTitle}
		              disabled={isGeneratingTitle}
		            >
		              <Wand2 className="h-4 w-4 mr-2" />
		              {isGeneratingTitle ? 'Generating...' : 'Generate Title'}
		            </Button>
		          )}
		        </div>
		      </div>
		
		      {/* Content */}
		      <div className="flex-1 p-4 overflow-hidden">
		        <Textarea
		          placeholder="Write your note here..."
		          value={content}
		          onChange={(e) => setContent(e.target.value)}
		          className="w-full h-full resize-none border-0 focus-visible:ring-0 p-0"
		        />
		      </div>
		
		      {/* Footer */}
		      <div className="p-4 border-t border-gray-200 flex-shrink-0">
		        <div className="flex justify-between">
		          <div>
		            {note && onDelete && !isAIResponse && (
		              <Button 
		                variant="ghost" 
		                size="sm" 
		                onClick={onDelete}
		                disabled={isLoading}
		                className="text-red-600 hover:text-red-700"
		              >
		                <Trash2 className="h-4 w-4 mr-2" />
		                Delete
		              </Button>
		            )}
		          </div>
		          <Button 
		            onClick={handleSave}
		            disabled={!title.trim() || !content.trim() || isLoading}
		            size="sm"
		          >
		            <Save className="h-4 w-4 mr-2" />
		            {isLoading ? 'Saving...' : 'Save'}
		          </Button>
		        </div>
		      </div>
		    </div>
		  );
		};
		
		export default NoteEditor;]]></file>
	<file path='src\components\notebook\PasteTextDialog.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import {
		  Dialog,
		  DialogContent,
		  DialogHeader,
		  DialogTitle,
		} from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Textarea } from '@/components/ui/textarea';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { Copy } from 'lucide-react';
		
		interface PasteTextDialogProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  onSubmit: (title: string, content: string) => void;
		}
		
		const PasteTextDialog = ({ open, onOpenChange, onSubmit }: PasteTextDialogProps) => {
		  const [title, setTitle] = useState('');
		  const [content, setContent] = useState('');
		  const [isLoading, setIsLoading] = useState(false);
		
		  const handleSubmit = async (e: React.FormEvent) => {
		    e.preventDefault();
		    if (!content.trim()) return;
		
		    setIsLoading(true);
		    try {
		      await onSubmit(title.trim() || 'Pasted Text', content.trim());
		      setTitle('');
		      setContent('');
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error adding text source:', error);
		    } finally {
		      setIsLoading(false);
		    }
		  };
		
		  const handlePasteFromClipboard = async () => {
		    try {
		      const text = await navigator.clipboard.readText();
		      setContent(text);
		    } catch (error) {
		      console.error('Failed to read clipboard:', error);
		    }
		  };
		
		  return (
		    <Dialog open={open} onOpenChange={onOpenChange}>
		      <DialogContent className="max-w-2xl max-h-[80vh]">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <Copy className="h-5 w-5 text-gray-600" />
		            <span>Add Text Source</span>
		          </DialogTitle>
		        </DialogHeader>
		
		        <form onSubmit={handleSubmit} className="space-y-4">
		          <div className="space-y-2">
		            <Label htmlFor="text-title">Title (optional)</Label>
		            <Input
		              id="text-title"
		              placeholder="Enter a title for this text..."
		              value={title}
		              onChange={(e) => setTitle(e.target.value)}
		            />
		          </div>
		
		          <div className="space-y-2">
		            <div className="flex items-center justify-between">
		              <Label htmlFor="text-content">Content</Label>
		              <Button
		                type="button"
		                variant="outline"
		                size="sm"
		                onClick={handlePasteFromClipboard}
		              >
		                <Copy className="h-4 w-4 mr-2" />
		                Paste from clipboard
		              </Button>
		            </div>
		            <Textarea
		              id="text-content"
		              placeholder="Paste or type your text here..."
		              value={content}
		              onChange={(e) => setContent(e.target.value)}
		              rows={12}
		              required
		              className="min-h-[300px]"
		            />
		            <p className="text-xs text-gray-500">
		              {content.length} characters
		            </p>
		          </div>
		
		          <div className="flex space-x-2 pt-4">
		            <Button
		              type="button"
		              variant="outline"
		              className="flex-1"
		              onClick={() => onOpenChange(false)}
		            >
		              Cancel
		            </Button>
		            <Button
		              type="submit"
		              className="flex-1"
		              disabled={!content.trim() || isLoading}
		            >
		              {isLoading ? 'Adding...' : 'Add Source'}
		            </Button>
		          </div>
		        </form>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default PasteTextDialog;]]></file>
	<file path='src\components\notebook\RenameSourceDialog.tsx'><![CDATA[
		
		import React, { useState, useEffect } from 'react';
		import {
		  Dialog,
		  DialogContent,
		  DialogDescription,
		  DialogFooter,
		  DialogHeader,
		  DialogTitle,
		} from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { useSourceUpdate } from '@/hooks/useSourceUpdate';
		
		interface RenameSourceDialogProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  source: any;
		  notebookId?: string;
		}
		
		const RenameSourceDialog = ({ open, onOpenChange, source, notebookId }: RenameSourceDialogProps) => {
		  const [title, setTitle] = useState('');
		  const { updateSource, isUpdating } = useSourceUpdate();
		
		  useEffect(() => {
		    if (source && open) {
		      setTitle(source.title);
		    }
		  }, [source, open]);
		
		  const handleSave = async () => {
		    if (!source || !title.trim()) return;
		
		    await updateSource({
		      sourceId: source.id,
		      title: title.trim(),
		    });
		
		    onOpenChange(false);
		    setTitle('');
		  };
		
		  const handleCancel = () => {
		    onOpenChange(false);
		    setTitle('');
		  };
		
		  return (
		    <Dialog open={open} onOpenChange={onOpenChange}>
		      <DialogContent className="sm:max-w-[425px]">
		        <DialogHeader>
		          <DialogTitle>Rename {source?.title}?</DialogTitle>
		          <DialogDescription>
		            Enter a new name for this source.
		          </DialogDescription>
		        </DialogHeader>
		        <div className="grid gap-4 py-4">
		          <div className="grid gap-2">
		            <Label htmlFor="source-name">Source Name *</Label>
		            <Input
		              id="source-name"
		              value={title}
		              onChange={(e) => setTitle(e.target.value)}
		              placeholder="Enter source name"
		            />
		          </div>
		        </div>
		        <DialogFooter>
		          <Button variant="outline" onClick={handleCancel}>
		            Cancel
		          </Button>
		          <Button 
		            onClick={handleSave}
		            disabled={!title.trim() || isUpdating}
		          >
		            {isUpdating ? 'Saving...' : 'Save'}
		          </Button>
		        </DialogFooter>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default RenameSourceDialog;]]></file>
	<file path='src\components\notebook\SaveToNoteButton.tsx'><![CDATA[
		
		import React from 'react';
		import { Button } from '@/components/ui/button';
		import { FileText } from 'lucide-react';
		import { useNotes } from '@/hooks/useNotes';
		
		interface SaveToNoteButtonProps {
		  content: string | { segments: any[]; citations: any[] };
		  notebookId?: string;
		  onSaved?: () => void;
		}
		
		const SaveToNoteButton = ({ content, notebookId, onSaved }: SaveToNoteButtonProps) => {
		  const { createNote, isCreating } = useNotes(notebookId);
		
		  const handleSaveToNote = () => {
		    if (!notebookId) return;
		    
		    console.log('SaveToNoteButton: Saving content:', content);
		    console.log('SaveToNoteButton: Content type:', typeof content);
		    console.log('SaveToNoteButton: Is object with segments:', typeof content === 'object' && content && 'segments' in content);
		    
		    // Handle both string content and enhanced content with citations
		    let contentText: string;
		    let title: string;
		    let source_type: 'user' | 'ai_response';
		    let extracted_text: string | undefined;
		    
		    // Check if this is an AI response with structured content (object with segments)
		    const isAIResponse = typeof content === 'object' && content && 'segments' in content && Array.isArray(content.segments);
		    
		    if (isAIResponse) {
		      console.log('SaveToNoteButton: Detected AI response with segments');
		      // For AI responses with citations, save the structured content as JSON
		      contentText = JSON.stringify(content);
		      // Generate title from the first segment's text
		      const firstSegmentText = content.segments[0]?.text || 'AI Response';
		      title = firstSegmentText.length > 50 ? firstSegmentText.substring(0, 47) + '...' : firstSegmentText;
		      source_type = 'ai_response';
		      
		      // Extract text for preview from first few segments
		      extracted_text = content.segments
		        .slice(0, 3)
		        .map((segment: any) => segment.text)
		        .join(' ')
		        .substring(0, 200);
		    } else {
		      console.log('SaveToNoteButton: Detected user message');
		      // For simple string content (typically user messages)
		      const contentString = typeof content === 'string' ? content : String(content);
		      contentText = contentString;
		      const firstLine = contentString.split('\n')[0];
		      title = firstLine.length > 50 ? firstLine.substring(0, 47) + '...' : firstLine;
		      source_type = 'user';
		      extracted_text = undefined; // User notes don't need extracted text
		    }
		    
		    console.log('SaveToNoteButton: Final source_type:', source_type);
		    console.log('SaveToNoteButton: Final title:', title);
		    
		    createNote({ title, content: contentText, source_type, extracted_text });
		    onSaved?.();
		  };
		
		  if (!notebookId) return null;
		
		  return (
		    <Button
		      variant="ghost"
		      size="sm"
		      onClick={handleSaveToNote}
		      disabled={isCreating}
		      className="flex items-center space-x-1 text-gray-600 hover:text-gray-800"
		    >
		      <FileText className="h-3 w-3" />
		      <span className="text-xs">{isCreating ? 'Saving...' : 'Save to note'}</span>
		    </Button>
		  );
		};
		
		export default SaveToNoteButton;]]></file>
	<file path='src\components\notebook\SourcesSidebar.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import { Button } from '@/components/ui/button';
		import { Plus, MoreVertical, Trash2, Edit, Loader2, CheckCircle, XCircle, Upload } from 'lucide-react';
		import { Card } from '@/components/ui/card';
		import { ScrollArea } from '@/components/ui/scroll-area';
		import { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuTrigger } from '@/components/ui/context-menu';
		import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
		import AddSourcesDialog from './AddSourcesDialog';
		import RenameSourceDialog from './RenameSourceDialog';
		import SourceContentViewer from '@/components/chat/SourceContentViewer';
		import { useSources } from '@/hooks/useSources';
		import { useSourceDelete } from '@/hooks/useSourceDelete';
		import { Citation } from '@/types/message';
		
		interface SourcesSidebarProps {
		  hasSource: boolean;
		  notebookId?: string;
		  selectedCitation?: Citation | null;
		  onCitationClose?: () => void;
		  setSelectedCitation?: (citation: Citation | null) => void;
		}
		
		const SourcesSidebar = ({
		  hasSource,
		  notebookId,
		  selectedCitation,
		  onCitationClose,
		  setSelectedCitation
		}: SourcesSidebarProps) => {
		  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
		  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
		  const [showRenameDialog, setShowRenameDialog] = useState(false);
		  const [selectedSource, setSelectedSource] = useState<any>(null);
		  const [selectedSourceForViewing, setSelectedSourceForViewing] = useState<any>(null);
		
		  const {
		    sources,
		    isLoading
		  } = useSources(notebookId);
		
		  const {
		    deleteSource,
		    isDeleting
		  } = useSourceDelete();
		
		  // Get the source content for the selected citation
		  const getSourceContent = (citation: Citation) => {
		    const source = sources?.find(s => s.id === citation.source_id);
		    return source?.content || '';
		  };
		
		  // Get the source summary for the selected citation
		  const getSourceSummary = (citation: Citation) => {
		    const source = sources?.find(s => s.id === citation.source_id);
		    return source?.summary || '';
		  };
		
		  // Get the source URL for the selected citation
		  const getSourceUrl = (citation: Citation) => {
		    const source = sources?.find(s => s.id === citation.source_id);
		    return source?.url || '';
		  };
		
		  // Get the source summary for a selected source
		  const getSelectedSourceSummary = () => {
		    return selectedSourceForViewing?.summary || '';
		  };
		
		  // Get the source content for a selected source  
		  const getSelectedSourceContent = () => {
		    return selectedSourceForViewing?.content || '';
		  };
		
		  // Get the source URL for a selected source
		  const getSelectedSourceUrl = () => {
		    return selectedSourceForViewing?.url || '';
		  };
		
		  
		  const renderSourceIcon = (type: string) => {
		    const iconMap: Record<string, string> = {
		      'pdf': '/file-types/PDF.svg',
		      'text': '/file-types/TXT.png',
		      'website': '/file-types/WEB.svg',
		      'youtube': '/file-types/MP3.png',
		      'audio': '/file-types/MP3.png',
		      'doc': '/file-types/DOC.png',
		      'multiple-websites': '/file-types/WEB.svg',
		      'copied-text': '/file-types/TXT.png'
		    };
		
		    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon
		
		    return (
		      <img 
		        src={iconUrl} 
		        alt={`${type} icon`} 
		        className="w-full h-full object-contain" 
		        onError={(e) => {
		          // Fallback to a simple text indicator if image fails to load
		          const target = e.target as HTMLImageElement;
		          target.style.display = 'none';
		          target.parentElement!.innerHTML = '📄';
		        }} 
		      />
		    );
		  };
		
		  const renderProcessingStatus = (status: string) => {
		    switch (status) {
		      case 'uploading':
		        return <Upload className="h-4 w-4 animate-pulse text-blue-500" />;
		      case 'processing':
		        return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
		      case 'completed':
		        return <CheckCircle className="h-4 w-4 text-green-500" />;
		      case 'failed':
		        return <XCircle className="h-4 w-4 text-red-500" />;
		      case 'pending':
		        return <Loader2 className="h-4 w-4 animate-pulse text-gray-500" />;
		      default:
		        return null;
		    }
		  };
		
		  const handleRemoveSource = (source: any) => {
		    setSelectedSource(source);
		    setShowDeleteDialog(true);
		  };
		
		  const handleRenameSource = (source: any) => {
		    setSelectedSource(source);
		    setShowRenameDialog(true);
		  };
		
		  const handleSourceClick = (source: any) => {
		    console.log('SourcesSidebar: Source clicked from list', {
		      sourceId: source.id,
		      sourceTitle: source.title
		    });
		
		    // Clear any existing citation state first
		    if (setSelectedCitation) {
		      setSelectedCitation(null);
		    }
		
		    // Set the selected source for viewing
		    setSelectedSourceForViewing(source);
		
		    // Create a mock citation for the selected source without line data (this prevents auto-scroll)
		    const mockCitation: Citation = {
		      citation_id: -1, // Use negative ID to indicate this is a mock citation
		      source_id: source.id,
		      source_title: source.title,
		      source_type: source.type,
		      chunk_index: 0,
		      excerpt: 'Full document view'
		      // Deliberately omitting chunk_lines_from and chunk_lines_to to prevent auto-scroll
		    };
		
		    console.log('SourcesSidebar: Created mock citation', mockCitation);
		
		    // Set the mock citation after a small delay to ensure state is clean
		    setTimeout(() => {
		      if (setSelectedCitation) {
		        setSelectedCitation(mockCitation);
		      }
		    }, 50);
		  };
		
		  const handleBackToSources = () => {
		    console.log('SourcesSidebar: Back to sources clicked');
		    setSelectedSourceForViewing(null);
		    onCitationClose?.();
		  };
		
		  const confirmDelete = () => {
		    if (selectedSource) {
		      deleteSource(selectedSource.id);
		      setShowDeleteDialog(false);
		      setSelectedSource(null);
		    }
		  };
		
		  // If we have a selected citation, show the content viewer
		  if (selectedCitation) {
		    console.log('SourcesSidebar: Rendering content viewer for citation', {
		      citationId: selectedCitation.citation_id,
		      sourceId: selectedCitation.source_id,
		      hasLineData: !!(selectedCitation.chunk_lines_from && selectedCitation.chunk_lines_to),
		      isFromSourceList: selectedCitation.citation_id === -1
		    });
		
		    // Determine which citation to display and get appropriate content/summary/url
		    const displayCitation = selectedCitation;
		    const sourceContent = selectedSourceForViewing ? getSelectedSourceContent() : getSourceContent(selectedCitation);
		    const sourceSummary = selectedSourceForViewing ? getSelectedSourceSummary() : getSourceSummary(selectedCitation);
		    const sourceUrl = selectedSourceForViewing ? getSelectedSourceUrl() : getSourceUrl(selectedCitation);
		
		    return (
		      <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
		        <div className="p-4 border-b border-gray-200 flex-shrink-0">
		          <div className="flex items-center justify-between">
		            <h2 className="text-lg font-medium text-gray-900 cursor-pointer hover:text-gray-700" onClick={handleBackToSources}>
		              Sources
		            </h2>
		            <Button variant="ghost" onClick={handleBackToSources} className="p-2 [&_svg]:!w-6 [&_svg]:!h-6">
		              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor">
		                <path d="M440-440v240h-80v-160H200v-80h240Zm160-320v160h160v80H520v-240h80Z" />
		              </svg>
		            </Button>
		          </div>
		        </div>
		        
		        <SourceContentViewer 
		          citation={displayCitation} 
		          sourceContent={sourceContent} 
		          sourceSummary={sourceSummary}
		          sourceUrl={sourceUrl}
		          className="flex-1 overflow-hidden" 
		          isOpenedFromSourceList={selectedCitation.citation_id === -1}
		        />
		      </div>
		    );
		  }
		
		  return (
		    <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
		      <div className="p-4 border-b border-gray-200 flex-shrink-0">
		        <div className="flex items-center justify-between mb-4">
		          <h2 className="text-lg font-medium text-gray-900">Sources</h2>
		        </div>
		        
		        <div className="flex space-x-2">
		          <Button variant="outline" size="sm" className="flex-1" onClick={() => setShowAddSourcesDialog(true)}>
		            <Plus className="h-4 w-4 mr-2" />
		            Add
		          </Button>
		        </div>
		      </div>
		
		      <ScrollArea className="flex-1 h-full">
		        <div className="p-4">
		          {isLoading ? (
		            <div className="text-center py-8">
		              <p className="text-sm text-gray-600">Loading sources...</p>
		            </div>
		          ) : sources && sources.length > 0 ? (
		            <div className="space-y-4">
		              {sources.map((source) => (
		                <ContextMenu key={source.id}>
		                  <ContextMenuTrigger>
		                    <Card className="p-3 border border-gray-200 cursor-pointer hover:bg-gray-50" onClick={() => handleSourceClick(source)}>
		                      <div className="flex items-start justify-between space-x-3">
		                        <div className="flex items-center space-x-2 flex-1 min-w-0">
		                          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
		                            {renderSourceIcon(source.type)}
		                          </div>
		                          <div className="flex-1 min-w-0">
		                            <span className="text-sm text-gray-900 truncate block">{source.title}</span>
		                          </div>
		                        </div>
		                        <div className="flex-shrink-0 py-[4px]">
		                          {renderProcessingStatus(source.processing_status)}
		                        </div>
		                      </div>
		                    </Card>
		                  </ContextMenuTrigger>
		                  <ContextMenuContent>
		                    <ContextMenuItem onClick={() => handleRenameSource(source)}>
		                      <Edit className="h-4 w-4 mr-2" />
		                      Rename source
		                    </ContextMenuItem>
		                    <ContextMenuItem onClick={() => handleRemoveSource(source)} className="text-red-600 focus:text-red-600">
		                      <Trash2 className="h-4 w-4 mr-2" />
		                      Remove source
		                    </ContextMenuItem>
		                  </ContextMenuContent>
		                </ContextMenu>
		              ))}
		            </div>
		          ) : (
		            <div className="text-center py-8">
		              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
		                <span className="text-gray-400 text-2xl">📄</span>
		              </div>
		              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved sources will appear here</h3>
		              <p className="text-sm text-gray-600 mb-4">Click Add source above to add PDFs, text, or audio files.</p>
		            </div>
		          )}
		        </div>
		      </ScrollArea>
		
		      <AddSourcesDialog 
		        open={showAddSourcesDialog} 
		        onOpenChange={setShowAddSourcesDialog} 
		        notebookId={notebookId} 
		      />
		
		      <RenameSourceDialog 
		        open={showRenameDialog} 
		        onOpenChange={setShowRenameDialog} 
		        source={selectedSource} 
		        notebookId={notebookId} 
		      />
		
		      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
		        <AlertDialogContent>
		          <AlertDialogHeader>
		            <AlertDialogTitle>Delete {selectedSource?.title}?</AlertDialogTitle>
		            <AlertDialogDescription>
		              You're about to delete this source. This cannot be undone.
		            </AlertDialogDescription>
		          </AlertDialogHeader>
		          <AlertDialogFooter>
		            <AlertDialogCancel>Cancel</AlertDialogCancel>
		            <AlertDialogAction 
		              onClick={confirmDelete} 
		              className="bg-red-600 hover:bg-red-700" 
		              disabled={isDeleting}
		            >
		              {isDeleting ? 'Deleting...' : 'Delete'}
		            </AlertDialogAction>
		          </AlertDialogFooter>
		        </AlertDialogContent>
		      </AlertDialog>
		    </div>
		  );
		};
		
		export default SourcesSidebar;]]></file>
	<file path='src\components\notebook\StudioSidebar.tsx'><![CDATA[
		import React, { useState, useEffect } from 'react';
		import { Button } from '@/components/ui/button';
		import { Card } from '@/components/ui/card';
		import { ScrollArea } from '@/components/ui/scroll-area';
		import { MoreVertical, Plus, Edit, Bot, User, Loader2, AlertCircle, CheckCircle2, RefreshCw } from 'lucide-react';
		import { useNotes, Note } from '@/hooks/useNotes';
		import { useAudioOverview } from '@/hooks/useAudioOverview';
		import { useNotebooks } from '@/hooks/useNotebooks';
		import { useSources } from '@/hooks/useSources';
		import { useQueryClient } from '@tanstack/react-query';
		import NoteEditor from './NoteEditor';
		import AudioPlayer from './AudioPlayer';
		import { Citation } from '@/types/message';
		
		interface StudioSidebarProps {
		  notebookId?: string;
		  isExpanded?: boolean;
		  onCitationClick?: (citation: Citation) => void;
		}
		
		const StudioSidebar = ({
		  notebookId,
		  isExpanded,
		  onCitationClick
		}: StudioSidebarProps) => {
		  const [editingNote, setEditingNote] = useState<Note | null>(null);
		  const [isCreatingNote, setIsCreatingNote] = useState(false);
		  const [audioError, setAudioError] = useState(false);
		  const {
		    notes,
		    isLoading,
		    createNote,
		    updateNote,
		    deleteNote,
		    isCreating,
		    isUpdating,
		    isDeleting
		  } = useNotes(notebookId);
		  const {
		    notebooks
		  } = useNotebooks();
		  const {
		    sources
		  } = useSources(notebookId);
		  const {
		    generateAudioOverview,
		    refreshAudioUrl,
		    autoRefreshIfExpired,
		    isGenerating,
		    isAutoRefreshing,
		    generationStatus,
		    checkAudioExpiry
		  } = useAudioOverview(notebookId);
		  const queryClient = useQueryClient();
		  const notebook = notebooks?.find(n => n.id === notebookId);
		  const hasValidAudio = notebook?.audio_overview_url && !checkAudioExpiry(notebook.audio_url_expires_at);
		  const currentStatus = generationStatus || notebook?.audio_overview_generation_status;
		  
		  // Check if at least one source has been successfully processed
		  const hasProcessedSource = sources?.some(source => source.processing_status === 'completed') || false;
		
		  // Auto-refresh expired URLs
		  useEffect(() => {
		    if (!notebookId || !notebook?.audio_overview_url) return;
		    
		    const checkAndRefresh = async () => {
		      if (checkAudioExpiry(notebook.audio_url_expires_at)) {
		        console.log('Detected expired audio URL, initiating auto-refresh...');
		        await autoRefreshIfExpired(notebookId, notebook.audio_url_expires_at);
		      }
		    };
		
		    // Check immediately
		    checkAndRefresh();
		
		    // Set up periodic check every 5 minutes
		    const interval = setInterval(checkAndRefresh, 5 * 60 * 1000);
		
		    return () => clearInterval(interval);
		  }, [notebookId, notebook?.audio_overview_url, notebook?.audio_url_expires_at, autoRefreshIfExpired, checkAudioExpiry]);
		
		  const handleCreateNote = () => {
		    setIsCreatingNote(true);
		    setEditingNote(null);
		  };
		
		  const handleEditNote = (note: Note) => {
		    console.log('StudioSidebar: Opening note', {
		      noteId: note.id,
		      sourceType: note.source_type
		    });
		    setEditingNote(note);
		    setIsCreatingNote(false);
		  };
		
		  const handleSaveNote = (title: string, content: string) => {
		    if (editingNote) {
		      // Only allow updating user notes, not AI responses
		      if (editingNote.source_type === 'user') {
		        updateNote({
		          id: editingNote.id,
		          title,
		          content
		        });
		      }
		    } else {
		      createNote({
		        title,
		        content,
		        source_type: 'user'
		      });
		    }
		    setEditingNote(null);
		    setIsCreatingNote(false);
		  };
		
		  const handleDeleteNote = () => {
		    if (editingNote) {
		      deleteNote(editingNote.id);
		      setEditingNote(null);
		    }
		  };
		
		  const handleCancel = () => {
		    setEditingNote(null);
		    setIsCreatingNote(false);
		  };
		
		  const handleGenerateAudio = () => {
		    if (notebookId) {
		      generateAudioOverview(notebookId);
		      setAudioError(false);
		    }
		  };
		
		  const handleAudioError = () => {
		    setAudioError(true);
		  };
		
		  const handleAudioRetry = () => {
		    // Regenerate the audio overview
		    handleGenerateAudio();
		  };
		
		  const handleAudioDeleted = () => {
		    // Refresh the notebooks data to update the UI
		    if (notebookId) {
		      queryClient.invalidateQueries({
		        queryKey: ['notebooks']
		      });
		    }
		    setAudioError(false);
		  };
		
		  const handleUrlRefresh = (notebookId: string) => {
		    refreshAudioUrl(notebookId);
		  };
		
		  const getStatusDisplay = () => {
		    if (isAutoRefreshing) {
		      return {
		        icon: null,
		        text: "Refreshing URL...",
		        description: "Updating audio access"
		      };
		    }
		    
		    if (currentStatus === 'generating' || isGenerating) {
		      return {
		        icon: <Loader2 className="h-4 w-4 animate-spin text-blue-600" />,
		        text: "Generating audio...",
		        description: "This may take a few minutes"
		      };
		    } else if (currentStatus === 'failed') {
		      return {
		        icon: <AlertCircle className="h-4 w-4 text-red-600" />,
		        text: "Generation failed",
		        description: "Please try again"
		      };
		    } else if (currentStatus === 'completed' && hasValidAudio) {
		      return {
		        icon: <CheckCircle2 className="h-4 w-4 text-green-600" />,
		        text: "Ready to play",
		        description: "Audio overview available"
		      };
		    }
		    return null;
		  };
		
		  const isEditingMode = editingNote || isCreatingNote;
		  const getPreviewText = (note: Note) => {
		    if (note.source_type === 'ai_response') {
		      // Use extracted_text if available, otherwise parse the content
		      if (note.extracted_text) {
		        return note.extracted_text;
		      }
		      try {
		        const parsed = JSON.parse(note.content);
		        if (parsed.segments && parsed.segments[0]) {
		          return parsed.segments[0].text;
		        }
		      } catch (e) {
		        // If parsing fails, use content as-is
		      }
		    }
		
		    // For user notes or fallback, use the content directly
		    const contentToUse = note.content;
		    return contentToUse.length > 100 ? contentToUse.substring(0, 100) + '...' : contentToUse;
		  };
		
		  if (isEditingMode) {
		    return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
		        <NoteEditor note={editingNote || undefined} onSave={handleSaveNote} onDelete={editingNote ? handleDeleteNote : undefined} onCancel={handleCancel} isLoading={isCreating || isUpdating || isDeleting} onCitationClick={onCitationClick} />
		      </div>;
		  }
		
		  return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
		      <div className="p-4 border-b border-gray-200 flex-shrink-0">
		        <h2 className="text-lg font-medium text-gray-900 mb-4">Studio</h2>
		        
		        {/* Audio Overview */}
		        <Card className="p-4 mb-4 border border-gray-200">
		          <div className="flex items-center justify-between mb-3">
		            <h3 className="font-medium text-gray-900">Audio Overview</h3>
		          </div>
		
		          {hasValidAudio && !audioError && currentStatus !== 'generating' && !isAutoRefreshing ? <AudioPlayer 
		              audioUrl={notebook.audio_overview_url} 
		              title="Deep Dive Conversation" 
		              notebookId={notebookId} 
		              expiresAt={notebook.audio_url_expires_at} 
		              onError={handleAudioError} 
		              onRetry={handleAudioRetry} 
		              onDeleted={handleAudioDeleted}
		              onUrlRefresh={handleUrlRefresh}
		            /> : <Card className="p-3 border border-gray-200">
		              {/* Hide this div when generating or auto-refreshing */}
		              {currentStatus !== 'generating' && !isGenerating && !isAutoRefreshing && <div className="flex items-center space-x-3 mb-3">
		                  <div className="w-8 h-8 rounded flex items-center justify-center">
		                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#111827">
		                      <path d="M280-120v-123q-104-14-172-93T40-520h80q0 83 58.5 141.5T320-320h10q5 0 10-1 13 20 28 37.5t32 32.5q-10 3-19.5 4.5T360-243v123h-80Zm20-282q-43-8-71.5-40.5T200-520v-240q0-50 35-85t85-35q50 0 85 35t35 85v160H280v80q0 31 5 60.5t15 57.5Zm340 2q-50 0-85-35t-35-85v-240q0-50 35-85t85-35q50 0 85 35t35 85v240q0 50-35 85t-85 35Zm-40 280v-123q-104-14-172-93t-68-184h80q0 83 58.5 141.5T640-320q83 0 141.5-58.5T840-520h80q0 105-68 184t-172 93v123h-80Zm40-360q17 0 28.5-11.5T680-520v-240q0-17-11.5-28.5T640-800q-17 0-28.5 11.5T600-760v240q0 17 11.5 28.5T640-480Zm0-160Z" />
		                    </svg>
		                  </div>
		                  <div className="flex-1">
		                    <h4 className="font-medium text-gray-900">Deep Dive conversation</h4>
		                    <p className="text-sm text-gray-600">Two hosts</p>
		                  </div>
		                </div>}
		              
		              {/* Status Display */}
		              {getStatusDisplay() && <div className="flex items-center space-x-2 mb-3 p-2 rounded-md bg-transparent">
		                  {getStatusDisplay()!.icon}
		                  <div className="flex-1">
		                    <p className="text-sm font-medium text-slate-900">{getStatusDisplay()!.text}</p>
		                    <p className="text-xs text-slate-900">{getStatusDisplay()!.description}</p>
		                  </div>
		                </div>}
		              
		              {/* Audio error div */}
		              {audioError && <div className="flex items-center space-x-2 mb-3 p-2 bg-red-50 rounded-md">
		                  <AlertCircle className="h-4 w-4 text-red-600" />
		                  <div className="flex-1">
		                    <p className="text-sm text-red-600">Audio unavailable</p>
		                  </div>
		                  <Button size="sm" variant="outline" onClick={handleAudioRetry} className="text-red-600 border-red-300 hover:bg-red-50">
		                    <RefreshCw className="h-4 w-4 mr-1" />
		                    Retry
		                  </Button>
		                </div>}
		              
		              <div className="flex space-x-2">
		                <Button size="sm" onClick={handleGenerateAudio} disabled={isGenerating || currentStatus === 'generating' || !hasProcessedSource || isAutoRefreshing} className="flex-1 text-white bg-slate-900 hover:bg-slate-800">
		                  {isGenerating || currentStatus === 'generating' ? <>
		                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
		                      Generating...
		                    </> : 'Generate'}
		                </Button>
		              </div>
		            </Card>}
		        </Card>
		
		        {/* Notes Section */}
		        <div className="mb-4">
		          <div className="flex items-center justify-between mb-3">
		            <h3 className="font-medium text-gray-900">Notes</h3>
		            
		          </div>
		          
		          <Button variant="outline" size="sm" className="w-full mb-4" onClick={handleCreateNote}>
		            <Plus className="h-4 w-4 mr-2" />
		            Add note
		          </Button>
		        </div>
		      </div>
		
		      {/* Saved Notes Area */}
		      <ScrollArea className="flex-1 h-full">
		        <div className="p-4">
		          {isLoading ? <div className="text-center py-8">
		              <p className="text-sm text-gray-600">Loading notes...</p>
		            </div> : notes && notes.length > 0 ? <div className="space-y-3">
		              {notes.map(note => <Card key={note.id} className="p-3 border border-gray-200 hover:bg-gray-50 cursor-pointer" onClick={() => handleEditNote(note)}>
		                  <div className="flex items-start justify-between">
		                    <div className="flex-1 min-w-0">
		                      <div className="flex items-center space-x-2 mb-1">
		                        {note.source_type === 'ai_response' ? <Bot className="h-3 w-3 text-blue-600" /> : <User className="h-3 w-3 text-gray-600" />}
		                        <span className="text-xs text-gray-500 uppercase">
		                          {note.source_type === 'ai_response' ? 'AI Response' : 'Note'}
		                        </span>
		                      </div>
		                      <h4 className="font-medium text-gray-900 truncate">{note.title}</h4>
		                      <p className="text-sm text-gray-600 line-clamp-2 mt-1">
		                        {getPreviewText(note)}
		                      </p>
		                      <p className="text-xs text-gray-500 mt-2">
		                        {new Date(note.updated_at).toLocaleDateString()}
		                      </p>
		                    </div>
		                    {note.source_type === 'user' && <Button variant="ghost" size="sm" className="ml-2">
		                        <Edit className="h-3 w-3" />
		                      </Button>}
		                  </div>
		                </Card>)}
		            </div> : <div className="text-center py-8">
		              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
		                <span className="text-gray-400 text-2xl">📄</span>
		              </div>
		              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved notes will appear here</h3>
		              <p className="text-sm text-gray-600">
		                Save a chat message to create a new note, or click Add note above.
		              </p>
		            </div>}
		        </div>
		      </ScrollArea>
		    </div>;
		};
		
		export default StudioSidebar;]]></file>
	<file path='src\components\notebook\WebsiteUrlInput.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import {
		  Dialog,
		  DialogContent,
		  DialogHeader,
		  DialogTitle,
		} from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { Globe } from 'lucide-react';
		
		interface WebsiteUrlInputProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  onSubmit: (url: string) => void;
		}
		
		const WebsiteUrlInput = ({ open, onOpenChange, onSubmit }: WebsiteUrlInputProps) => {
		  const [url, setUrl] = useState('');
		  const [isLoading, setIsLoading] = useState(false);
		
		  const handleSubmit = async (e: React.FormEvent) => {
		    e.preventDefault();
		    if (!url.trim()) return;
		
		    setIsLoading(true);
		    try {
		      await onSubmit(url.trim());
		      setUrl('');
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error adding website source:', error);
		    } finally {
		      setIsLoading(false);
		    }
		  };
		
		  return (
		    <Dialog open={open} onOpenChange={onOpenChange}>
		      <DialogContent className="max-w-md">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <Globe className="h-5 w-5 text-blue-600" />
		            <span>Add Website</span>
		          </DialogTitle>
		        </DialogHeader>
		
		        <form onSubmit={handleSubmit} className="space-y-4">
		          <div className="space-y-2">
		            <Label htmlFor="website-url">Website URL</Label>
		            <Input
		              id="website-url"
		              type="url"
		              placeholder="https://example.com"
		              value={url}
		              onChange={(e) => setUrl(e.target.value)}
		              required
		            />
		            <p className="text-xs text-gray-500">
		              Enter the URL of the website you want to add as a source
		            </p>
		          </div>
		
		          <div className="flex space-x-2 pt-4">
		            <Button
		              type="button"
		              variant="outline"
		              className="flex-1"
		              onClick={() => onOpenChange(false)}
		            >
		              Cancel
		            </Button>
		            <Button
		              type="submit"
		              className="flex-1"
		              disabled={!url.trim() || isLoading}
		            >
		              {isLoading ? 'Adding...' : 'Add Source'}
		            </Button>
		          </div>
		        </form>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default WebsiteUrlInput;]]></file>
	<file path='src\components\notebook\YouTubeUrlInput.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import {
		  Dialog,
		  DialogContent,
		  DialogHeader,
		  DialogTitle,
		} from '@/components/ui/dialog';
		import { Button } from '@/components/ui/button';
		import { Input } from '@/components/ui/input';
		import { Label } from '@/components/ui/label';
		import { Youtube } from 'lucide-react';
		
		interface YouTubeUrlInputProps {
		  open: boolean;
		  onOpenChange: (open: boolean) => void;
		  onSubmit: (url: string) => void;
		}
		
		const YouTubeUrlInput = ({ open, onOpenChange, onSubmit }: YouTubeUrlInputProps) => {
		  const [url, setUrl] = useState('');
		  const [isLoading, setIsLoading] = useState(false);
		
		  const handleSubmit = async (e: React.FormEvent) => {
		    e.preventDefault();
		    if (!url.trim()) return;
		
		    setIsLoading(true);
		    try {
		      await onSubmit(url.trim());
		      setUrl('');
		      onOpenChange(false);
		    } catch (error) {
		      console.error('Error adding YouTube source:', error);
		    } finally {
		      setIsLoading(false);
		    }
		  };
		
		  return (
		    <Dialog open={open} onOpenChange={onOpenChange}>
		      <DialogContent className="max-w-md">
		        <DialogHeader>
		          <DialogTitle className="flex items-center space-x-2">
		            <Youtube className="h-5 w-5 text-red-600" />
		            <span>Add YouTube Video</span>
		          </DialogTitle>
		        </DialogHeader>
		
		        <form onSubmit={handleSubmit} className="space-y-4">
		          <div className="space-y-2">
		            <Label htmlFor="youtube-url">YouTube URL</Label>
		            <Input
		              id="youtube-url"
		              type="url"
		              placeholder="https://www.youtube.com/watch?v=..."
		              value={url}
		              onChange={(e) => setUrl(e.target.value)}
		              required
		            />
		            <p className="text-xs text-gray-500">
		              Paste the full YouTube video URL
		            </p>
		          </div>
		
		          <div className="flex space-x-2 pt-4">
		            <Button
		              type="button"
		              variant="outline"
		              className="flex-1"
		              onClick={() => onOpenChange(false)}
		            >
		              Cancel
		            </Button>
		            <Button
		              type="submit"
		              className="flex-1"
		              disabled={!url.trim() || isLoading}
		            >
		              {isLoading ? 'Adding...' : 'Add Source'}
		            </Button>
		          </div>
		        </form>
		      </DialogContent>
		    </Dialog>
		  );
		};
		
		export default YouTubeUrlInput;]]></file>
	<file path='src\components\ui\accordion.tsx'><![CDATA[
		
		import * as React from "react"
		import * as AccordionPrimitive from "@radix-ui/react-accordion"
		import { ChevronDown } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const Accordion = AccordionPrimitive.Root
		
		const AccordionItem = React.forwardRef<
		  React.ElementRef<typeof AccordionPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
		>(({ className, ...props }, ref) => (
		  <AccordionPrimitive.Item
		    ref={ref}
		    className={cn("border-b", className)}
		    {...props}
		  />
		))
		AccordionItem.displayName = "AccordionItem"
		
		const AccordionTrigger = React.forwardRef<
		  React.ElementRef<typeof AccordionPrimitive.Trigger>,
		  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {
		    chevronColor?: string;
		  }
		>(({ className, children, chevronColor, ...props }, ref) => (
		  <AccordionPrimitive.Header className="flex">
		    <AccordionPrimitive.Trigger
		      ref={ref}
		      className={cn(
		        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
		        className
		      )}
		      {...props}
		    >
		      {children}
		      <ChevronDown 
		        className="h-4 w-4 shrink-0 transition-transform duration-200" 
		        style={chevronColor ? { color: chevronColor } : {}}
		      />
		    </AccordionPrimitive.Trigger>
		  </AccordionPrimitive.Header>
		))
		AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
		
		const AccordionContent = React.forwardRef<
		  React.ElementRef<typeof AccordionPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
		>(({ className, children, ...props }, ref) => (
		  <AccordionPrimitive.Content
		    ref={ref}
		    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
		    {...props}
		  >
		    <div className={cn("pb-4 pt-0", className)}>{children}</div>
		  </AccordionPrimitive.Content>
		))
		
		AccordionContent.displayName = AccordionPrimitive.Content.displayName
		
		export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }]]></file>
	<file path='src\components\ui\alert-dialog.tsx'><![CDATA[
		import * as React from "react"
		import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
		
		import { cn } from "@/lib/utils"
		import { buttonVariants } from "@/components/ui/button"
		
		const AlertDialog = AlertDialogPrimitive.Root
		
		const AlertDialogTrigger = AlertDialogPrimitive.Trigger
		
		const AlertDialogPortal = AlertDialogPrimitive.Portal
		
		const AlertDialogOverlay = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPrimitive.Overlay
		    className={cn(
		      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
		      className
		    )}
		    {...props}
		    ref={ref}
		  />
		))
		AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
		
		const AlertDialogContent = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPortal>
		    <AlertDialogOverlay />
		    <AlertDialogPrimitive.Content
		      ref={ref}
		      className={cn(
		        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
		        className
		      )}
		      {...props}
		    />
		  </AlertDialogPortal>
		))
		AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
		
		const AlertDialogHeader = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col space-y-2 text-center sm:text-left",
		      className
		    )}
		    {...props}
		  />
		)
		AlertDialogHeader.displayName = "AlertDialogHeader"
		
		const AlertDialogFooter = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		      className
		    )}
		    {...props}
		  />
		)
		AlertDialogFooter.displayName = "AlertDialogFooter"
		
		const AlertDialogTitle = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Title>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPrimitive.Title
		    ref={ref}
		    className={cn("text-lg font-semibold", className)}
		    {...props}
		  />
		))
		AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
		
		const AlertDialogDescription = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Description>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPrimitive.Description
		    ref={ref}
		    className={cn("text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		AlertDialogDescription.displayName =
		  AlertDialogPrimitive.Description.displayName
		
		const AlertDialogAction = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Action>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPrimitive.Action
		    ref={ref}
		    className={cn(buttonVariants(), className)}
		    {...props}
		  />
		))
		AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
		
		const AlertDialogCancel = React.forwardRef<
		  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
		  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
		>(({ className, ...props }, ref) => (
		  <AlertDialogPrimitive.Cancel
		    ref={ref}
		    className={cn(
		      buttonVariants({ variant: "outline" }),
		      "mt-2 sm:mt-0",
		      className
		    )}
		    {...props}
		  />
		))
		AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
		
		export {
		  AlertDialog,
		  AlertDialogPortal,
		  AlertDialogOverlay,
		  AlertDialogTrigger,
		  AlertDialogContent,
		  AlertDialogHeader,
		  AlertDialogFooter,
		  AlertDialogTitle,
		  AlertDialogDescription,
		  AlertDialogAction,
		  AlertDialogCancel,
		}]]></file>
	<file path='src\components\ui\alert.tsx'><![CDATA[
		import * as React from "react"
		import { cva, type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		
		const alertVariants = cva(
		  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
		  {
		    variants: {
		      variant: {
		        default: "bg-background text-foreground",
		        destructive:
		          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		    },
		  }
		)
		
		const Alert = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
		>(({ className, variant, ...props }, ref) => (
		  <div
		    ref={ref}
		    role="alert"
		    className={cn(alertVariants({ variant }), className)}
		    {...props}
		  />
		))
		Alert.displayName = "Alert"
		
		const AlertTitle = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLHeadingElement>
		>(({ className, ...props }, ref) => (
		  <h5
		    ref={ref}
		    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
		    {...props}
		  />
		))
		AlertTitle.displayName = "AlertTitle"
		
		const AlertDescription = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLParagraphElement>
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    className={cn("text-sm [&_p]:leading-relaxed", className)}
		    {...props}
		  />
		))
		AlertDescription.displayName = "AlertDescription"
		
		export { Alert, AlertTitle, AlertDescription }]]></file>
	<file path='src\components\ui\aspect-ratio.tsx'>
		import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
		
		const AspectRatio = AspectRatioPrimitive.Root
		
		export { AspectRatio }</file>
	<file path='src\components\ui\avatar.tsx'><![CDATA[
		import * as React from "react"
		import * as AvatarPrimitive from "@radix-ui/react-avatar"
		
		import { cn } from "@/lib/utils"
		
		const Avatar = React.forwardRef<
		  React.ElementRef<typeof AvatarPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
		>(({ className, ...props }, ref) => (
		  <AvatarPrimitive.Root
		    ref={ref}
		    className={cn(
		      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
		      className
		    )}
		    {...props}
		  />
		))
		Avatar.displayName = AvatarPrimitive.Root.displayName
		
		const AvatarImage = React.forwardRef<
		  React.ElementRef<typeof AvatarPrimitive.Image>,
		  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
		>(({ className, ...props }, ref) => (
		  <AvatarPrimitive.Image
		    ref={ref}
		    className={cn("aspect-square h-full w-full", className)}
		    {...props}
		  />
		))
		AvatarImage.displayName = AvatarPrimitive.Image.displayName
		
		const AvatarFallback = React.forwardRef<
		  React.ElementRef<typeof AvatarPrimitive.Fallback>,
		  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
		>(({ className, ...props }, ref) => (
		  <AvatarPrimitive.Fallback
		    ref={ref}
		    className={cn(
		      "flex h-full w-full items-center justify-center rounded-full bg-muted",
		      className
		    )}
		    {...props}
		  />
		))
		AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
		
		export { Avatar, AvatarImage, AvatarFallback }]]></file>
	<file path='src\components\ui\badge.tsx'><![CDATA[
		import * as React from "react"
		import { cva, type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		
		const badgeVariants = cva(
		  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
		  {
		    variants: {
		      variant: {
		        default:
		          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
		        secondary:
		          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
		        destructive:
		          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
		        outline: "text-foreground",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		    },
		  }
		)
		
		export interface BadgeProps
		  extends React.HTMLAttributes<HTMLDivElement>,
		    VariantProps<typeof badgeVariants> {}
		
		function Badge({ className, variant, ...props }: BadgeProps) {
		  return (
		    <div className={cn(badgeVariants({ variant }), className)} {...props} />
		  )
		}
		
		export { Badge, badgeVariants }]]></file>
	<file path='src\components\ui\breadcrumb.tsx'><![CDATA[
		import * as React from "react"
		import { Slot } from "@radix-ui/react-slot"
		import { ChevronRight, MoreHorizontal } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const Breadcrumb = React.forwardRef<
		  HTMLElement,
		  React.ComponentPropsWithoutRef<"nav"> & {
		    separator?: React.ReactNode
		  }
		>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
		Breadcrumb.displayName = "Breadcrumb"
		
		const BreadcrumbList = React.forwardRef<
		  HTMLOListElement,
		  React.ComponentPropsWithoutRef<"ol">
		>(({ className, ...props }, ref) => (
		  <ol
		    ref={ref}
		    className={cn(
		      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
		      className
		    )}
		    {...props}
		  />
		))
		BreadcrumbList.displayName = "BreadcrumbList"
		
		const BreadcrumbItem = React.forwardRef<
		  HTMLLIElement,
		  React.ComponentPropsWithoutRef<"li">
		>(({ className, ...props }, ref) => (
		  <li
		    ref={ref}
		    className={cn("inline-flex items-center gap-1.5", className)}
		    {...props}
		  />
		))
		BreadcrumbItem.displayName = "BreadcrumbItem"
		
		const BreadcrumbLink = React.forwardRef<
		  HTMLAnchorElement,
		  React.ComponentPropsWithoutRef<"a"> & {
		    asChild?: boolean
		  }
		>(({ asChild, className, ...props }, ref) => {
		  const Comp = asChild ? Slot : "a"
		
		  return (
		    <Comp
		      ref={ref}
		      className={cn("transition-colors hover:text-foreground", className)}
		      {...props}
		    />
		  )
		})
		BreadcrumbLink.displayName = "BreadcrumbLink"
		
		const BreadcrumbPage = React.forwardRef<
		  HTMLSpanElement,
		  React.ComponentPropsWithoutRef<"span">
		>(({ className, ...props }, ref) => (
		  <span
		    ref={ref}
		    role="link"
		    aria-disabled="true"
		    aria-current="page"
		    className={cn("font-normal text-foreground", className)}
		    {...props}
		  />
		))
		BreadcrumbPage.displayName = "BreadcrumbPage"
		
		const BreadcrumbSeparator = ({
		  children,
		  className,
		  ...props
		}: React.ComponentProps<"li">) => (
		  <li
		    role="presentation"
		    aria-hidden="true"
		    className={cn("[&>svg]:size-3.5", className)}
		    {...props}
		  >
		    {children ?? <ChevronRight />}
		  </li>
		)
		BreadcrumbSeparator.displayName = "BreadcrumbSeparator"
		
		const BreadcrumbEllipsis = ({
		  className,
		  ...props
		}: React.ComponentProps<"span">) => (
		  <span
		    role="presentation"
		    aria-hidden="true"
		    className={cn("flex h-9 w-9 items-center justify-center", className)}
		    {...props}
		  >
		    <MoreHorizontal className="h-4 w-4" />
		    <span className="sr-only">More</span>
		  </span>
		)
		BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"
		
		export {
		  Breadcrumb,
		  BreadcrumbList,
		  BreadcrumbItem,
		  BreadcrumbLink,
		  BreadcrumbPage,
		  BreadcrumbSeparator,
		  BreadcrumbEllipsis,
		}]]></file>
	<file path='src\components\ui\button.tsx'><![CDATA[
		import * as React from "react"
		import { Slot } from "@radix-ui/react-slot"
		import { cva, type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		
		const buttonVariants = cva(
		  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
		  {
		    variants: {
		      variant: {
		        default: "bg-primary text-primary-foreground hover:bg-primary/90",
		        destructive:
		          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
		        outline:
		          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
		        secondary:
		          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
		        ghost: "hover:bg-accent hover:text-accent-foreground",
		        link: "text-primary underline-offset-4 hover:underline",
		      },
		      size: {
		        default: "h-10 px-4 py-2",
		        sm: "h-9 rounded-md px-3",
		        lg: "h-11 rounded-md px-8",
		        icon: "h-10 w-10",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		      size: "default",
		    },
		  }
		)
		
		export interface ButtonProps
		  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
		    VariantProps<typeof buttonVariants> {
		  asChild?: boolean
		}
		
		const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
		  ({ className, variant, size, asChild = false, ...props }, ref) => {
		    const Comp = asChild ? Slot : "button"
		    return (
		      <Comp
		        className={cn(buttonVariants({ variant, size, className }))}
		        ref={ref}
		        {...props}
		      />
		    )
		  }
		)
		Button.displayName = "Button"
		
		export { Button, buttonVariants }]]></file>
	<file path='src\components\ui\calendar.tsx'><![CDATA[
		import * as React from "react";
		import { ChevronLeft, ChevronRight } from "lucide-react";
		import { DayPicker } from "react-day-picker";
		
		import { cn } from "@/lib/utils";
		import { buttonVariants } from "@/components/ui/button";
		
		export type CalendarProps = React.ComponentProps<typeof DayPicker>;
		
		function Calendar({
		  className,
		  classNames,
		  showOutsideDays = true,
		  ...props
		}: CalendarProps) {
		  return (
		    <DayPicker
		      showOutsideDays={showOutsideDays}
		      className={cn("p-3", className)}
		      classNames={{
		        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
		        month: "space-y-4",
		        caption: "flex justify-center pt-1 relative items-center",
		        caption_label: "text-sm font-medium",
		        nav: "space-x-1 flex items-center",
		        nav_button: cn(
		          buttonVariants({ variant: "outline" }),
		          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
		        ),
		        nav_button_previous: "absolute left-1",
		        nav_button_next: "absolute right-1",
		        table: "w-full border-collapse space-y-1",
		        head_row: "flex",
		        head_cell:
		          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
		        row: "flex w-full mt-2",
		        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
		        day: cn(
		          buttonVariants({ variant: "ghost" }),
		          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
		        ),
		        day_range_end: "day-range-end",
		        day_selected:
		          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
		        day_today: "bg-accent text-accent-foreground",
		        day_outside:
		          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
		        day_disabled: "text-muted-foreground opacity-50",
		        day_range_middle:
		          "aria-selected:bg-accent aria-selected:text-accent-foreground",
		        day_hidden: "invisible",
		        ...classNames,
		      }}
		      components={{
		        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
		        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
		      }}
		      {...props}
		    />
		  );
		}
		Calendar.displayName = "Calendar";
		
		export { Calendar };]]></file>
	<file path='src\components\ui\card.tsx'><![CDATA[
		import * as React from "react"
		
		import { cn } from "@/lib/utils"
		
		const Card = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    className={cn(
		      "rounded-lg border bg-card text-card-foreground shadow-sm",
		      className
		    )}
		    {...props}
		  />
		))
		Card.displayName = "Card"
		
		const CardHeader = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    className={cn("flex flex-col space-y-1.5 p-6", className)}
		    {...props}
		  />
		))
		CardHeader.displayName = "CardHeader"
		
		const CardTitle = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLHeadingElement>
		>(({ className, ...props }, ref) => (
		  <h3
		    ref={ref}
		    className={cn(
		      "text-2xl font-semibold leading-none tracking-tight",
		      className
		    )}
		    {...props}
		  />
		))
		CardTitle.displayName = "CardTitle"
		
		const CardDescription = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLParagraphElement>
		>(({ className, ...props }, ref) => (
		  <p
		    ref={ref}
		    className={cn("text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		CardDescription.displayName = "CardDescription"
		
		const CardContent = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => (
		  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
		))
		CardContent.displayName = "CardContent"
		
		const CardFooter = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    className={cn("flex items-center p-6 pt-0", className)}
		    {...props}
		  />
		))
		CardFooter.displayName = "CardFooter"
		
		export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }]]></file>
	<file path='src\components\ui\carousel.tsx'><![CDATA[
		import * as React from "react"
		import useEmblaCarousel, {
		  type UseEmblaCarouselType,
		} from "embla-carousel-react"
		import { ArrowLeft, ArrowRight } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		import { Button } from "@/components/ui/button"
		
		type CarouselApi = UseEmblaCarouselType[1]
		type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
		type CarouselOptions = UseCarouselParameters[0]
		type CarouselPlugin = UseCarouselParameters[1]
		
		type CarouselProps = {
		  opts?: CarouselOptions
		  plugins?: CarouselPlugin
		  orientation?: "horizontal" | "vertical"
		  setApi?: (api: CarouselApi) => void
		}
		
		type CarouselContextProps = {
		  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
		  api: ReturnType<typeof useEmblaCarousel>[1]
		  scrollPrev: () => void
		  scrollNext: () => void
		  canScrollPrev: boolean
		  canScrollNext: boolean
		} & CarouselProps
		
		const CarouselContext = React.createContext<CarouselContextProps | null>(null)
		
		function useCarousel() {
		  const context = React.useContext(CarouselContext)
		
		  if (!context) {
		    throw new Error("useCarousel must be used within a <Carousel />")
		  }
		
		  return context
		}
		
		const Carousel = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement> & CarouselProps
		>(
		  (
		    {
		      orientation = "horizontal",
		      opts,
		      setApi,
		      plugins,
		      className,
		      children,
		      ...props
		    },
		    ref
		  ) => {
		    const [carouselRef, api] = useEmblaCarousel(
		      {
		        ...opts,
		        axis: orientation === "horizontal" ? "x" : "y",
		      },
		      plugins
		    )
		    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
		    const [canScrollNext, setCanScrollNext] = React.useState(false)
		
		    const onSelect = React.useCallback((api: CarouselApi) => {
		      if (!api) {
		        return
		      }
		
		      setCanScrollPrev(api.canScrollPrev())
		      setCanScrollNext(api.canScrollNext())
		    }, [])
		
		    const scrollPrev = React.useCallback(() => {
		      api?.scrollPrev()
		    }, [api])
		
		    const scrollNext = React.useCallback(() => {
		      api?.scrollNext()
		    }, [api])
		
		    const handleKeyDown = React.useCallback(
		      (event: React.KeyboardEvent<HTMLDivElement>) => {
		        if (event.key === "ArrowLeft") {
		          event.preventDefault()
		          scrollPrev()
		        } else if (event.key === "ArrowRight") {
		          event.preventDefault()
		          scrollNext()
		        }
		      },
		      [scrollPrev, scrollNext]
		    )
		
		    React.useEffect(() => {
		      if (!api || !setApi) {
		        return
		      }
		
		      setApi(api)
		    }, [api, setApi])
		
		    React.useEffect(() => {
		      if (!api) {
		        return
		      }
		
		      onSelect(api)
		      api.on("reInit", onSelect)
		      api.on("select", onSelect)
		
		      return () => {
		        api?.off("select", onSelect)
		      }
		    }, [api, onSelect])
		
		    return (
		      <CarouselContext.Provider
		        value={{
		          carouselRef,
		          api: api,
		          opts,
		          orientation:
		            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
		          scrollPrev,
		          scrollNext,
		          canScrollPrev,
		          canScrollNext,
		        }}
		      >
		        <div
		          ref={ref}
		          onKeyDownCapture={handleKeyDown}
		          className={cn("relative", className)}
		          role="region"
		          aria-roledescription="carousel"
		          {...props}
		        >
		          {children}
		        </div>
		      </CarouselContext.Provider>
		    )
		  }
		)
		Carousel.displayName = "Carousel"
		
		const CarouselContent = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => {
		  const { carouselRef, orientation } = useCarousel()
		
		  return (
		    <div ref={carouselRef} className="overflow-hidden">
		      <div
		        ref={ref}
		        className={cn(
		          "flex",
		          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
		          className
		        )}
		        {...props}
		      />
		    </div>
		  )
		})
		CarouselContent.displayName = "CarouselContent"
		
		const CarouselItem = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => {
		  const { orientation } = useCarousel()
		
		  return (
		    <div
		      ref={ref}
		      role="group"
		      aria-roledescription="slide"
		      className={cn(
		        "min-w-0 shrink-0 grow-0 basis-full",
		        orientation === "horizontal" ? "pl-4" : "pt-4",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		CarouselItem.displayName = "CarouselItem"
		
		const CarouselPrevious = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<typeof Button>
		>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
		  const { orientation, scrollPrev, canScrollPrev } = useCarousel()
		
		  return (
		    <Button
		      ref={ref}
		      variant={variant}
		      size={size}
		      className={cn(
		        "absolute  h-8 w-8 rounded-full",
		        orientation === "horizontal"
		          ? "-left-12 top-1/2 -translate-y-1/2"
		          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
		        className
		      )}
		      disabled={!canScrollPrev}
		      onClick={scrollPrev}
		      {...props}
		    >
		      <ArrowLeft className="h-4 w-4" />
		      <span className="sr-only">Previous slide</span>
		    </Button>
		  )
		})
		CarouselPrevious.displayName = "CarouselPrevious"
		
		const CarouselNext = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<typeof Button>
		>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
		  const { orientation, scrollNext, canScrollNext } = useCarousel()
		
		  return (
		    <Button
		      ref={ref}
		      variant={variant}
		      size={size}
		      className={cn(
		        "absolute h-8 w-8 rounded-full",
		        orientation === "horizontal"
		          ? "-right-12 top-1/2 -translate-y-1/2"
		          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
		        className
		      )}
		      disabled={!canScrollNext}
		      onClick={scrollNext}
		      {...props}
		    >
		      <ArrowRight className="h-4 w-4" />
		      <span className="sr-only">Next slide</span>
		    </Button>
		  )
		})
		CarouselNext.displayName = "CarouselNext"
		
		export {
		  type CarouselApi,
		  Carousel,
		  CarouselContent,
		  CarouselItem,
		  CarouselPrevious,
		  CarouselNext,
		}]]></file>
	<file path='src\components\ui\chart.tsx'><![CDATA[
		import * as React from "react"
		import * as RechartsPrimitive from "recharts"
		
		import { cn } from "@/lib/utils"
		
		// Format: { THEME_NAME: CSS_SELECTOR }
		const THEMES = { light: "", dark: ".dark" } as const
		
		export type ChartConfig = {
		  [k in string]: {
		    label?: React.ReactNode
		    icon?: React.ComponentType
		  } & (
		    | { color?: string; theme?: never }
		    | { color?: never; theme: Record<keyof typeof THEMES, string> }
		  )
		}
		
		type ChartContextProps = {
		  config: ChartConfig
		}
		
		const ChartContext = React.createContext<ChartContextProps | null>(null)
		
		function useChart() {
		  const context = React.useContext(ChartContext)
		
		  if (!context) {
		    throw new Error("useChart must be used within a <ChartContainer />")
		  }
		
		  return context
		}
		
		const ChartContainer = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> & {
		    config: ChartConfig
		    children: React.ComponentProps<
		      typeof RechartsPrimitive.ResponsiveContainer
		    >["children"]
		  }
		>(({ id, className, children, config, ...props }, ref) => {
		  const uniqueId = React.useId()
		  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
		
		  return (
		    <ChartContext.Provider value={{ config }}>
		      <div
		        data-chart={chartId}
		        ref={ref}
		        className={cn(
		          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
		          className
		        )}
		        {...props}
		      >
		        <ChartStyle id={chartId} config={config} />
		        <RechartsPrimitive.ResponsiveContainer>
		          {children}
		        </RechartsPrimitive.ResponsiveContainer>
		      </div>
		    </ChartContext.Provider>
		  )
		})
		ChartContainer.displayName = "Chart"
		
		const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
		  const colorConfig = Object.entries(config).filter(
		    ([_, config]) => config.theme || config.color
		  )
		
		  if (!colorConfig.length) {
		    return null
		  }
		
		  return (
		    <style
		      dangerouslySetInnerHTML={{
		        __html: Object.entries(THEMES)
		          .map(
		            ([theme, prefix]) => `
		${prefix} [data-chart=${id}] {
		${colorConfig
		  .map(([key, itemConfig]) => {
		    const color =
		      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
		      itemConfig.color
		    return color ? `  --color-${key}: ${color};` : null
		  })
		  .join("\n")}
		}
		`
		          )
		          .join("\n"),
		      }}
		    />
		  )
		}
		
		const ChartTooltip = RechartsPrimitive.Tooltip
		
		const ChartTooltipContent = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
		    React.ComponentProps<"div"> & {
		      hideLabel?: boolean
		      hideIndicator?: boolean
		      indicator?: "line" | "dot" | "dashed"
		      nameKey?: string
		      labelKey?: string
		    }
		>(
		  (
		    {
		      active,
		      payload,
		      className,
		      indicator = "dot",
		      hideLabel = false,
		      hideIndicator = false,
		      label,
		      labelFormatter,
		      labelClassName,
		      formatter,
		      color,
		      nameKey,
		      labelKey,
		    },
		    ref
		  ) => {
		    const { config } = useChart()
		
		    const tooltipLabel = React.useMemo(() => {
		      if (hideLabel || !payload?.length) {
		        return null
		      }
		
		      const [item] = payload
		      const key = `${labelKey || item.dataKey || item.name || "value"}`
		      const itemConfig = getPayloadConfigFromPayload(config, item, key)
		      const value =
		        !labelKey && typeof label === "string"
		          ? config[label as keyof typeof config]?.label || label
		          : itemConfig?.label
		
		      if (labelFormatter) {
		        return (
		          <div className={cn("font-medium", labelClassName)}>
		            {labelFormatter(value, payload)}
		          </div>
		        )
		      }
		
		      if (!value) {
		        return null
		      }
		
		      return <div className={cn("font-medium", labelClassName)}>{value}</div>
		    }, [
		      label,
		      labelFormatter,
		      payload,
		      hideLabel,
		      labelClassName,
		      config,
		      labelKey,
		    ])
		
		    if (!active || !payload?.length) {
		      return null
		    }
		
		    const nestLabel = payload.length === 1 && indicator !== "dot"
		
		    return (
		      <div
		        ref={ref}
		        className={cn(
		          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
		          className
		        )}
		      >
		        {!nestLabel ? tooltipLabel : null}
		        <div className="grid gap-1.5">
		          {payload.map((item, index) => {
		            const key = `${nameKey || item.name || item.dataKey || "value"}`
		            const itemConfig = getPayloadConfigFromPayload(config, item, key)
		            const indicatorColor = color || item.payload.fill || item.color
		
		            return (
		              <div
		                key={item.dataKey}
		                className={cn(
		                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
		                  indicator === "dot" && "items-center"
		                )}
		              >
		                {formatter && item?.value !== undefined && item.name ? (
		                  formatter(item.value, item.name, item, index, item.payload)
		                ) : (
		                  <>
		                    {itemConfig?.icon ? (
		                      <itemConfig.icon />
		                    ) : (
		                      !hideIndicator && (
		                        <div
		                          className={cn(
		                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
		                            {
		                              "h-2.5 w-2.5": indicator === "dot",
		                              "w-1": indicator === "line",
		                              "w-0 border-[1.5px] border-dashed bg-transparent":
		                                indicator === "dashed",
		                              "my-0.5": nestLabel && indicator === "dashed",
		                            }
		                          )}
		                          style={
		                            {
		                              "--color-bg": indicatorColor,
		                              "--color-border": indicatorColor,
		                            } as React.CSSProperties
		                          }
		                        />
		                      )
		                    )}
		                    <div
		                      className={cn(
		                        "flex flex-1 justify-between leading-none",
		                        nestLabel ? "items-end" : "items-center"
		                      )}
		                    >
		                      <div className="grid gap-1.5">
		                        {nestLabel ? tooltipLabel : null}
		                        <span className="text-muted-foreground">
		                          {itemConfig?.label || item.name}
		                        </span>
		                      </div>
		                      {item.value && (
		                        <span className="font-mono font-medium tabular-nums text-foreground">
		                          {item.value.toLocaleString()}
		                        </span>
		                      )}
		                    </div>
		                  </>
		                )}
		              </div>
		            )
		          })}
		        </div>
		      </div>
		    )
		  }
		)
		ChartTooltipContent.displayName = "ChartTooltip"
		
		const ChartLegend = RechartsPrimitive.Legend
		
		const ChartLegendContent = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> &
		    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
		      hideIcon?: boolean
		      nameKey?: string
		    }
		>(
		  (
		    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
		    ref
		  ) => {
		    const { config } = useChart()
		
		    if (!payload?.length) {
		      return null
		    }
		
		    return (
		      <div
		        ref={ref}
		        className={cn(
		          "flex items-center justify-center gap-4",
		          verticalAlign === "top" ? "pb-3" : "pt-3",
		          className
		        )}
		      >
		        {payload.map((item) => {
		          const key = `${nameKey || item.dataKey || "value"}`
		          const itemConfig = getPayloadConfigFromPayload(config, item, key)
		
		          return (
		            <div
		              key={item.value}
		              className={cn(
		                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
		              )}
		            >
		              {itemConfig?.icon && !hideIcon ? (
		                <itemConfig.icon />
		              ) : (
		                <div
		                  className="h-2 w-2 shrink-0 rounded-[2px]"
		                  style={{
		                    backgroundColor: item.color,
		                  }}
		                />
		              )}
		              {itemConfig?.label}
		            </div>
		          )
		        })}
		      </div>
		    )
		  }
		)
		ChartLegendContent.displayName = "ChartLegend"
		
		// Helper to extract item config from a payload.
		function getPayloadConfigFromPayload(
		  config: ChartConfig,
		  payload: unknown,
		  key: string
		) {
		  if (typeof payload !== "object" || payload === null) {
		    return undefined
		  }
		
		  const payloadPayload =
		    "payload" in payload &&
		    typeof payload.payload === "object" &&
		    payload.payload !== null
		      ? payload.payload
		      : undefined
		
		  let configLabelKey: string = key
		
		  if (
		    key in payload &&
		    typeof payload[key as keyof typeof payload] === "string"
		  ) {
		    configLabelKey = payload[key as keyof typeof payload] as string
		  } else if (
		    payloadPayload &&
		    key in payloadPayload &&
		    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
		  ) {
		    configLabelKey = payloadPayload[
		      key as keyof typeof payloadPayload
		    ] as string
		  }
		
		  return configLabelKey in config
		    ? config[configLabelKey]
		    : config[key as keyof typeof config]
		}
		
		export {
		  ChartContainer,
		  ChartTooltip,
		  ChartTooltipContent,
		  ChartLegend,
		  ChartLegendContent,
		  ChartStyle,
		}]]></file>
	<file path='src\components\ui\checkbox.tsx'><![CDATA[
		import * as React from "react"
		import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
		import { Check } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const Checkbox = React.forwardRef<
		  React.ElementRef<typeof CheckboxPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
		>(({ className, ...props }, ref) => (
		  <CheckboxPrimitive.Root
		    ref={ref}
		    className={cn(
		      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
		      className
		    )}
		    {...props}
		  >
		    <CheckboxPrimitive.Indicator
		      className={cn("flex items-center justify-center text-current")}
		    >
		      <Check className="h-4 w-4" />
		    </CheckboxPrimitive.Indicator>
		  </CheckboxPrimitive.Root>
		))
		Checkbox.displayName = CheckboxPrimitive.Root.displayName
		
		export { Checkbox }]]></file>
	<file path='src\components\ui\collapsible.tsx'>
		import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
		
		const Collapsible = CollapsiblePrimitive.Root
		
		const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger
		
		const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent
		
		export { Collapsible, CollapsibleTrigger, CollapsibleContent }</file>
	<file path='src\components\ui\command.tsx'><![CDATA[
		import * as React from "react"
		import { type DialogProps } from "@radix-ui/react-dialog"
		import { Command as CommandPrimitive } from "cmdk"
		import { Search } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		import { Dialog, DialogContent } from "@/components/ui/dialog"
		
		const Command = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
		>(({ className, ...props }, ref) => (
		  <CommandPrimitive
		    ref={ref}
		    className={cn(
		      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
		      className
		    )}
		    {...props}
		  />
		))
		Command.displayName = CommandPrimitive.displayName
		
		interface CommandDialogProps extends DialogProps {}
		
		const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
		  return (
		    <Dialog {...props}>
		      <DialogContent className="overflow-hidden p-0 shadow-lg">
		        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
		          {children}
		        </Command>
		      </DialogContent>
		    </Dialog>
		  )
		}
		
		const CommandInput = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.Input>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
		>(({ className, ...props }, ref) => (
		  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
		    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
		    <CommandPrimitive.Input
		      ref={ref}
		      className={cn(
		        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
		        className
		      )}
		      {...props}
		    />
		  </div>
		))
		
		CommandInput.displayName = CommandPrimitive.Input.displayName
		
		const CommandList = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.List>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
		>(({ className, ...props }, ref) => (
		  <CommandPrimitive.List
		    ref={ref}
		    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
		    {...props}
		  />
		))
		
		CommandList.displayName = CommandPrimitive.List.displayName
		
		const CommandEmpty = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.Empty>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
		>((props, ref) => (
		  <CommandPrimitive.Empty
		    ref={ref}
		    className="py-6 text-center text-sm"
		    {...props}
		  />
		))
		
		CommandEmpty.displayName = CommandPrimitive.Empty.displayName
		
		const CommandGroup = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.Group>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
		>(({ className, ...props }, ref) => (
		  <CommandPrimitive.Group
		    ref={ref}
		    className={cn(
		      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
		      className
		    )}
		    {...props}
		  />
		))
		
		CommandGroup.displayName = CommandPrimitive.Group.displayName
		
		const CommandSeparator = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.Separator>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
		>(({ className, ...props }, ref) => (
		  <CommandPrimitive.Separator
		    ref={ref}
		    className={cn("-mx-1 h-px bg-border", className)}
		    {...props}
		  />
		))
		CommandSeparator.displayName = CommandPrimitive.Separator.displayName
		
		const CommandItem = React.forwardRef<
		  React.ElementRef<typeof CommandPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
		>(({ className, ...props }, ref) => (
		  <CommandPrimitive.Item
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
		      className
		    )}
		    {...props}
		  />
		))
		
		CommandItem.displayName = CommandPrimitive.Item.displayName
		
		const CommandShortcut = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLSpanElement>) => {
		  return (
		    <span
		      className={cn(
		        "ml-auto text-xs tracking-widest text-muted-foreground",
		        className
		      )}
		      {...props}
		    />
		  )
		}
		CommandShortcut.displayName = "CommandShortcut"
		
		export {
		  Command,
		  CommandDialog,
		  CommandInput,
		  CommandList,
		  CommandEmpty,
		  CommandGroup,
		  CommandItem,
		  CommandShortcut,
		  CommandSeparator,
		}]]></file>
	<file path='src\components\ui\context-menu.tsx'><![CDATA[
		import * as React from "react"
		import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
		import { Check, ChevronRight, Circle } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const ContextMenu = ContextMenuPrimitive.Root
		
		const ContextMenuTrigger = ContextMenuPrimitive.Trigger
		
		const ContextMenuGroup = ContextMenuPrimitive.Group
		
		const ContextMenuPortal = ContextMenuPrimitive.Portal
		
		const ContextMenuSub = ContextMenuPrimitive.Sub
		
		const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup
		
		const ContextMenuSubTrigger = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
		    inset?: boolean
		  }
		>(({ className, inset, children, ...props }, ref) => (
		  <ContextMenuPrimitive.SubTrigger
		    ref={ref}
		    className={cn(
		      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  >
		    {children}
		    <ChevronRight className="ml-auto h-4 w-4" />
		  </ContextMenuPrimitive.SubTrigger>
		))
		ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName
		
		const ContextMenuSubContent = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
		>(({ className, ...props }, ref) => (
		  <ContextMenuPrimitive.SubContent
		    ref={ref}
		    className={cn(
		      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		      className
		    )}
		    {...props}
		  />
		))
		ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName
		
		const ContextMenuContent = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
		>(({ className, ...props }, ref) => (
		  <ContextMenuPrimitive.Portal>
		    <ContextMenuPrimitive.Content
		      ref={ref}
		      className={cn(
		        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		        className
		      )}
		      {...props}
		    />
		  </ContextMenuPrimitive.Portal>
		))
		ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName
		
		const ContextMenuItem = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <ContextMenuPrimitive.Item
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName
		
		const ContextMenuCheckboxItem = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
		>(({ className, children, checked, ...props }, ref) => (
		  <ContextMenuPrimitive.CheckboxItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    checked={checked}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <ContextMenuPrimitive.ItemIndicator>
		        <Check className="h-4 w-4" />
		      </ContextMenuPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </ContextMenuPrimitive.CheckboxItem>
		))
		ContextMenuCheckboxItem.displayName =
		  ContextMenuPrimitive.CheckboxItem.displayName
		
		const ContextMenuRadioItem = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
		>(({ className, children, ...props }, ref) => (
		  <ContextMenuPrimitive.RadioItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <ContextMenuPrimitive.ItemIndicator>
		        <Circle className="h-2 w-2 fill-current" />
		      </ContextMenuPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </ContextMenuPrimitive.RadioItem>
		))
		ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName
		
		const ContextMenuLabel = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.Label>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <ContextMenuPrimitive.Label
		    ref={ref}
		    className={cn(
		      "px-2 py-1.5 text-sm font-semibold text-foreground",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName
		
		const ContextMenuSeparator = React.forwardRef<
		  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
		  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
		>(({ className, ...props }, ref) => (
		  <ContextMenuPrimitive.Separator
		    ref={ref}
		    className={cn("-mx-1 my-1 h-px bg-border", className)}
		    {...props}
		  />
		))
		ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName
		
		const ContextMenuShortcut = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLSpanElement>) => {
		  return (
		    <span
		      className={cn(
		        "ml-auto text-xs tracking-widest text-muted-foreground",
		        className
		      )}
		      {...props}
		    />
		  )
		}
		ContextMenuShortcut.displayName = "ContextMenuShortcut"
		
		export {
		  ContextMenu,
		  ContextMenuTrigger,
		  ContextMenuContent,
		  ContextMenuItem,
		  ContextMenuCheckboxItem,
		  ContextMenuRadioItem,
		  ContextMenuLabel,
		  ContextMenuSeparator,
		  ContextMenuShortcut,
		  ContextMenuGroup,
		  ContextMenuPortal,
		  ContextMenuSub,
		  ContextMenuSubContent,
		  ContextMenuSubTrigger,
		  ContextMenuRadioGroup,
		}]]></file>
	<file path='src\components\ui\dialog.tsx'><![CDATA[
		import * as React from "react"
		import * as DialogPrimitive from "@radix-ui/react-dialog"
		import { X } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const Dialog = DialogPrimitive.Root
		
		const DialogTrigger = DialogPrimitive.Trigger
		
		const DialogPortal = DialogPrimitive.Portal
		
		const DialogClose = DialogPrimitive.Close
		
		const DialogOverlay = React.forwardRef<
		  React.ElementRef<typeof DialogPrimitive.Overlay>,
		  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
		>(({ className, ...props }, ref) => (
		  <DialogPrimitive.Overlay
		    ref={ref}
		    className={cn(
		      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
		      className
		    )}
		    {...props}
		  />
		))
		DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
		
		const DialogContent = React.forwardRef<
		  React.ElementRef<typeof DialogPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
		>(({ className, children, ...props }, ref) => (
		  <DialogPortal>
		    <DialogOverlay />
		    <DialogPrimitive.Content
		      ref={ref}
		      className={cn(
		        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
		        className
		      )}
		      {...props}
		    >
		      {children}
		      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
		        <X className="h-4 w-4" />
		        <span className="sr-only">Close</span>
		      </DialogPrimitive.Close>
		    </DialogPrimitive.Content>
		  </DialogPortal>
		))
		DialogContent.displayName = DialogPrimitive.Content.displayName
		
		const DialogHeader = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col space-y-1.5 text-center sm:text-left",
		      className
		    )}
		    {...props}
		  />
		)
		DialogHeader.displayName = "DialogHeader"
		
		const DialogFooter = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		      className
		    )}
		    {...props}
		  />
		)
		DialogFooter.displayName = "DialogFooter"
		
		const DialogTitle = React.forwardRef<
		  React.ElementRef<typeof DialogPrimitive.Title>,
		  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
		>(({ className, ...props }, ref) => (
		  <DialogPrimitive.Title
		    ref={ref}
		    className={cn(
		      "text-lg font-semibold leading-none tracking-tight",
		      className
		    )}
		    {...props}
		  />
		))
		DialogTitle.displayName = DialogPrimitive.Title.displayName
		
		const DialogDescription = React.forwardRef<
		  React.ElementRef<typeof DialogPrimitive.Description>,
		  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
		>(({ className, ...props }, ref) => (
		  <DialogPrimitive.Description
		    ref={ref}
		    className={cn("text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		DialogDescription.displayName = DialogPrimitive.Description.displayName
		
		export {
		  Dialog,
		  DialogPortal,
		  DialogOverlay,
		  DialogClose,
		  DialogTrigger,
		  DialogContent,
		  DialogHeader,
		  DialogFooter,
		  DialogTitle,
		  DialogDescription,
		}]]></file>
	<file path='src\components\ui\drawer.tsx'><![CDATA[
		import * as React from "react"
		import { Drawer as DrawerPrimitive } from "vaul"
		
		import { cn } from "@/lib/utils"
		
		const Drawer = ({
		  shouldScaleBackground = true,
		  ...props
		}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
		  <DrawerPrimitive.Root
		    shouldScaleBackground={shouldScaleBackground}
		    {...props}
		  />
		)
		Drawer.displayName = "Drawer"
		
		const DrawerTrigger = DrawerPrimitive.Trigger
		
		const DrawerPortal = DrawerPrimitive.Portal
		
		const DrawerClose = DrawerPrimitive.Close
		
		const DrawerOverlay = React.forwardRef<
		  React.ElementRef<typeof DrawerPrimitive.Overlay>,
		  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
		>(({ className, ...props }, ref) => (
		  <DrawerPrimitive.Overlay
		    ref={ref}
		    className={cn("fixed inset-0 z-50 bg-black/80", className)}
		    {...props}
		  />
		))
		DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName
		
		const DrawerContent = React.forwardRef<
		  React.ElementRef<typeof DrawerPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
		>(({ className, children, ...props }, ref) => (
		  <DrawerPortal>
		    <DrawerOverlay />
		    <DrawerPrimitive.Content
		      ref={ref}
		      className={cn(
		        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
		        className
		      )}
		      {...props}
		    >
		      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
		      {children}
		    </DrawerPrimitive.Content>
		  </DrawerPortal>
		))
		DrawerContent.displayName = "DrawerContent"
		
		const DrawerHeader = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
		    {...props}
		  />
		)
		DrawerHeader.displayName = "DrawerHeader"
		
		const DrawerFooter = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
		    {...props}
		  />
		)
		DrawerFooter.displayName = "DrawerFooter"
		
		const DrawerTitle = React.forwardRef<
		  React.ElementRef<typeof DrawerPrimitive.Title>,
		  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
		>(({ className, ...props }, ref) => (
		  <DrawerPrimitive.Title
		    ref={ref}
		    className={cn(
		      "text-lg font-semibold leading-none tracking-tight",
		      className
		    )}
		    {...props}
		  />
		))
		DrawerTitle.displayName = DrawerPrimitive.Title.displayName
		
		const DrawerDescription = React.forwardRef<
		  React.ElementRef<typeof DrawerPrimitive.Description>,
		  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
		>(({ className, ...props }, ref) => (
		  <DrawerPrimitive.Description
		    ref={ref}
		    className={cn("text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		DrawerDescription.displayName = DrawerPrimitive.Description.displayName
		
		export {
		  Drawer,
		  DrawerPortal,
		  DrawerOverlay,
		  DrawerTrigger,
		  DrawerClose,
		  DrawerContent,
		  DrawerHeader,
		  DrawerFooter,
		  DrawerTitle,
		  DrawerDescription,
		}]]></file>
	<file path='src\components\ui\dropdown-menu.tsx'><![CDATA[
		import * as React from "react"
		import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
		import { Check, ChevronRight, Circle } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const DropdownMenu = DropdownMenuPrimitive.Root
		
		const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
		
		const DropdownMenuGroup = DropdownMenuPrimitive.Group
		
		const DropdownMenuPortal = DropdownMenuPrimitive.Portal
		
		const DropdownMenuSub = DropdownMenuPrimitive.Sub
		
		const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup
		
		const DropdownMenuSubTrigger = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
		    inset?: boolean
		  }
		>(({ className, inset, children, ...props }, ref) => (
		  <DropdownMenuPrimitive.SubTrigger
		    ref={ref}
		    className={cn(
		      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  >
		    {children}
		    <ChevronRight className="ml-auto h-4 w-4" />
		  </DropdownMenuPrimitive.SubTrigger>
		))
		DropdownMenuSubTrigger.displayName =
		  DropdownMenuPrimitive.SubTrigger.displayName
		
		const DropdownMenuSubContent = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
		>(({ className, ...props }, ref) => (
		  <DropdownMenuPrimitive.SubContent
		    ref={ref}
		    className={cn(
		      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		      className
		    )}
		    {...props}
		  />
		))
		DropdownMenuSubContent.displayName =
		  DropdownMenuPrimitive.SubContent.displayName
		
		const DropdownMenuContent = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
		>(({ className, sideOffset = 4, ...props }, ref) => (
		  <DropdownMenuPrimitive.Portal>
		    <DropdownMenuPrimitive.Content
		      ref={ref}
		      sideOffset={sideOffset}
		      className={cn(
		        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		        className
		      )}
		      {...props}
		    />
		  </DropdownMenuPrimitive.Portal>
		))
		DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName
		
		const DropdownMenuItem = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <DropdownMenuPrimitive.Item
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName
		
		const DropdownMenuCheckboxItem = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
		>(({ className, children, checked, ...props }, ref) => (
		  <DropdownMenuPrimitive.CheckboxItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    checked={checked}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <DropdownMenuPrimitive.ItemIndicator>
		        <Check className="h-4 w-4" />
		      </DropdownMenuPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </DropdownMenuPrimitive.CheckboxItem>
		))
		DropdownMenuCheckboxItem.displayName =
		  DropdownMenuPrimitive.CheckboxItem.displayName
		
		const DropdownMenuRadioItem = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
		>(({ className, children, ...props }, ref) => (
		  <DropdownMenuPrimitive.RadioItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <DropdownMenuPrimitive.ItemIndicator>
		        <Circle className="h-2 w-2 fill-current" />
		      </DropdownMenuPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </DropdownMenuPrimitive.RadioItem>
		))
		DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName
		
		const DropdownMenuLabel = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <DropdownMenuPrimitive.Label
		    ref={ref}
		    className={cn(
		      "px-2 py-1.5 text-sm font-semibold",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName
		
		const DropdownMenuSeparator = React.forwardRef<
		  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
		  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
		>(({ className, ...props }, ref) => (
		  <DropdownMenuPrimitive.Separator
		    ref={ref}
		    className={cn("-mx-1 my-1 h-px bg-muted", className)}
		    {...props}
		  />
		))
		DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName
		
		const DropdownMenuShortcut = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLSpanElement>) => {
		  return (
		    <span
		      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
		      {...props}
		    />
		  )
		}
		DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
		
		export {
		  DropdownMenu,
		  DropdownMenuTrigger,
		  DropdownMenuContent,
		  DropdownMenuItem,
		  DropdownMenuCheckboxItem,
		  DropdownMenuRadioItem,
		  DropdownMenuLabel,
		  DropdownMenuSeparator,
		  DropdownMenuShortcut,
		  DropdownMenuGroup,
		  DropdownMenuPortal,
		  DropdownMenuSub,
		  DropdownMenuSubContent,
		  DropdownMenuSubTrigger,
		  DropdownMenuRadioGroup,
		}]]></file>
	<file path='src\components\ui\form.tsx'><![CDATA[
		import * as React from "react"
		import * as LabelPrimitive from "@radix-ui/react-label"
		import { Slot } from "@radix-ui/react-slot"
		import {
		  Controller,
		  ControllerProps,
		  FieldPath,
		  FieldValues,
		  FormProvider,
		  useFormContext,
		} from "react-hook-form"
		
		import { cn } from "@/lib/utils"
		import { Label } from "@/components/ui/label"
		
		const Form = FormProvider
		
		type FormFieldContextValue<
		  TFieldValues extends FieldValues = FieldValues,
		  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
		> = {
		  name: TName
		}
		
		const FormFieldContext = React.createContext<FormFieldContextValue>(
		  {} as FormFieldContextValue
		)
		
		const FormField = <
		  TFieldValues extends FieldValues = FieldValues,
		  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
		>({
		  ...props
		}: ControllerProps<TFieldValues, TName>) => {
		  return (
		    <FormFieldContext.Provider value={{ name: props.name }}>
		      <Controller {...props} />
		    </FormFieldContext.Provider>
		  )
		}
		
		const useFormField = () => {
		  const fieldContext = React.useContext(FormFieldContext)
		  const itemContext = React.useContext(FormItemContext)
		  const { getFieldState, formState } = useFormContext()
		
		  const fieldState = getFieldState(fieldContext.name, formState)
		
		  if (!fieldContext) {
		    throw new Error("useFormField should be used within <FormField>")
		  }
		
		  const { id } = itemContext
		
		  return {
		    id,
		    name: fieldContext.name,
		    formItemId: `${id}-form-item`,
		    formDescriptionId: `${id}-form-item-description`,
		    formMessageId: `${id}-form-item-message`,
		    ...fieldState,
		  }
		}
		
		type FormItemContextValue = {
		  id: string
		}
		
		const FormItemContext = React.createContext<FormItemContextValue>(
		  {} as FormItemContextValue
		)
		
		const FormItem = React.forwardRef<
		  HTMLDivElement,
		  React.HTMLAttributes<HTMLDivElement>
		>(({ className, ...props }, ref) => {
		  const id = React.useId()
		
		  return (
		    <FormItemContext.Provider value={{ id }}>
		      <div ref={ref} className={cn("space-y-2", className)} {...props} />
		    </FormItemContext.Provider>
		  )
		})
		FormItem.displayName = "FormItem"
		
		const FormLabel = React.forwardRef<
		  React.ElementRef<typeof LabelPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
		>(({ className, ...props }, ref) => {
		  const { error, formItemId } = useFormField()
		
		  return (
		    <Label
		      ref={ref}
		      className={cn(error && "text-destructive", className)}
		      htmlFor={formItemId}
		      {...props}
		    />
		  )
		})
		FormLabel.displayName = "FormLabel"
		
		const FormControl = React.forwardRef<
		  React.ElementRef<typeof Slot>,
		  React.ComponentPropsWithoutRef<typeof Slot>
		>(({ ...props }, ref) => {
		  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
		
		  return (
		    <Slot
		      ref={ref}
		      id={formItemId}
		      aria-describedby={
		        !error
		          ? `${formDescriptionId}`
		          : `${formDescriptionId} ${formMessageId}`
		      }
		      aria-invalid={!!error}
		      {...props}
		    />
		  )
		})
		FormControl.displayName = "FormControl"
		
		const FormDescription = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLParagraphElement>
		>(({ className, ...props }, ref) => {
		  const { formDescriptionId } = useFormField()
		
		  return (
		    <p
		      ref={ref}
		      id={formDescriptionId}
		      className={cn("text-sm text-muted-foreground", className)}
		      {...props}
		    />
		  )
		})
		FormDescription.displayName = "FormDescription"
		
		const FormMessage = React.forwardRef<
		  HTMLParagraphElement,
		  React.HTMLAttributes<HTMLParagraphElement>
		>(({ className, children, ...props }, ref) => {
		  const { error, formMessageId } = useFormField()
		  const body = error ? String(error?.message) : children
		
		  if (!body) {
		    return null
		  }
		
		  return (
		    <p
		      ref={ref}
		      id={formMessageId}
		      className={cn("text-sm font-medium text-destructive", className)}
		      {...props}
		    >
		      {body}
		    </p>
		  )
		})
		FormMessage.displayName = "FormMessage"
		
		export {
		  useFormField,
		  Form,
		  FormItem,
		  FormLabel,
		  FormControl,
		  FormDescription,
		  FormMessage,
		  FormField,
		}]]></file>
	<file path='src\components\ui\hover-card.tsx'><![CDATA[
		import * as React from "react"
		import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
		
		import { cn } from "@/lib/utils"
		
		const HoverCard = HoverCardPrimitive.Root
		
		const HoverCardTrigger = HoverCardPrimitive.Trigger
		
		const HoverCardContent = React.forwardRef<
		  React.ElementRef<typeof HoverCardPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
		>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
		  <HoverCardPrimitive.Content
		    ref={ref}
		    align={align}
		    sideOffset={sideOffset}
		    className={cn(
		      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		      className
		    )}
		    {...props}
		  />
		))
		HoverCardContent.displayName = HoverCardPrimitive.Content.displayName
		
		export { HoverCard, HoverCardTrigger, HoverCardContent }]]></file>
	<file path='src\components\ui\input-otp.tsx'><![CDATA[
		import * as React from "react"
		import { OTPInput, OTPInputContext } from "input-otp"
		import { Dot } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const InputOTP = React.forwardRef<
		  React.ElementRef<typeof OTPInput>,
		  React.ComponentPropsWithoutRef<typeof OTPInput>
		>(({ className, containerClassName, ...props }, ref) => (
		  <OTPInput
		    ref={ref}
		    containerClassName={cn(
		      "flex items-center gap-2 has-[:disabled]:opacity-50",
		      containerClassName
		    )}
		    className={cn("disabled:cursor-not-allowed", className)}
		    {...props}
		  />
		))
		InputOTP.displayName = "InputOTP"
		
		const InputOTPGroup = React.forwardRef<
		  React.ElementRef<"div">,
		  React.ComponentPropsWithoutRef<"div">
		>(({ className, ...props }, ref) => (
		  <div ref={ref} className={cn("flex items-center", className)} {...props} />
		))
		InputOTPGroup.displayName = "InputOTPGroup"
		
		const InputOTPSlot = React.forwardRef<
		  React.ElementRef<"div">,
		  React.ComponentPropsWithoutRef<"div"> & { index: number }
		>(({ index, className, ...props }, ref) => {
		  const inputOTPContext = React.useContext(OTPInputContext)
		  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
		
		  return (
		    <div
		      ref={ref}
		      className={cn(
		        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
		        isActive && "z-10 ring-2 ring-ring ring-offset-background",
		        className
		      )}
		      {...props}
		    >
		      {char}
		      {hasFakeCaret && (
		        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
		          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
		        </div>
		      )}
		    </div>
		  )
		})
		InputOTPSlot.displayName = "InputOTPSlot"
		
		const InputOTPSeparator = React.forwardRef<
		  React.ElementRef<"div">,
		  React.ComponentPropsWithoutRef<"div">
		>(({ ...props }, ref) => (
		  <div ref={ref} role="separator" {...props}>
		    <Dot />
		  </div>
		))
		InputOTPSeparator.displayName = "InputOTPSeparator"
		
		export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }]]></file>
	<file path='src\components\ui\input.tsx'><![CDATA[
		import * as React from "react"
		
		import { cn } from "@/lib/utils"
		
		const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
		  ({ className, type, ...props }, ref) => {
		    return (
		      <input
		        type={type}
		        className={cn(
		          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
		          className
		        )}
		        ref={ref}
		        {...props}
		      />
		    )
		  }
		)
		Input.displayName = "Input"
		
		export { Input }]]></file>
	<file path='src\components\ui\label.tsx'><![CDATA[
		import * as React from "react"
		import * as LabelPrimitive from "@radix-ui/react-label"
		import { cva, type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		
		const labelVariants = cva(
		  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
		)
		
		const Label = React.forwardRef<
		  React.ElementRef<typeof LabelPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
		    VariantProps<typeof labelVariants>
		>(({ className, ...props }, ref) => (
		  <LabelPrimitive.Root
		    ref={ref}
		    className={cn(labelVariants(), className)}
		    {...props}
		  />
		))
		Label.displayName = LabelPrimitive.Root.displayName
		
		export { Label }]]></file>
	<file path='src\components\ui\Logo.tsx'><![CDATA[
		
		import React from 'react';
		
		interface LogoProps {
		  size?: 'sm' | 'md' | 'lg';
		  className?: string;
		}
		
		const Logo = ({ size = 'md', className = '' }: LogoProps) => {
		  const sizeClasses = {
		    sm: 'w-6 h-6',
		    md: 'w-8 h-8', 
		    lg: 'w-12 h-12'
		  };
		
		  const iconSizes = {
		    sm: '16px',
		    md: '20px',
		    lg: '28px'
		  };
		
		  return (
		    <div className={`${sizeClasses[size]} bg-black rounded-full flex items-center justify-center ${className}`}>
		      <svg 
		        xmlns="http://www.w3.org/2000/svg" 
		        height={iconSizes[size]} 
		        viewBox="0 -960 960 960" 
		        width={iconSizes[size]} 
		        fill="#FFFFFF"
		      >
		        <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
		      </svg>
		    </div>
		  );
		};
		
		export default Logo;]]></file>
	<file path='src\components\ui\menubar.tsx'><![CDATA[
		import * as React from "react"
		import * as MenubarPrimitive from "@radix-ui/react-menubar"
		import { Check, ChevronRight, Circle } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const MenubarMenu = MenubarPrimitive.Menu
		
		const MenubarGroup = MenubarPrimitive.Group
		
		const MenubarPortal = MenubarPrimitive.Portal
		
		const MenubarSub = MenubarPrimitive.Sub
		
		const MenubarRadioGroup = MenubarPrimitive.RadioGroup
		
		const Menubar = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
		>(({ className, ...props }, ref) => (
		  <MenubarPrimitive.Root
		    ref={ref}
		    className={cn(
		      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
		      className
		    )}
		    {...props}
		  />
		))
		Menubar.displayName = MenubarPrimitive.Root.displayName
		
		const MenubarTrigger = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Trigger>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
		>(({ className, ...props }, ref) => (
		  <MenubarPrimitive.Trigger
		    ref={ref}
		    className={cn(
		      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
		      className
		    )}
		    {...props}
		  />
		))
		MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName
		
		const MenubarSubTrigger = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
		    inset?: boolean
		  }
		>(({ className, inset, children, ...props }, ref) => (
		  <MenubarPrimitive.SubTrigger
		    ref={ref}
		    className={cn(
		      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  >
		    {children}
		    <ChevronRight className="ml-auto h-4 w-4" />
		  </MenubarPrimitive.SubTrigger>
		))
		MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName
		
		const MenubarSubContent = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.SubContent>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
		>(({ className, ...props }, ref) => (
		  <MenubarPrimitive.SubContent
		    ref={ref}
		    className={cn(
		      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		      className
		    )}
		    {...props}
		  />
		))
		MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName
		
		const MenubarContent = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
		>(
		  (
		    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
		    ref
		  ) => (
		    <MenubarPrimitive.Portal>
		      <MenubarPrimitive.Content
		        ref={ref}
		        align={align}
		        alignOffset={alignOffset}
		        sideOffset={sideOffset}
		        className={cn(
		          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		          className
		        )}
		        {...props}
		      />
		    </MenubarPrimitive.Portal>
		  )
		)
		MenubarContent.displayName = MenubarPrimitive.Content.displayName
		
		const MenubarItem = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <MenubarPrimitive.Item
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		MenubarItem.displayName = MenubarPrimitive.Item.displayName
		
		const MenubarCheckboxItem = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
		>(({ className, children, checked, ...props }, ref) => (
		  <MenubarPrimitive.CheckboxItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    checked={checked}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <MenubarPrimitive.ItemIndicator>
		        <Check className="h-4 w-4" />
		      </MenubarPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </MenubarPrimitive.CheckboxItem>
		))
		MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName
		
		const MenubarRadioItem = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
		>(({ className, children, ...props }, ref) => (
		  <MenubarPrimitive.RadioItem
		    ref={ref}
		    className={cn(
		      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <MenubarPrimitive.ItemIndicator>
		        <Circle className="h-2 w-2 fill-current" />
		      </MenubarPrimitive.ItemIndicator>
		    </span>
		    {children}
		  </MenubarPrimitive.RadioItem>
		))
		MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName
		
		const MenubarLabel = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Label>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
		    inset?: boolean
		  }
		>(({ className, inset, ...props }, ref) => (
		  <MenubarPrimitive.Label
		    ref={ref}
		    className={cn(
		      "px-2 py-1.5 text-sm font-semibold",
		      inset && "pl-8",
		      className
		    )}
		    {...props}
		  />
		))
		MenubarLabel.displayName = MenubarPrimitive.Label.displayName
		
		const MenubarSeparator = React.forwardRef<
		  React.ElementRef<typeof MenubarPrimitive.Separator>,
		  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
		>(({ className, ...props }, ref) => (
		  <MenubarPrimitive.Separator
		    ref={ref}
		    className={cn("-mx-1 my-1 h-px bg-muted", className)}
		    {...props}
		  />
		))
		MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName
		
		const MenubarShortcut = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLSpanElement>) => {
		  return (
		    <span
		      className={cn(
		        "ml-auto text-xs tracking-widest text-muted-foreground",
		        className
		      )}
		      {...props}
		    />
		  )
		}
		MenubarShortcut.displayname = "MenubarShortcut"
		
		export {
		  Menubar,
		  MenubarMenu,
		  MenubarTrigger,
		  MenubarContent,
		  MenubarItem,
		  MenubarSeparator,
		  MenubarLabel,
		  MenubarCheckboxItem,
		  MenubarRadioGroup,
		  MenubarRadioItem,
		  MenubarPortal,
		  MenubarSubContent,
		  MenubarSubTrigger,
		  MenubarGroup,
		  MenubarSub,
		  MenubarShortcut,
		}]]></file>
	<file path='src\components\ui\navigation-menu.tsx'><![CDATA[
		import * as React from "react"
		import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
		import { cva } from "class-variance-authority"
		import { ChevronDown } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const NavigationMenu = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
		>(({ className, children, ...props }, ref) => (
		  <NavigationMenuPrimitive.Root
		    ref={ref}
		    className={cn(
		      "relative z-10 flex max-w-max flex-1 items-center justify-center",
		      className
		    )}
		    {...props}
		  >
		    {children}
		    <NavigationMenuViewport />
		  </NavigationMenuPrimitive.Root>
		))
		NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName
		
		const NavigationMenuList = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.List>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
		>(({ className, ...props }, ref) => (
		  <NavigationMenuPrimitive.List
		    ref={ref}
		    className={cn(
		      "group flex flex-1 list-none items-center justify-center space-x-1",
		      className
		    )}
		    {...props}
		  />
		))
		NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName
		
		const NavigationMenuItem = NavigationMenuPrimitive.Item
		
		const navigationMenuTriggerStyle = cva(
		  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
		)
		
		const NavigationMenuTrigger = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
		>(({ className, children, ...props }, ref) => (
		  <NavigationMenuPrimitive.Trigger
		    ref={ref}
		    className={cn(navigationMenuTriggerStyle(), "group", className)}
		    {...props}
		  >
		    {children}{" "}
		    <ChevronDown
		      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
		      aria-hidden="true"
		    />
		  </NavigationMenuPrimitive.Trigger>
		))
		NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName
		
		const NavigationMenuContent = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
		>(({ className, ...props }, ref) => (
		  <NavigationMenuPrimitive.Content
		    ref={ref}
		    className={cn(
		      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
		      className
		    )}
		    {...props}
		  />
		))
		NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName
		
		const NavigationMenuLink = NavigationMenuPrimitive.Link
		
		const NavigationMenuViewport = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
		>(({ className, ...props }, ref) => (
		  <div className={cn("absolute left-0 top-full flex justify-center")}>
		    <NavigationMenuPrimitive.Viewport
		      className={cn(
		        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
		        className
		      )}
		      ref={ref}
		      {...props}
		    />
		  </div>
		))
		NavigationMenuViewport.displayName =
		  NavigationMenuPrimitive.Viewport.displayName
		
		const NavigationMenuIndicator = React.forwardRef<
		  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
		  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
		>(({ className, ...props }, ref) => (
		  <NavigationMenuPrimitive.Indicator
		    ref={ref}
		    className={cn(
		      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
		      className
		    )}
		    {...props}
		  >
		    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
		  </NavigationMenuPrimitive.Indicator>
		))
		NavigationMenuIndicator.displayName =
		  NavigationMenuPrimitive.Indicator.displayName
		
		export {
		  navigationMenuTriggerStyle,
		  NavigationMenu,
		  NavigationMenuList,
		  NavigationMenuItem,
		  NavigationMenuContent,
		  NavigationMenuTrigger,
		  NavigationMenuLink,
		  NavigationMenuIndicator,
		  NavigationMenuViewport,
		}]]></file>
	<file path='src\components\ui\pagination.tsx'><![CDATA[
		import * as React from "react"
		import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		import { ButtonProps, buttonVariants } from "@/components/ui/button"
		
		const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
		  <nav
		    role="navigation"
		    aria-label="pagination"
		    className={cn("mx-auto flex w-full justify-center", className)}
		    {...props}
		  />
		)
		Pagination.displayName = "Pagination"
		
		const PaginationContent = React.forwardRef<
		  HTMLUListElement,
		  React.ComponentProps<"ul">
		>(({ className, ...props }, ref) => (
		  <ul
		    ref={ref}
		    className={cn("flex flex-row items-center gap-1", className)}
		    {...props}
		  />
		))
		PaginationContent.displayName = "PaginationContent"
		
		const PaginationItem = React.forwardRef<
		  HTMLLIElement,
		  React.ComponentProps<"li">
		>(({ className, ...props }, ref) => (
		  <li ref={ref} className={cn("", className)} {...props} />
		))
		PaginationItem.displayName = "PaginationItem"
		
		type PaginationLinkProps = {
		  isActive?: boolean
		} & Pick<ButtonProps, "size"> &
		  React.ComponentProps<"a">
		
		const PaginationLink = ({
		  className,
		  isActive,
		  size = "icon",
		  ...props
		}: PaginationLinkProps) => (
		  <a
		    aria-current={isActive ? "page" : undefined}
		    className={cn(
		      buttonVariants({
		        variant: isActive ? "outline" : "ghost",
		        size,
		      }),
		      className
		    )}
		    {...props}
		  />
		)
		PaginationLink.displayName = "PaginationLink"
		
		const PaginationPrevious = ({
		  className,
		  ...props
		}: React.ComponentProps<typeof PaginationLink>) => (
		  <PaginationLink
		    aria-label="Go to previous page"
		    size="default"
		    className={cn("gap-1 pl-2.5", className)}
		    {...props}
		  >
		    <ChevronLeft className="h-4 w-4" />
		    <span>Previous</span>
		  </PaginationLink>
		)
		PaginationPrevious.displayName = "PaginationPrevious"
		
		const PaginationNext = ({
		  className,
		  ...props
		}: React.ComponentProps<typeof PaginationLink>) => (
		  <PaginationLink
		    aria-label="Go to next page"
		    size="default"
		    className={cn("gap-1 pr-2.5", className)}
		    {...props}
		  >
		    <span>Next</span>
		    <ChevronRight className="h-4 w-4" />
		  </PaginationLink>
		)
		PaginationNext.displayName = "PaginationNext"
		
		const PaginationEllipsis = ({
		  className,
		  ...props
		}: React.ComponentProps<"span">) => (
		  <span
		    aria-hidden
		    className={cn("flex h-9 w-9 items-center justify-center", className)}
		    {...props}
		  >
		    <MoreHorizontal className="h-4 w-4" />
		    <span className="sr-only">More pages</span>
		  </span>
		)
		PaginationEllipsis.displayName = "PaginationEllipsis"
		
		export {
		  Pagination,
		  PaginationContent,
		  PaginationEllipsis,
		  PaginationItem,
		  PaginationLink,
		  PaginationNext,
		  PaginationPrevious,
		}]]></file>
	<file path='src\components\ui\popover.tsx'><![CDATA[
		import * as React from "react"
		import * as PopoverPrimitive from "@radix-ui/react-popover"
		
		import { cn } from "@/lib/utils"
		
		const Popover = PopoverPrimitive.Root
		
		const PopoverTrigger = PopoverPrimitive.Trigger
		
		const PopoverContent = React.forwardRef<
		  React.ElementRef<typeof PopoverPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
		>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
		  <PopoverPrimitive.Portal>
		    <PopoverPrimitive.Content
		      ref={ref}
		      align={align}
		      sideOffset={sideOffset}
		      className={cn(
		        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		        className
		      )}
		      {...props}
		    />
		  </PopoverPrimitive.Portal>
		))
		PopoverContent.displayName = PopoverPrimitive.Content.displayName
		
		export { Popover, PopoverTrigger, PopoverContent }]]></file>
	<file path='src\components\ui\progress.tsx'><![CDATA[
		import * as React from "react"
		import * as ProgressPrimitive from "@radix-ui/react-progress"
		
		import { cn } from "@/lib/utils"
		
		const Progress = React.forwardRef<
		  React.ElementRef<typeof ProgressPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
		>(({ className, value, ...props }, ref) => (
		  <ProgressPrimitive.Root
		    ref={ref}
		    className={cn(
		      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
		      className
		    )}
		    {...props}
		  >
		    <ProgressPrimitive.Indicator
		      className="h-full w-full flex-1 bg-primary transition-all"
		      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
		    />
		  </ProgressPrimitive.Root>
		))
		Progress.displayName = ProgressPrimitive.Root.displayName
		
		export { Progress }]]></file>
	<file path='src\components\ui\radio-group.tsx'><![CDATA[
		import * as React from "react"
		import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
		import { Circle } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const RadioGroup = React.forwardRef<
		  React.ElementRef<typeof RadioGroupPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
		>(({ className, ...props }, ref) => {
		  return (
		    <RadioGroupPrimitive.Root
		      className={cn("grid gap-2", className)}
		      {...props}
		      ref={ref}
		    />
		  )
		})
		RadioGroup.displayName = RadioGroupPrimitive.Root.displayName
		
		const RadioGroupItem = React.forwardRef<
		  React.ElementRef<typeof RadioGroupPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
		>(({ className, ...props }, ref) => {
		  return (
		    <RadioGroupPrimitive.Item
		      ref={ref}
		      className={cn(
		        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
		        className
		      )}
		      {...props}
		    >
		      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
		        <Circle className="h-2.5 w-2.5 fill-current text-current" />
		      </RadioGroupPrimitive.Indicator>
		    </RadioGroupPrimitive.Item>
		  )
		})
		RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName
		
		export { RadioGroup, RadioGroupItem }]]></file>
	<file path='src\components\ui\resizable.tsx'><![CDATA[
		import { GripVertical } from "lucide-react"
		import * as ResizablePrimitive from "react-resizable-panels"
		
		import { cn } from "@/lib/utils"
		
		const ResizablePanelGroup = ({
		  className,
		  ...props
		}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
		  <ResizablePrimitive.PanelGroup
		    className={cn(
		      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
		      className
		    )}
		    {...props}
		  />
		)
		
		const ResizablePanel = ResizablePrimitive.Panel
		
		const ResizableHandle = ({
		  withHandle,
		  className,
		  ...props
		}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
		  withHandle?: boolean
		}) => (
		  <ResizablePrimitive.PanelResizeHandle
		    className={cn(
		      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
		      className
		    )}
		    {...props}
		  >
		    {withHandle && (
		      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
		        <GripVertical className="h-2.5 w-2.5" />
		      </div>
		    )}
		  </ResizablePrimitive.PanelResizeHandle>
		)
		
		export { ResizablePanelGroup, ResizablePanel, ResizableHandle }]]></file>
	<file path='src\components\ui\scroll-area.tsx'><![CDATA[
		import * as React from "react"
		import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
		
		import { cn } from "@/lib/utils"
		
		const ScrollArea = React.forwardRef<
		  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
		>(({ className, children, ...props }, ref) => (
		  <ScrollAreaPrimitive.Root
		    ref={ref}
		    className={cn("relative overflow-hidden", className)}
		    {...props}
		  >
		    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
		      {children}
		    </ScrollAreaPrimitive.Viewport>
		    <ScrollBar />
		    <ScrollAreaPrimitive.Corner />
		  </ScrollAreaPrimitive.Root>
		))
		ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
		
		const ScrollBar = React.forwardRef<
		  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
		  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
		>(({ className, orientation = "vertical", ...props }, ref) => (
		  <ScrollAreaPrimitive.ScrollAreaScrollbar
		    ref={ref}
		    orientation={orientation}
		    className={cn(
		      "flex touch-none select-none transition-colors",
		      orientation === "vertical" &&
		        "h-full w-2.5 border-l border-l-transparent p-[1px]",
		      orientation === "horizontal" &&
		        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
		      className
		    )}
		    {...props}
		  >
		    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
		  </ScrollAreaPrimitive.ScrollAreaScrollbar>
		))
		ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
		
		export { ScrollArea, ScrollBar }]]></file>
	<file path='src\components\ui\select.tsx'><![CDATA[
		import * as React from "react"
		import * as SelectPrimitive from "@radix-ui/react-select"
		import { Check, ChevronDown, ChevronUp } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const Select = SelectPrimitive.Root
		
		const SelectGroup = SelectPrimitive.Group
		
		const SelectValue = SelectPrimitive.Value
		
		const SelectTrigger = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.Trigger>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
		>(({ className, children, ...props }, ref) => (
		  <SelectPrimitive.Trigger
		    ref={ref}
		    className={cn(
		      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
		      className
		    )}
		    {...props}
		  >
		    {children}
		    <SelectPrimitive.Icon asChild>
		      <ChevronDown className="h-4 w-4 opacity-50" />
		    </SelectPrimitive.Icon>
		  </SelectPrimitive.Trigger>
		))
		SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
		
		const SelectScrollUpButton = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
		>(({ className, ...props }, ref) => (
		  <SelectPrimitive.ScrollUpButton
		    ref={ref}
		    className={cn(
		      "flex cursor-default items-center justify-center py-1",
		      className
		    )}
		    {...props}
		  >
		    <ChevronUp className="h-4 w-4" />
		  </SelectPrimitive.ScrollUpButton>
		))
		SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
		
		const SelectScrollDownButton = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
		>(({ className, ...props }, ref) => (
		  <SelectPrimitive.ScrollDownButton
		    ref={ref}
		    className={cn(
		      "flex cursor-default items-center justify-center py-1",
		      className
		    )}
		    {...props}
		  >
		    <ChevronDown className="h-4 w-4" />
		  </SelectPrimitive.ScrollDownButton>
		))
		SelectScrollDownButton.displayName =
		  SelectPrimitive.ScrollDownButton.displayName
		
		const SelectContent = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
		>(({ className, children, position = "popper", ...props }, ref) => (
		  <SelectPrimitive.Portal>
		    <SelectPrimitive.Content
		      ref={ref}
		      className={cn(
		        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		        position === "popper" &&
		          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
		        className
		      )}
		      position={position}
		      {...props}
		    >
		      <SelectScrollUpButton />
		      <SelectPrimitive.Viewport
		        className={cn(
		          "p-1",
		          position === "popper" &&
		            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
		        )}
		      >
		        {children}
		      </SelectPrimitive.Viewport>
		      <SelectScrollDownButton />
		    </SelectPrimitive.Content>
		  </SelectPrimitive.Portal>
		))
		SelectContent.displayName = SelectPrimitive.Content.displayName
		
		const SelectLabel = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.Label>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
		>(({ className, ...props }, ref) => (
		  <SelectPrimitive.Label
		    ref={ref}
		    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
		    {...props}
		  />
		))
		SelectLabel.displayName = SelectPrimitive.Label.displayName
		
		const SelectItem = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
		>(({ className, children, ...props }, ref) => (
		  <SelectPrimitive.Item
		    ref={ref}
		    className={cn(
		      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
		      className
		    )}
		    {...props}
		  >
		    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
		      <SelectPrimitive.ItemIndicator>
		        <Check className="h-4 w-4" />
		      </SelectPrimitive.ItemIndicator>
		    </span>
		
		    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
		  </SelectPrimitive.Item>
		))
		SelectItem.displayName = SelectPrimitive.Item.displayName
		
		const SelectSeparator = React.forwardRef<
		  React.ElementRef<typeof SelectPrimitive.Separator>,
		  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
		>(({ className, ...props }, ref) => (
		  <SelectPrimitive.Separator
		    ref={ref}
		    className={cn("-mx-1 my-1 h-px bg-muted", className)}
		    {...props}
		  />
		))
		SelectSeparator.displayName = SelectPrimitive.Separator.displayName
		
		export {
		  Select,
		  SelectGroup,
		  SelectValue,
		  SelectTrigger,
		  SelectContent,
		  SelectLabel,
		  SelectItem,
		  SelectSeparator,
		  SelectScrollUpButton,
		  SelectScrollDownButton,
		}]]></file>
	<file path='src\components\ui\separator.tsx'><![CDATA[
		import * as React from "react"
		import * as SeparatorPrimitive from "@radix-ui/react-separator"
		
		import { cn } from "@/lib/utils"
		
		const Separator = React.forwardRef<
		  React.ElementRef<typeof SeparatorPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
		>(
		  (
		    { className, orientation = "horizontal", decorative = true, ...props },
		    ref
		  ) => (
		    <SeparatorPrimitive.Root
		      ref={ref}
		      decorative={decorative}
		      orientation={orientation}
		      className={cn(
		        "shrink-0 bg-border",
		        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
		        className
		      )}
		      {...props}
		    />
		  )
		)
		Separator.displayName = SeparatorPrimitive.Root.displayName
		
		export { Separator }]]></file>
	<file path='src\components\ui\sheet.tsx'><![CDATA[
		import * as SheetPrimitive from "@radix-ui/react-dialog"
		import { cva, type VariantProps } from "class-variance-authority"
		import { X } from "lucide-react"
		import * as React from "react"
		
		import { cn } from "@/lib/utils"
		
		const Sheet = SheetPrimitive.Root
		
		const SheetTrigger = SheetPrimitive.Trigger
		
		const SheetClose = SheetPrimitive.Close
		
		const SheetPortal = SheetPrimitive.Portal
		
		const SheetOverlay = React.forwardRef<
		  React.ElementRef<typeof SheetPrimitive.Overlay>,
		  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
		>(({ className, ...props }, ref) => (
		  <SheetPrimitive.Overlay
		    className={cn(
		      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
		      className
		    )}
		    {...props}
		    ref={ref}
		  />
		))
		SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
		
		const sheetVariants = cva(
		  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
		  {
		    variants: {
		      side: {
		        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
		        bottom:
		          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
		        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
		        right:
		          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
		      },
		    },
		    defaultVariants: {
		      side: "right",
		    },
		  }
		)
		
		interface SheetContentProps
		  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
		  VariantProps<typeof sheetVariants> { }
		
		const SheetContent = React.forwardRef<
		  React.ElementRef<typeof SheetPrimitive.Content>,
		  SheetContentProps
		>(({ side = "right", className, children, ...props }, ref) => (
		  <SheetPortal>
		    <SheetOverlay />
		    <SheetPrimitive.Content
		      ref={ref}
		      className={cn(sheetVariants({ side }), className)}
		      {...props}
		    >
		      {children}
		      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
		        <X className="h-4 w-4" />
		        <span className="sr-only">Close</span>
		      </SheetPrimitive.Close>
		    </SheetPrimitive.Content>
		  </SheetPortal>
		))
		SheetContent.displayName = SheetPrimitive.Content.displayName
		
		const SheetHeader = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col space-y-2 text-center sm:text-left",
		      className
		    )}
		    {...props}
		  />
		)
		SheetHeader.displayName = "SheetHeader"
		
		const SheetFooter = ({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) => (
		  <div
		    className={cn(
		      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		      className
		    )}
		    {...props}
		  />
		)
		SheetFooter.displayName = "SheetFooter"
		
		const SheetTitle = React.forwardRef<
		  React.ElementRef<typeof SheetPrimitive.Title>,
		  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
		>(({ className, ...props }, ref) => (
		  <SheetPrimitive.Title
		    ref={ref}
		    className={cn("text-lg font-semibold text-foreground", className)}
		    {...props}
		  />
		))
		SheetTitle.displayName = SheetPrimitive.Title.displayName
		
		const SheetDescription = React.forwardRef<
		  React.ElementRef<typeof SheetPrimitive.Description>,
		  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
		>(({ className, ...props }, ref) => (
		  <SheetPrimitive.Description
		    ref={ref}
		    className={cn("text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		SheetDescription.displayName = SheetPrimitive.Description.displayName
		
		export {
		  Sheet, SheetClose,
		  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
		}]]></file>
	<file path='src\components\ui\sidebar.tsx'><![CDATA[
		import * as React from "react"
		import { Slot } from "@radix-ui/react-slot"
		import { VariantProps, cva } from "class-variance-authority"
		import { PanelLeft } from "lucide-react"
		
		import { useIsMobile } from "@/hooks/use-mobile"
		import { cn } from "@/lib/utils"
		import { Button } from "@/components/ui/button"
		import { Input } from "@/components/ui/input"
		import { Separator } from "@/components/ui/separator"
		import { Sheet, SheetContent } from "@/components/ui/sheet"
		import { Skeleton } from "@/components/ui/skeleton"
		import {
		  Tooltip,
		  TooltipContent,
		  TooltipProvider,
		  TooltipTrigger,
		} from "@/components/ui/tooltip"
		
		const SIDEBAR_COOKIE_NAME = "sidebar:state"
		const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
		const SIDEBAR_WIDTH = "16rem"
		const SIDEBAR_WIDTH_MOBILE = "18rem"
		const SIDEBAR_WIDTH_ICON = "3rem"
		const SIDEBAR_KEYBOARD_SHORTCUT = "b"
		
		type SidebarContext = {
		  state: "expanded" | "collapsed"
		  open: boolean
		  setOpen: (open: boolean) => void
		  openMobile: boolean
		  setOpenMobile: (open: boolean) => void
		  isMobile: boolean
		  toggleSidebar: () => void
		}
		
		const SidebarContext = React.createContext<SidebarContext | null>(null)
		
		function useSidebar() {
		  const context = React.useContext(SidebarContext)
		  if (!context) {
		    throw new Error("useSidebar must be used within a SidebarProvider.")
		  }
		
		  return context
		}
		
		const SidebarProvider = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> & {
		    defaultOpen?: boolean
		    open?: boolean
		    onOpenChange?: (open: boolean) => void
		  }
		>(
		  (
		    {
		      defaultOpen = true,
		      open: openProp,
		      onOpenChange: setOpenProp,
		      className,
		      style,
		      children,
		      ...props
		    },
		    ref
		  ) => {
		    const isMobile = useIsMobile()
		    const [openMobile, setOpenMobile] = React.useState(false)
		
		    // This is the internal state of the sidebar.
		    // We use openProp and setOpenProp for control from outside the component.
		    const [_open, _setOpen] = React.useState(defaultOpen)
		    const open = openProp ?? _open
		    const setOpen = React.useCallback(
		      (value: boolean | ((value: boolean) => boolean)) => {
		        const openState = typeof value === "function" ? value(open) : value
		        if (setOpenProp) {
		          setOpenProp(openState)
		        } else {
		          _setOpen(openState)
		        }
		
		        // This sets the cookie to keep the sidebar state.
		        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
		      },
		      [setOpenProp, open]
		    )
		
		    // Helper to toggle the sidebar.
		    const toggleSidebar = React.useCallback(() => {
		      return isMobile
		        ? setOpenMobile((open) => !open)
		        : setOpen((open) => !open)
		    }, [isMobile, setOpen, setOpenMobile])
		
		    // Adds a keyboard shortcut to toggle the sidebar.
		    React.useEffect(() => {
		      const handleKeyDown = (event: KeyboardEvent) => {
		        if (
		          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
		          (event.metaKey || event.ctrlKey)
		        ) {
		          event.preventDefault()
		          toggleSidebar()
		        }
		      }
		
		      window.addEventListener("keydown", handleKeyDown)
		      return () => window.removeEventListener("keydown", handleKeyDown)
		    }, [toggleSidebar])
		
		    // We add a state so that we can do data-state="expanded" or "collapsed".
		    // This makes it easier to style the sidebar with Tailwind classes.
		    const state = open ? "expanded" : "collapsed"
		
		    const contextValue = React.useMemo<SidebarContext>(
		      () => ({
		        state,
		        open,
		        setOpen,
		        isMobile,
		        openMobile,
		        setOpenMobile,
		        toggleSidebar,
		      }),
		      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
		    )
		
		    return (
		      <SidebarContext.Provider value={contextValue}>
		        <TooltipProvider delayDuration={0}>
		          <div
		            style={
		              {
		                "--sidebar-width": SIDEBAR_WIDTH,
		                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
		                ...style,
		              } as React.CSSProperties
		            }
		            className={cn(
		              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
		              className
		            )}
		            ref={ref}
		            {...props}
		          >
		            {children}
		          </div>
		        </TooltipProvider>
		      </SidebarContext.Provider>
		    )
		  }
		)
		SidebarProvider.displayName = "SidebarProvider"
		
		const Sidebar = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> & {
		    side?: "left" | "right"
		    variant?: "sidebar" | "floating" | "inset"
		    collapsible?: "offcanvas" | "icon" | "none"
		  }
		>(
		  (
		    {
		      side = "left",
		      variant = "sidebar",
		      collapsible = "offcanvas",
		      className,
		      children,
		      ...props
		    },
		    ref
		  ) => {
		    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
		
		    if (collapsible === "none") {
		      return (
		        <div
		          className={cn(
		            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
		            className
		          )}
		          ref={ref}
		          {...props}
		        >
		          {children}
		        </div>
		      )
		    }
		
		    if (isMobile) {
		      return (
		        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
		          <SheetContent
		            data-sidebar="sidebar"
		            data-mobile="true"
		            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
		            style={
		              {
		                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
		              } as React.CSSProperties
		            }
		            side={side}
		          >
		            <div className="flex h-full w-full flex-col">{children}</div>
		          </SheetContent>
		        </Sheet>
		      )
		    }
		
		    return (
		      <div
		        ref={ref}
		        className="group peer hidden md:block text-sidebar-foreground"
		        data-state={state}
		        data-collapsible={state === "collapsed" ? collapsible : ""}
		        data-variant={variant}
		        data-side={side}
		      >
		        {/* This is what handles the sidebar gap on desktop */}
		        <div
		          className={cn(
		            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
		            "group-data-[collapsible=offcanvas]:w-0",
		            "group-data-[side=right]:rotate-180",
		            variant === "floating" || variant === "inset"
		              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
		              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
		          )}
		        />
		        <div
		          className={cn(
		            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
		            side === "left"
		              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
		              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
		            // Adjust the padding for floating and inset variants.
		            variant === "floating" || variant === "inset"
		              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
		              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
		            className
		          )}
		          {...props}
		        >
		          <div
		            data-sidebar="sidebar"
		            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
		          >
		            {children}
		          </div>
		        </div>
		      </div>
		    )
		  }
		)
		Sidebar.displayName = "Sidebar"
		
		const SidebarTrigger = React.forwardRef<
		  React.ElementRef<typeof Button>,
		  React.ComponentProps<typeof Button>
		>(({ className, onClick, ...props }, ref) => {
		  const { toggleSidebar } = useSidebar()
		
		  return (
		    <Button
		      ref={ref}
		      data-sidebar="trigger"
		      variant="ghost"
		      size="icon"
		      className={cn("h-7 w-7", className)}
		      onClick={(event) => {
		        onClick?.(event)
		        toggleSidebar()
		      }}
		      {...props}
		    >
		      <PanelLeft />
		      <span className="sr-only">Toggle Sidebar</span>
		    </Button>
		  )
		})
		SidebarTrigger.displayName = "SidebarTrigger"
		
		const SidebarRail = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<"button">
		>(({ className, ...props }, ref) => {
		  const { toggleSidebar } = useSidebar()
		
		  return (
		    <button
		      ref={ref}
		      data-sidebar="rail"
		      aria-label="Toggle Sidebar"
		      tabIndex={-1}
		      onClick={toggleSidebar}
		      title="Toggle Sidebar"
		      className={cn(
		        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
		        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
		        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
		        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
		        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
		        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarRail.displayName = "SidebarRail"
		
		const SidebarInset = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"main">
		>(({ className, ...props }, ref) => {
		  return (
		    <main
		      ref={ref}
		      className={cn(
		        "relative flex min-h-svh flex-1 flex-col bg-background",
		        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarInset.displayName = "SidebarInset"
		
		const SidebarInput = React.forwardRef<
		  React.ElementRef<typeof Input>,
		  React.ComponentProps<typeof Input>
		>(({ className, ...props }, ref) => {
		  return (
		    <Input
		      ref={ref}
		      data-sidebar="input"
		      className={cn(
		        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarInput.displayName = "SidebarInput"
		
		const SidebarHeader = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => {
		  return (
		    <div
		      ref={ref}
		      data-sidebar="header"
		      className={cn("flex flex-col gap-2 p-2", className)}
		      {...props}
		    />
		  )
		})
		SidebarHeader.displayName = "SidebarHeader"
		
		const SidebarFooter = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => {
		  return (
		    <div
		      ref={ref}
		      data-sidebar="footer"
		      className={cn("flex flex-col gap-2 p-2", className)}
		      {...props}
		    />
		  )
		})
		SidebarFooter.displayName = "SidebarFooter"
		
		const SidebarSeparator = React.forwardRef<
		  React.ElementRef<typeof Separator>,
		  React.ComponentProps<typeof Separator>
		>(({ className, ...props }, ref) => {
		  return (
		    <Separator
		      ref={ref}
		      data-sidebar="separator"
		      className={cn("mx-2 w-auto bg-sidebar-border", className)}
		      {...props}
		    />
		  )
		})
		SidebarSeparator.displayName = "SidebarSeparator"
		
		const SidebarContent = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => {
		  return (
		    <div
		      ref={ref}
		      data-sidebar="content"
		      className={cn(
		        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarContent.displayName = "SidebarContent"
		
		const SidebarGroup = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => {
		  return (
		    <div
		      ref={ref}
		      data-sidebar="group"
		      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
		      {...props}
		    />
		  )
		})
		SidebarGroup.displayName = "SidebarGroup"
		
		const SidebarGroupLabel = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> & { asChild?: boolean }
		>(({ className, asChild = false, ...props }, ref) => {
		  const Comp = asChild ? Slot : "div"
		
		  return (
		    <Comp
		      ref={ref}
		      data-sidebar="group-label"
		      className={cn(
		        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
		        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarGroupLabel.displayName = "SidebarGroupLabel"
		
		const SidebarGroupAction = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<"button"> & { asChild?: boolean }
		>(({ className, asChild = false, ...props }, ref) => {
		  const Comp = asChild ? Slot : "button"
		
		  return (
		    <Comp
		      ref={ref}
		      data-sidebar="group-action"
		      className={cn(
		        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
		        // Increases the hit area of the button on mobile.
		        "after:absolute after:-inset-2 after:md:hidden",
		        "group-data-[collapsible=icon]:hidden",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarGroupAction.displayName = "SidebarGroupAction"
		
		const SidebarGroupContent = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    data-sidebar="group-content"
		    className={cn("w-full text-sm", className)}
		    {...props}
		  />
		))
		SidebarGroupContent.displayName = "SidebarGroupContent"
		
		const SidebarMenu = React.forwardRef<
		  HTMLUListElement,
		  React.ComponentProps<"ul">
		>(({ className, ...props }, ref) => (
		  <ul
		    ref={ref}
		    data-sidebar="menu"
		    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
		    {...props}
		  />
		))
		SidebarMenu.displayName = "SidebarMenu"
		
		const SidebarMenuItem = React.forwardRef<
		  HTMLLIElement,
		  React.ComponentProps<"li">
		>(({ className, ...props }, ref) => (
		  <li
		    ref={ref}
		    data-sidebar="menu-item"
		    className={cn("group/menu-item relative", className)}
		    {...props}
		  />
		))
		SidebarMenuItem.displayName = "SidebarMenuItem"
		
		const sidebarMenuButtonVariants = cva(
		  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
		  {
		    variants: {
		      variant: {
		        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
		        outline:
		          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
		      },
		      size: {
		        default: "h-8 text-sm",
		        sm: "h-7 text-xs",
		        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		      size: "default",
		    },
		  }
		)
		
		const SidebarMenuButton = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<"button"> & {
		    asChild?: boolean
		    isActive?: boolean
		    tooltip?: string | React.ComponentProps<typeof TooltipContent>
		  } & VariantProps<typeof sidebarMenuButtonVariants>
		>(
		  (
		    {
		      asChild = false,
		      isActive = false,
		      variant = "default",
		      size = "default",
		      tooltip,
		      className,
		      ...props
		    },
		    ref
		  ) => {
		    const Comp = asChild ? Slot : "button"
		    const { isMobile, state } = useSidebar()
		
		    const button = (
		      <Comp
		        ref={ref}
		        data-sidebar="menu-button"
		        data-size={size}
		        data-active={isActive}
		        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
		        {...props}
		      />
		    )
		
		    if (!tooltip) {
		      return button
		    }
		
		    if (typeof tooltip === "string") {
		      tooltip = {
		        children: tooltip,
		      }
		    }
		
		    return (
		      <Tooltip>
		        <TooltipTrigger asChild>{button}</TooltipTrigger>
		        <TooltipContent
		          side="right"
		          align="center"
		          hidden={state !== "collapsed" || isMobile}
		          {...tooltip}
		        />
		      </Tooltip>
		    )
		  }
		)
		SidebarMenuButton.displayName = "SidebarMenuButton"
		
		const SidebarMenuAction = React.forwardRef<
		  HTMLButtonElement,
		  React.ComponentProps<"button"> & {
		    asChild?: boolean
		    showOnHover?: boolean
		  }
		>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
		  const Comp = asChild ? Slot : "button"
		
		  return (
		    <Comp
		      ref={ref}
		      data-sidebar="menu-action"
		      className={cn(
		        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
		        // Increases the hit area of the button on mobile.
		        "after:absolute after:-inset-2 after:md:hidden",
		        "peer-data-[size=sm]/menu-button:top-1",
		        "peer-data-[size=default]/menu-button:top-1.5",
		        "peer-data-[size=lg]/menu-button:top-2.5",
		        "group-data-[collapsible=icon]:hidden",
		        showOnHover &&
		          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarMenuAction.displayName = "SidebarMenuAction"
		
		const SidebarMenuBadge = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div">
		>(({ className, ...props }, ref) => (
		  <div
		    ref={ref}
		    data-sidebar="menu-badge"
		    className={cn(
		      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
		      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
		      "peer-data-[size=sm]/menu-button:top-1",
		      "peer-data-[size=default]/menu-button:top-1.5",
		      "peer-data-[size=lg]/menu-button:top-2.5",
		      "group-data-[collapsible=icon]:hidden",
		      className
		    )}
		    {...props}
		  />
		))
		SidebarMenuBadge.displayName = "SidebarMenuBadge"
		
		const SidebarMenuSkeleton = React.forwardRef<
		  HTMLDivElement,
		  React.ComponentProps<"div"> & {
		    showIcon?: boolean
		  }
		>(({ className, showIcon = false, ...props }, ref) => {
		  // Random width between 50 to 90%.
		  const width = React.useMemo(() => {
		    return `${Math.floor(Math.random() * 40) + 50}%`
		  }, [])
		
		  return (
		    <div
		      ref={ref}
		      data-sidebar="menu-skeleton"
		      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
		      {...props}
		    >
		      {showIcon && (
		        <Skeleton
		          className="size-4 rounded-md"
		          data-sidebar="menu-skeleton-icon"
		        />
		      )}
		      <Skeleton
		        className="h-4 flex-1 max-w-[--skeleton-width]"
		        data-sidebar="menu-skeleton-text"
		        style={
		          {
		            "--skeleton-width": width,
		          } as React.CSSProperties
		        }
		      />
		    </div>
		  )
		})
		SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"
		
		const SidebarMenuSub = React.forwardRef<
		  HTMLUListElement,
		  React.ComponentProps<"ul">
		>(({ className, ...props }, ref) => (
		  <ul
		    ref={ref}
		    data-sidebar="menu-sub"
		    className={cn(
		      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
		      "group-data-[collapsible=icon]:hidden",
		      className
		    )}
		    {...props}
		  />
		))
		SidebarMenuSub.displayName = "SidebarMenuSub"
		
		const SidebarMenuSubItem = React.forwardRef<
		  HTMLLIElement,
		  React.ComponentProps<"li">
		>(({ ...props }, ref) => <li ref={ref} {...props} />)
		SidebarMenuSubItem.displayName = "SidebarMenuSubItem"
		
		const SidebarMenuSubButton = React.forwardRef<
		  HTMLAnchorElement,
		  React.ComponentProps<"a"> & {
		    asChild?: boolean
		    size?: "sm" | "md"
		    isActive?: boolean
		  }
		>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
		  const Comp = asChild ? Slot : "a"
		
		  return (
		    <Comp
		      ref={ref}
		      data-sidebar="menu-sub-button"
		      data-size={size}
		      data-active={isActive}
		      className={cn(
		        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
		        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
		        size === "sm" && "text-xs",
		        size === "md" && "text-sm",
		        "group-data-[collapsible=icon]:hidden",
		        className
		      )}
		      {...props}
		    />
		  )
		})
		SidebarMenuSubButton.displayName = "SidebarMenuSubButton"
		
		export {
		  Sidebar,
		  SidebarContent,
		  SidebarFooter,
		  SidebarGroup,
		  SidebarGroupAction,
		  SidebarGroupContent,
		  SidebarGroupLabel,
		  SidebarHeader,
		  SidebarInput,
		  SidebarInset,
		  SidebarMenu,
		  SidebarMenuAction,
		  SidebarMenuBadge,
		  SidebarMenuButton,
		  SidebarMenuItem,
		  SidebarMenuSkeleton,
		  SidebarMenuSub,
		  SidebarMenuSubButton,
		  SidebarMenuSubItem,
		  SidebarProvider,
		  SidebarRail,
		  SidebarSeparator,
		  SidebarTrigger,
		  useSidebar,
		}]]></file>
	<file path='src\components\ui\skeleton.tsx'><![CDATA[
		import { cn } from "@/lib/utils"
		
		function Skeleton({
		  className,
		  ...props
		}: React.HTMLAttributes<HTMLDivElement>) {
		  return (
		    <div
		      className={cn("animate-pulse rounded-md bg-muted", className)}
		      {...props}
		    />
		  )
		}
		
		export { Skeleton }]]></file>
	<file path='src\components\ui\slider.tsx'><![CDATA[
		
		import * as React from "react"
		import * as SliderPrimitive from "@radix-ui/react-slider"
		
		import { cn } from "@/lib/utils"
		
		const Slider = React.forwardRef<
		  React.ElementRef<typeof SliderPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
		>(({ className, ...props }, ref) => (
		  <SliderPrimitive.Root
		    ref={ref}
		    className={cn(
		      "relative flex w-full touch-none select-none items-center",
		      className
		    )}
		    {...props}
		  >
		    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
		      <SliderPrimitive.Range className="absolute h-full bg-primary" />
		    </SliderPrimitive.Track>
		    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
		  </SliderPrimitive.Root>
		))
		Slider.displayName = SliderPrimitive.Root.displayName
		
		export { Slider }]]></file>
	<file path='src\components\ui\sonner.tsx'><![CDATA[
		import { useTheme } from "next-themes"
		import { Toaster as Sonner, toast } from "sonner"
		
		type ToasterProps = React.ComponentProps<typeof Sonner>
		
		const Toaster = ({ ...props }: ToasterProps) => {
		  const { theme = "system" } = useTheme()
		
		  return (
		    <Sonner
		      theme={theme as ToasterProps["theme"]}
		      className="toaster group"
		      toastOptions={{
		        classNames: {
		          toast:
		            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
		          description: "group-[.toast]:text-muted-foreground",
		          actionButton:
		            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
		          cancelButton:
		            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
		        },
		      }}
		      {...props}
		    />
		  )
		}
		
		export { Toaster, toast }]]></file>
	<file path='src\components\ui\switch.tsx'><![CDATA[
		import * as React from "react"
		import * as SwitchPrimitives from "@radix-ui/react-switch"
		
		import { cn } from "@/lib/utils"
		
		const Switch = React.forwardRef<
		  React.ElementRef<typeof SwitchPrimitives.Root>,
		  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
		>(({ className, ...props }, ref) => (
		  <SwitchPrimitives.Root
		    className={cn(
		      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
		      className
		    )}
		    {...props}
		    ref={ref}
		  >
		    <SwitchPrimitives.Thumb
		      className={cn(
		        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
		      )}
		    />
		  </SwitchPrimitives.Root>
		))
		Switch.displayName = SwitchPrimitives.Root.displayName
		
		export { Switch }]]></file>
	<file path='src\components\ui\table.tsx'><![CDATA[
		import * as React from "react"
		
		import { cn } from "@/lib/utils"
		
		const Table = React.forwardRef<
		  HTMLTableElement,
		  React.HTMLAttributes<HTMLTableElement>
		>(({ className, ...props }, ref) => (
		  <div className="relative w-full overflow-auto">
		    <table
		      ref={ref}
		      className={cn("w-full caption-bottom text-sm", className)}
		      {...props}
		    />
		  </div>
		))
		Table.displayName = "Table"
		
		const TableHeader = React.forwardRef<
		  HTMLTableSectionElement,
		  React.HTMLAttributes<HTMLTableSectionElement>
		>(({ className, ...props }, ref) => (
		  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
		))
		TableHeader.displayName = "TableHeader"
		
		const TableBody = React.forwardRef<
		  HTMLTableSectionElement,
		  React.HTMLAttributes<HTMLTableSectionElement>
		>(({ className, ...props }, ref) => (
		  <tbody
		    ref={ref}
		    className={cn("[&_tr:last-child]:border-0", className)}
		    {...props}
		  />
		))
		TableBody.displayName = "TableBody"
		
		const TableFooter = React.forwardRef<
		  HTMLTableSectionElement,
		  React.HTMLAttributes<HTMLTableSectionElement>
		>(({ className, ...props }, ref) => (
		  <tfoot
		    ref={ref}
		    className={cn(
		      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
		      className
		    )}
		    {...props}
		  />
		))
		TableFooter.displayName = "TableFooter"
		
		const TableRow = React.forwardRef<
		  HTMLTableRowElement,
		  React.HTMLAttributes<HTMLTableRowElement>
		>(({ className, ...props }, ref) => (
		  <tr
		    ref={ref}
		    className={cn(
		      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
		      className
		    )}
		    {...props}
		  />
		))
		TableRow.displayName = "TableRow"
		
		const TableHead = React.forwardRef<
		  HTMLTableCellElement,
		  React.ThHTMLAttributes<HTMLTableCellElement>
		>(({ className, ...props }, ref) => (
		  <th
		    ref={ref}
		    className={cn(
		      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
		      className
		    )}
		    {...props}
		  />
		))
		TableHead.displayName = "TableHead"
		
		const TableCell = React.forwardRef<
		  HTMLTableCellElement,
		  React.TdHTMLAttributes<HTMLTableCellElement>
		>(({ className, ...props }, ref) => (
		  <td
		    ref={ref}
		    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
		    {...props}
		  />
		))
		TableCell.displayName = "TableCell"
		
		const TableCaption = React.forwardRef<
		  HTMLTableCaptionElement,
		  React.HTMLAttributes<HTMLTableCaptionElement>
		>(({ className, ...props }, ref) => (
		  <caption
		    ref={ref}
		    className={cn("mt-4 text-sm text-muted-foreground", className)}
		    {...props}
		  />
		))
		TableCaption.displayName = "TableCaption"
		
		export {
		  Table,
		  TableHeader,
		  TableBody,
		  TableFooter,
		  TableHead,
		  TableRow,
		  TableCell,
		  TableCaption,
		}]]></file>
	<file path='src\components\ui\tabs.tsx'><![CDATA[
		import * as React from "react"
		import * as TabsPrimitive from "@radix-ui/react-tabs"
		
		import { cn } from "@/lib/utils"
		
		const Tabs = TabsPrimitive.Root
		
		const TabsList = React.forwardRef<
		  React.ElementRef<typeof TabsPrimitive.List>,
		  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
		>(({ className, ...props }, ref) => (
		  <TabsPrimitive.List
		    ref={ref}
		    className={cn(
		      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
		      className
		    )}
		    {...props}
		  />
		))
		TabsList.displayName = TabsPrimitive.List.displayName
		
		const TabsTrigger = React.forwardRef<
		  React.ElementRef<typeof TabsPrimitive.Trigger>,
		  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
		>(({ className, ...props }, ref) => (
		  <TabsPrimitive.Trigger
		    ref={ref}
		    className={cn(
		      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
		      className
		    )}
		    {...props}
		  />
		))
		TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
		
		const TabsContent = React.forwardRef<
		  React.ElementRef<typeof TabsPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
		>(({ className, ...props }, ref) => (
		  <TabsPrimitive.Content
		    ref={ref}
		    className={cn(
		      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
		      className
		    )}
		    {...props}
		  />
		))
		TabsContent.displayName = TabsPrimitive.Content.displayName
		
		export { Tabs, TabsList, TabsTrigger, TabsContent }]]></file>
	<file path='src\components\ui\textarea.tsx'><![CDATA[
		import * as React from "react"
		
		import { cn } from "@/lib/utils"
		
		export interface TextareaProps
		  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
		
		const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
		  ({ className, ...props }, ref) => {
		    return (
		      <textarea
		        className={cn(
		          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
		          className
		        )}
		        ref={ref}
		        {...props}
		      />
		    )
		  }
		)
		Textarea.displayName = "Textarea"
		
		export { Textarea }]]></file>
	<file path='src\components\ui\toast.tsx'><![CDATA[
		import * as React from "react"
		import * as ToastPrimitives from "@radix-ui/react-toast"
		import { cva, type VariantProps } from "class-variance-authority"
		import { X } from "lucide-react"
		
		import { cn } from "@/lib/utils"
		
		const ToastProvider = ToastPrimitives.Provider
		
		const ToastViewport = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Viewport>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
		>(({ className, ...props }, ref) => (
		  <ToastPrimitives.Viewport
		    ref={ref}
		    className={cn(
		      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
		      className
		    )}
		    {...props}
		  />
		))
		ToastViewport.displayName = ToastPrimitives.Viewport.displayName
		
		const toastVariants = cva(
		  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
		  {
		    variants: {
		      variant: {
		        default: "border bg-background text-foreground",
		        destructive:
		          "destructive group border-destructive bg-destructive text-destructive-foreground",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		    },
		  }
		)
		
		const Toast = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Root>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
		    VariantProps<typeof toastVariants>
		>(({ className, variant, ...props }, ref) => {
		  return (
		    <ToastPrimitives.Root
		      ref={ref}
		      className={cn(toastVariants({ variant }), className)}
		      {...props}
		    />
		  )
		})
		Toast.displayName = ToastPrimitives.Root.displayName
		
		const ToastAction = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Action>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
		>(({ className, ...props }, ref) => (
		  <ToastPrimitives.Action
		    ref={ref}
		    className={cn(
		      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
		      className
		    )}
		    {...props}
		  />
		))
		ToastAction.displayName = ToastPrimitives.Action.displayName
		
		const ToastClose = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Close>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
		>(({ className, ...props }, ref) => (
		  <ToastPrimitives.Close
		    ref={ref}
		    className={cn(
		      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
		      className
		    )}
		    toast-close=""
		    {...props}
		  >
		    <X className="h-4 w-4" />
		  </ToastPrimitives.Close>
		))
		ToastClose.displayName = ToastPrimitives.Close.displayName
		
		const ToastTitle = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Title>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
		>(({ className, ...props }, ref) => (
		  <ToastPrimitives.Title
		    ref={ref}
		    className={cn("text-sm font-semibold", className)}
		    {...props}
		  />
		))
		ToastTitle.displayName = ToastPrimitives.Title.displayName
		
		const ToastDescription = React.forwardRef<
		  React.ElementRef<typeof ToastPrimitives.Description>,
		  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
		>(({ className, ...props }, ref) => (
		  <ToastPrimitives.Description
		    ref={ref}
		    className={cn("text-sm opacity-90", className)}
		    {...props}
		  />
		))
		ToastDescription.displayName = ToastPrimitives.Description.displayName
		
		type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
		
		type ToastActionElement = React.ReactElement<typeof ToastAction>
		
		export {
		  type ToastProps,
		  type ToastActionElement,
		  ToastProvider,
		  ToastViewport,
		  Toast,
		  ToastTitle,
		  ToastDescription,
		  ToastClose,
		  ToastAction,
		}]]></file>
	<file path='src\components\ui\toaster.tsx'><![CDATA[
		import { useToast } from "@/hooks/use-toast"
		import {
		  Toast,
		  ToastClose,
		  ToastDescription,
		  ToastProvider,
		  ToastTitle,
		  ToastViewport,
		} from "@/components/ui/toast"
		
		export function Toaster() {
		  const { toasts } = useToast()
		
		  return (
		    <ToastProvider>
		      {toasts.map(function ({ id, title, description, action, ...props }) {
		        return (
		          <Toast key={id} {...props}>
		            <div className="grid gap-1">
		              {title && <ToastTitle>{title}</ToastTitle>}
		              {description && (
		                <ToastDescription>{description}</ToastDescription>
		              )}
		            </div>
		            {action}
		            <ToastClose />
		          </Toast>
		        )
		      })}
		      <ToastViewport />
		    </ToastProvider>
		  )
		}]]></file>
	<file path='src\components\ui\toggle-group.tsx'><![CDATA[
		import * as React from "react"
		import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
		import { type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		import { toggleVariants } from "@/components/ui/toggle"
		
		const ToggleGroupContext = React.createContext<
		  VariantProps<typeof toggleVariants>
		>({
		  size: "default",
		  variant: "default",
		})
		
		const ToggleGroup = React.forwardRef<
		  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
		    VariantProps<typeof toggleVariants>
		>(({ className, variant, size, children, ...props }, ref) => (
		  <ToggleGroupPrimitive.Root
		    ref={ref}
		    className={cn("flex items-center justify-center gap-1", className)}
		    {...props}
		  >
		    <ToggleGroupContext.Provider value={{ variant, size }}>
		      {children}
		    </ToggleGroupContext.Provider>
		  </ToggleGroupPrimitive.Root>
		))
		
		ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName
		
		const ToggleGroupItem = React.forwardRef<
		  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
		  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
		    VariantProps<typeof toggleVariants>
		>(({ className, children, variant, size, ...props }, ref) => {
		  const context = React.useContext(ToggleGroupContext)
		
		  return (
		    <ToggleGroupPrimitive.Item
		      ref={ref}
		      className={cn(
		        toggleVariants({
		          variant: context.variant || variant,
		          size: context.size || size,
		        }),
		        className
		      )}
		      {...props}
		    >
		      {children}
		    </ToggleGroupPrimitive.Item>
		  )
		})
		
		ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName
		
		export { ToggleGroup, ToggleGroupItem }]]></file>
	<file path='src\components\ui\toggle.tsx'><![CDATA[
		import * as React from "react"
		import * as TogglePrimitive from "@radix-ui/react-toggle"
		import { cva, type VariantProps } from "class-variance-authority"
		
		import { cn } from "@/lib/utils"
		
		const toggleVariants = cva(
		  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
		  {
		    variants: {
		      variant: {
		        default: "bg-transparent",
		        outline:
		          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
		      },
		      size: {
		        default: "h-10 px-3",
		        sm: "h-9 px-2.5",
		        lg: "h-11 px-5",
		      },
		    },
		    defaultVariants: {
		      variant: "default",
		      size: "default",
		    },
		  }
		)
		
		const Toggle = React.forwardRef<
		  React.ElementRef<typeof TogglePrimitive.Root>,
		  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
		    VariantProps<typeof toggleVariants>
		>(({ className, variant, size, ...props }, ref) => (
		  <TogglePrimitive.Root
		    ref={ref}
		    className={cn(toggleVariants({ variant, size, className }))}
		    {...props}
		  />
		))
		
		Toggle.displayName = TogglePrimitive.Root.displayName
		
		export { Toggle, toggleVariants }]]></file>
	<file path='src\components\ui\tooltip.tsx'><![CDATA[
		import * as React from "react"
		import * as TooltipPrimitive from "@radix-ui/react-tooltip"
		
		import { cn } from "@/lib/utils"
		
		const TooltipProvider = TooltipPrimitive.Provider
		
		const Tooltip = TooltipPrimitive.Root
		
		const TooltipTrigger = TooltipPrimitive.Trigger
		
		const TooltipContent = React.forwardRef<
		  React.ElementRef<typeof TooltipPrimitive.Content>,
		  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
		>(({ className, sideOffset = 4, ...props }, ref) => (
		  <TooltipPrimitive.Content
		    ref={ref}
		    sideOffset={sideOffset}
		    className={cn(
		      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
		      className
		    )}
		    {...props}
		  />
		))
		TooltipContent.displayName = TooltipPrimitive.Content.displayName
		
		export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }]]></file>
	<file path='src\components\ui\use-toast.ts'>
		import { useToast, toast } from "@/hooks/use-toast";
		
		export { useToast, toast };</file>
	<file path='src\contexts\AuthContext.tsx'><![CDATA[
		
		import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
		import { User, Session } from '@supabase/supabase-js';
		import { supabase } from '@/integrations/supabase/client';
		
		interface AuthContextType {
		  user: User | null;
		  session: Session | null;
		  loading: boolean;
		  error: string | null;
		  isAuthenticated: boolean;
		  signOut: () => Promise<void>;
		}
		
		const AuthContext = createContext<AuthContextType | undefined>(undefined);
		
		export const useAuth = () => {
		  const context = useContext(AuthContext);
		  if (context === undefined) {
		    throw new Error('useAuth must be used within an AuthProvider');
		  }
		  return context;
		};
		
		interface AuthProviderProps {
		  children: ReactNode;
		}
		
		export const AuthProvider = ({ children }: AuthProviderProps) => {
		  const [user, setUser] = useState<User | null>(null);
		  const [session, setSession] = useState<Session | null>(null);
		  const [loading, setLoading] = useState(true);
		  const [error, setError] = useState<string | null>(null);
		
		  const updateAuthState = (newSession: Session | null) => {
		    console.log('AuthContext: Updating auth state:', newSession?.user?.email || 'No session');
		    setSession(newSession);
		    setUser(newSession?.user ?? null);
		    
		    // Clear any previous errors on successful auth
		    if (newSession && error) {
		      setError(null);
		    }
		  };
		
		  const clearAuthState = () => {
		    console.log('AuthContext: Clearing auth state');
		    setSession(null);
		    setUser(null);
		    setError(null);
		  };
		
		  const signOut = async () => {
		    try {
		      console.log('AuthContext: Starting logout process...');
		      
		      // Clear local state immediately to provide instant feedback
		      clearAuthState();
		      
		      // Attempt to sign out from server
		      const { error } = await supabase.auth.signOut();
		      
		      if (error) {
		        console.log('AuthContext: Logout error:', error);
		        
		        // If session is invalid on server, we've already cleared local state
		        if (error.message.includes('session_not_found') || 
		            error.message.includes('Session not found') ||
		            error.status === 403) {
		          console.log('AuthContext: Session already invalid on server');
		          return;
		        }
		        
		        // For other errors, still ensure local session is cleared
		        await supabase.auth.signOut({ scope: 'local' });
		        return;
		      }
		      
		      console.log('AuthContext: Logout successful');
		    } catch (err) {
		      console.error('AuthContext: Unexpected logout error:', err);
		      
		      // Even if there's an error, try to clear local session
		      try {
		        await supabase.auth.signOut({ scope: 'local' });
		      } catch (localError) {
		        console.error('AuthContext: Failed to clear local session:', localError);
		      }
		    }
		  };
		
		  useEffect(() => {
		    let mounted = true;
		
		    // Set up auth state listener FIRST
		    const { data: { subscription } } = supabase.auth.onAuthStateChange(
		      (event, newSession) => {
		        if (!mounted) return;
		        
		        console.log('AuthContext: Auth state changed:', event, newSession?.user?.email || 'No session');
		        
		        // Handle sign out events
		        if (event === 'SIGNED_OUT') {
		          clearAuthState();
		          setLoading(false);
		          return;
		        }
		        
		        // Handle sign in events
		        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
		          updateAuthState(newSession);
		          setLoading(false);
		          return;
		        }
		        
		        // For other events, update state if there's an actual change
		        if (session?.access_token !== newSession?.access_token) {
		          updateAuthState(newSession);
		          if (loading) setLoading(false);
		        }
		      }
		    );
		
		    const initializeAuth = async () => {
		      try {
		        console.log('AuthContext: Initializing auth...');
		        
		        // Get initial session
		        const { data: { session: initialSession }, error: sessionError } = await supabase.auth.getSession();
		        
		        if (sessionError) {
		          console.error('AuthContext: Error getting initial session:', sessionError);
		          
		          // If the session is invalid, clear local state
		          if (sessionError.message.includes('session_not_found') || 
		              sessionError.message.includes('Session not found')) {
		            console.log('AuthContext: Session not found on server, clearing local session');
		            await supabase.auth.signOut({ scope: 'local' });
		            if (mounted) {
		              clearAuthState();
		              setLoading(false);
		            }
		            return;
		          }
		          
		          if (mounted) {
		            setError(sessionError.message);
		            setLoading(false);
		          }
		          return;
		        }
		        
		        if (mounted) {
		          console.log('AuthContext: Initial session:', initialSession?.user?.email || 'No session');
		          updateAuthState(initialSession);
		          setLoading(false);
		        }
		      } catch (err) {
		        console.error('AuthContext: Auth initialization error:', err);
		        if (mounted) {
		          setError(err instanceof Error ? err.message : 'Authentication error');
		          setLoading(false);
		        }
		      }
		    };
		
		    // Initialize auth state after setting up listener
		    initializeAuth();
		
		    return () => {
		      mounted = false;
		      subscription.unsubscribe();
		    };
		  }, []); // Empty dependency array to run only once
		
		  const value: AuthContextType = {
		    user,
		    session,
		    loading,
		    error,
		    isAuthenticated: !!user && !!session,
		    signOut,
		  };
		
		  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
		};]]></file>
	<file path='src\hooks\use-mobile.tsx'><![CDATA[
		import * as React from "react"
		
		const MOBILE_BREAKPOINT = 768
		
		export function useIsMobile() {
		  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
		
		  React.useEffect(() => {
		    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
		    const onChange = () => {
		      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
		    }
		    mql.addEventListener("change", onChange)
		    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
		    return () => mql.removeEventListener("change", onChange)
		  }, [])
		
		  return !!isMobile
		}]]></file>
	<file path='src\hooks\use-toast.ts'><![CDATA[
		import * as React from "react"
		
		import type {
		  ToastActionElement,
		  ToastProps,
		} from "@/components/ui/toast"
		
		const TOAST_LIMIT = 1
		const TOAST_REMOVE_DELAY = 1000000
		
		type ToasterToast = ToastProps & {
		  id: string
		  title?: React.ReactNode
		  description?: React.ReactNode
		  action?: ToastActionElement
		}
		
		const actionTypes = {
		  ADD_TOAST: "ADD_TOAST",
		  UPDATE_TOAST: "UPDATE_TOAST",
		  DISMISS_TOAST: "DISMISS_TOAST",
		  REMOVE_TOAST: "REMOVE_TOAST",
		} as const
		
		let count = 0
		
		function genId() {
		  count = (count + 1) % Number.MAX_SAFE_INTEGER
		  return count.toString()
		}
		
		type ActionType = typeof actionTypes
		
		type Action =
		  | {
		      type: ActionType["ADD_TOAST"]
		      toast: ToasterToast
		    }
		  | {
		      type: ActionType["UPDATE_TOAST"]
		      toast: Partial<ToasterToast>
		    }
		  | {
		      type: ActionType["DISMISS_TOAST"]
		      toastId?: ToasterToast["id"]
		    }
		  | {
		      type: ActionType["REMOVE_TOAST"]
		      toastId?: ToasterToast["id"]
		    }
		
		interface State {
		  toasts: ToasterToast[]
		}
		
		const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
		
		const addToRemoveQueue = (toastId: string) => {
		  if (toastTimeouts.has(toastId)) {
		    return
		  }
		
		  const timeout = setTimeout(() => {
		    toastTimeouts.delete(toastId)
		    dispatch({
		      type: "REMOVE_TOAST",
		      toastId: toastId,
		    })
		  }, TOAST_REMOVE_DELAY)
		
		  toastTimeouts.set(toastId, timeout)
		}
		
		export const reducer = (state: State, action: Action): State => {
		  switch (action.type) {
		    case "ADD_TOAST":
		      return {
		        ...state,
		        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
		      }
		
		    case "UPDATE_TOAST":
		      return {
		        ...state,
		        toasts: state.toasts.map((t) =>
		          t.id === action.toast.id ? { ...t, ...action.toast } : t
		        ),
		      }
		
		    case "DISMISS_TOAST": {
		      const { toastId } = action
		
		      // ! Side effects ! - This could be extracted into a dismissToast() action,
		      // but I'll keep it here for simplicity
		      if (toastId) {
		        addToRemoveQueue(toastId)
		      } else {
		        state.toasts.forEach((toast) => {
		          addToRemoveQueue(toast.id)
		        })
		      }
		
		      return {
		        ...state,
		        toasts: state.toasts.map((t) =>
		          t.id === toastId || toastId === undefined
		            ? {
		                ...t,
		                open: false,
		              }
		            : t
		        ),
		      }
		    }
		    case "REMOVE_TOAST":
		      if (action.toastId === undefined) {
		        return {
		          ...state,
		          toasts: [],
		        }
		      }
		      return {
		        ...state,
		        toasts: state.toasts.filter((t) => t.id !== action.toastId),
		      }
		  }
		}
		
		const listeners: Array<(state: State) => void> = []
		
		let memoryState: State = { toasts: [] }
		
		function dispatch(action: Action) {
		  memoryState = reducer(memoryState, action)
		  listeners.forEach((listener) => {
		    listener(memoryState)
		  })
		}
		
		type Toast = Omit<ToasterToast, "id">
		
		function toast({ ...props }: Toast) {
		  const id = genId()
		
		  const update = (props: ToasterToast) =>
		    dispatch({
		      type: "UPDATE_TOAST",
		      toast: { ...props, id },
		    })
		  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
		
		  dispatch({
		    type: "ADD_TOAST",
		    toast: {
		      ...props,
		      id,
		      open: true,
		      onOpenChange: (open) => {
		        if (!open) dismiss()
		      },
		    },
		  })
		
		  return {
		    id: id,
		    dismiss,
		    update,
		  }
		}
		
		function useToast() {
		  const [state, setState] = React.useState<State>(memoryState)
		
		  React.useEffect(() => {
		    listeners.push(setState)
		    return () => {
		      const index = listeners.indexOf(setState)
		      if (index > -1) {
		        listeners.splice(index, 1)
		      }
		    }
		  }, [state])
		
		  return {
		    ...state,
		    toast,
		    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
		  }
		}
		
		export { useToast, toast }]]></file>
	<file path='src\hooks\useAudioOverview.tsx'><![CDATA[
		
		import { useState, useEffect } from 'react';
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useToast } from '@/hooks/use-toast';
		
		export const useAudioOverview = (notebookId?: string) => {
		  const [isGenerating, setIsGenerating] = useState(false);
		  const [generationStatus, setGenerationStatus] = useState<string | null>(null);
		  const [isAutoRefreshing, setIsAutoRefreshing] = useState(false);
		  const { toast } = useToast();
		  const queryClient = useQueryClient();
		
		  // Set up realtime subscription for notebook updates
		  useEffect(() => {
		    if (!notebookId) return;
		
		    const channel = supabase
		      .channel('notebook-audio-updates')
		      .on(
		        'postgres_changes',
		        {
		          event: 'UPDATE',
		          schema: 'public',
		          table: 'notebooks',
		          filter: `id=eq.${notebookId}`
		        },
		        (payload) => {
		          console.log('Notebook updated:', payload);
		          const newData = payload.new as any;
		          
		          if (newData.audio_overview_generation_status) {
		            setGenerationStatus(newData.audio_overview_generation_status);
		            
		            if (newData.audio_overview_generation_status === 'completed' && newData.audio_overview_url) {
		              setIsGenerating(false);
		              toast({
		                title: "Audio Overview Ready!",
		                description: "Your deep dive conversation is ready to play!",
		              });
		              
		              // Invalidate queries to refresh the UI
		              queryClient.invalidateQueries({ queryKey: ['notebooks'] });
		            } else if (newData.audio_overview_generation_status === 'failed') {
		              setIsGenerating(false);
		              toast({
		                title: "Generation Failed",
		                description: "Failed to generate audio overview. Please try again.",
		                variant: "destructive",
		              });
		            }
		          }
		        }
		      )
		      .subscribe();
		
		    return () => {
		      supabase.removeChannel(channel);
		    };
		  }, [notebookId, toast, queryClient]);
		
		  const generateAudioOverview = useMutation({
		    mutationFn: async (notebookId: string) => {
		      setIsGenerating(true);
		      setGenerationStatus('generating');
		      
		      const { data, error } = await supabase.functions.invoke('generate-audio-overview', {
		        body: { notebookId }
		      });
		
		      if (error) {
		        console.error('Error starting audio generation:', error);
		        throw error;
		      }
		
		      return data;
		    },
		    onSuccess: (data, notebookId) => {
		      console.log('Audio generation started successfully:', data);
		    },
		    onError: (error) => {
		      console.error('Audio generation failed to start:', error);
		      setIsGenerating(false);
		      setGenerationStatus(null);
		      
		      toast({
		        title: "Failed to Start Generation",
		        description: error.message || "Failed to start audio generation. Please try again.",
		        variant: "destructive",
		      });
		    }
		  });
		
		  const refreshAudioUrl = useMutation({
		    mutationFn: async ({ notebookId, silent = false }: { notebookId: string; silent?: boolean }) => {
		      if (!silent) {
		        setIsAutoRefreshing(true);
		      }
		
		      const { data, error } = await supabase.functions.invoke('refresh-audio-url', {
		        body: { notebookId }
		      });
		
		      if (error) {
		        console.error('Error refreshing audio URL:', error);
		        throw error;
		      }
		
		      return data;
		    },
		    onSuccess: (data, variables) => {
		      console.log('Audio URL refreshed successfully:', data);
		      // Invalidate queries to refresh the UI with new URL
		      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
		      
		      if (!variables.silent) {
		        setIsAutoRefreshing(false);
		      }
		    },
		    onError: (error, variables) => {
		      console.error('Failed to refresh audio URL:', error);
		      if (!variables.silent) {
		        setIsAutoRefreshing(false);
		        toast({
		          title: "Failed to Refresh URL",
		          description: "Unable to refresh the audio URL. Please try again.",
		          variant: "destructive",
		        });
		      }
		    }
		  });
		
		  const checkAudioExpiry = (expiresAt: string | null): boolean => {
		    if (!expiresAt) return true;
		    return new Date(expiresAt) <= new Date();
		  };
		
		  const autoRefreshIfExpired = async (notebookId: string, expiresAt: string | null) => {
		    if (checkAudioExpiry(expiresAt) && !isAutoRefreshing && !refreshAudioUrl.isPending) {
		      console.log('Audio URL expired, auto-refreshing...');
		      try {
		        await refreshAudioUrl.mutateAsync({ notebookId, silent: true });
		      } catch (error) {
		        console.error('Auto-refresh failed:', error);
		      }
		    }
		  };
		
		  return {
		    generateAudioOverview: generateAudioOverview.mutate,
		    refreshAudioUrl: (notebookId: string) => refreshAudioUrl.mutate({ notebookId }),
		    autoRefreshIfExpired,
		    isGenerating: isGenerating || generateAudioOverview.isPending,
		    isAutoRefreshing,
		    generationStatus,
		    checkAudioExpiry,
		  };
		};]]></file>
	<file path='src\hooks\useChatMessages.tsx'><![CDATA[
		
		import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		import { EnhancedChatMessage, Citation, MessageSegment } from '@/types/message';
		import { useToast } from '@/hooks/use-toast';
		import { useEffect } from 'react';
		
		// Type for the expected message structure from n8n_chat_histories
		interface N8nMessageFormat {
		  type: 'human' | 'ai';
		  content: string | {
		    segments: Array<{ text: string; citation_id?: number }>;
		    citations: Array<{
		      citation_id: number;
		      source_id: string;
		      source_title: string;
		      source_type: string;
		      page_number?: number;
		      chunk_index?: number;
		      excerpt?: string;
		    }>;
		  };
		  additional_kwargs?: any;
		  response_metadata?: any;
		  tool_calls?: any[];
		  invalid_tool_calls?: any[];
		}
		
		// Type for the AI response structure from n8n
		interface N8nAiResponseContent {
		  output: Array<{
		    text: string;
		    citations?: Array<{
		      chunk_index: number;
		      chunk_source_id: string;
		      chunk_lines_from: number;
		      chunk_lines_to: number;
		    }>;
		  }>;
		}
		
		const transformMessage = (item: any, sourceMap: Map<string, any>): EnhancedChatMessage => {
		  console.log('Processing item:', item);
		  
		  // Handle the message format based on your JSON examples
		  let transformedMessage: EnhancedChatMessage['message'];
		  
		  // Check if message is an object and has the expected structure
		  if (item.message && 
		      typeof item.message === 'object' && 
		      !Array.isArray(item.message) &&
		      'type' in item.message && 
		      'content' in item.message) {
		    
		    // Type assertion with proper checking
		    const messageObj = item.message as unknown as N8nMessageFormat;
		    
		    // Check if this is an AI message with JSON content that needs parsing
		    if (messageObj.type === 'ai' && typeof messageObj.content === 'string') {
		      try {
		        const parsedContent = JSON.parse(messageObj.content) as N8nAiResponseContent;
		        
		        if (parsedContent.output && Array.isArray(parsedContent.output)) {
		          // Transform the parsed content into segments and citations
		          const segments: MessageSegment[] = [];
		          const citations: Citation[] = [];
		          let citationIdCounter = 1;
		          
		          parsedContent.output.forEach((outputItem) => {
		            // Add the text segment
		            segments.push({
		              text: outputItem.text,
		              citation_id: outputItem.citations && outputItem.citations.length > 0 ? citationIdCounter : undefined
		            });
		            
		            // Process citations if they exist
		            if (outputItem.citations && outputItem.citations.length > 0) {
		              outputItem.citations.forEach((citation) => {
		                const sourceInfo = sourceMap.get(citation.chunk_source_id);
		                citations.push({
		                  citation_id: citationIdCounter,
		                  source_id: citation.chunk_source_id,
		                  source_title: sourceInfo?.title || 'Unknown Source',
		                  source_type: sourceInfo?.type || 'pdf',
		                  chunk_lines_from: citation.chunk_lines_from,
		                  chunk_lines_to: citation.chunk_lines_to,
		                  chunk_index: citation.chunk_index,
		                  excerpt: `Lines ${citation.chunk_lines_from}-${citation.chunk_lines_to}`
		                });
		              });
		              citationIdCounter++;
		            }
		          });
		          
		          transformedMessage = {
		            type: 'ai',
		            content: {
		              segments,
		              citations
		            },
		            additional_kwargs: messageObj.additional_kwargs,
		            response_metadata: messageObj.response_metadata,
		            tool_calls: messageObj.tool_calls,
		            invalid_tool_calls: messageObj.invalid_tool_calls
		          };
		        } else {
		          // Fallback for AI messages that don't match expected format
		          transformedMessage = {
		            type: 'ai',
		            content: messageObj.content,
		            additional_kwargs: messageObj.additional_kwargs,
		            response_metadata: messageObj.response_metadata,
		            tool_calls: messageObj.tool_calls,
		            invalid_tool_calls: messageObj.invalid_tool_calls
		          };
		        }
		      } catch (parseError) {
		        console.log('Failed to parse AI content as JSON, treating as plain text:', parseError);
		        // If parsing fails, treat as regular string content
		        transformedMessage = {
		          type: 'ai',
		          content: messageObj.content,
		          additional_kwargs: messageObj.additional_kwargs,
		          response_metadata: messageObj.response_metadata,
		          tool_calls: messageObj.tool_calls,
		          invalid_tool_calls: messageObj.invalid_tool_calls
		        };
		      }
		    } else {
		      // Handle non-AI messages or AI messages that don't need parsing
		      transformedMessage = {
		        type: messageObj.type === 'human' ? 'human' : 'ai',
		        content: messageObj.content || 'Empty message',
		        additional_kwargs: messageObj.additional_kwargs,
		        response_metadata: messageObj.response_metadata,
		        tool_calls: messageObj.tool_calls,
		        invalid_tool_calls: messageObj.invalid_tool_calls
		      };
		    }
		  } else if (typeof item.message === 'string') {
		    // Handle case where message is just a string
		    transformedMessage = {
		      type: 'human',
		      content: item.message
		    };
		  } else {
		    // Fallback for any other cases
		    transformedMessage = {
		      type: 'human',
		      content: 'Unable to parse message'
		    };
		  }
		
		  console.log('Transformed message:', transformedMessage);
		
		  return {
		    id: item.id,
		    session_id: item.session_id,
		    message: transformedMessage
		  };
		};
		
		export const useChatMessages = (notebookId?: string) => {
		  const { user } = useAuth();
		  const queryClient = useQueryClient();
		  const { toast } = useToast();
		
		  const {
		    data: messages = [],
		    isLoading,
		    error,
		  } = useQuery({
		    queryKey: ['chat-messages', notebookId],
		    queryFn: async () => {
		      if (!notebookId) return [];
		      
		      const { data, error } = await supabase
		        .from('n8n_chat_histories')
		        .select('*')
		        .eq('session_id', notebookId)
		        .order('id', { ascending: true });
		
		      if (error) throw error;
		      
		      // Also fetch sources to get proper source titles
		      const { data: sourcesData } = await supabase
		        .from('sources')
		        .select('id, title, type')
		        .eq('notebook_id', notebookId);
		      
		      const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
		      
		      console.log('Raw data from database:', data);
		      console.log('Sources map:', sourceMap);
		      
		      // Transform the data to match our expected format
		      return data.map((item) => transformMessage(item, sourceMap));
		    },
		    enabled: !!notebookId && !!user,
		    refetchOnMount: true,
		    refetchOnReconnect: true,
		  });
		
		  // Set up Realtime subscription for new messages
		  useEffect(() => {
		    if (!notebookId || !user) return;
		
		    console.log('Setting up Realtime subscription for notebook:', notebookId);
		
		    const channel = supabase
		      .channel('chat-messages')
		      .on(
		        'postgres_changes',
		        {
		          event: 'INSERT',
		          schema: 'public',
		          table: 'n8n_chat_histories',
		          filter: `session_id=eq.${notebookId}`
		        },
		        async (payload) => {
		          console.log('Realtime: New message received:', payload);
		          
		          // Fetch sources for proper transformation
		          const { data: sourcesData } = await supabase
		            .from('sources')
		            .select('id, title, type')
		            .eq('notebook_id', notebookId);
		          
		          const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
		          
		          // Transform the new message
		          const newMessage = transformMessage(payload.new, sourceMap);
		          
		          // Update the query cache with the new message
		          queryClient.setQueryData(['chat-messages', notebookId], (oldMessages: EnhancedChatMessage[] = []) => {
		            // Check if message already exists to prevent duplicates
		            const messageExists = oldMessages.some(msg => msg.id === newMessage.id);
		            if (messageExists) {
		              console.log('Message already exists, skipping:', newMessage.id);
		              return oldMessages;
		            }
		            
		            console.log('Adding new message to cache:', newMessage);
		            return [...oldMessages, newMessage];
		          });
		        }
		      )
		      .subscribe((status) => {
		        console.log('Realtime subscription status:', status);
		      });
		
		    return () => {
		      console.log('Cleaning up Realtime subscription');
		      supabase.removeChannel(channel);
		    };
		  }, [notebookId, user, queryClient]);
		
		  const sendMessage = useMutation({
		    mutationFn: async (messageData: {
		      notebookId: string;
		      role: 'user' | 'assistant';
		      content: string;
		    }) => {
		      if (!user) throw new Error('User not authenticated');
		
		      // Call the n8n webhook
		      const webhookResponse = await supabase.functions.invoke('send-chat-message', {
		        body: {
		          session_id: messageData.notebookId,
		          message: messageData.content,
		          user_id: user.id
		        }
		      });
		
		      if (webhookResponse.error) {
		        throw new Error(`Webhook error: ${webhookResponse.error.message}`);
		      }
		
		      return webhookResponse.data;
		    },
		    onSuccess: () => {
		      // The response will appear via Realtime, so we don't need to do anything here
		      console.log('Message sent to webhook successfully');
		    },
		  });
		
		  const deleteChatHistory = useMutation({
		    mutationFn: async (notebookId: string) => {
		      if (!user) throw new Error('User not authenticated');
		
		      console.log('Deleting chat history for notebook:', notebookId);
		      
		      const { error } = await supabase
		        .from('n8n_chat_histories')
		        .delete()
		        .eq('session_id', notebookId);
		
		      if (error) {
		        console.error('Error deleting chat history:', error);
		        throw error;
		      }
		      
		      console.log('Chat history deleted successfully');
		      return notebookId;
		    },
		    onSuccess: (notebookId) => {
		      console.log('Chat history cleared for notebook:', notebookId);
		      toast({
		        title: "Chat history cleared",
		        description: "All messages have been deleted successfully.",
		      });
		      
		      // Clear the query data and refetch to confirm
		      queryClient.setQueryData(['chat-messages', notebookId], []);
		      queryClient.invalidateQueries({
		        queryKey: ['chat-messages', notebookId]
		      });
		    },
		    onError: (error) => {
		      console.error('Failed to delete chat history:', error);
		      toast({
		        title: "Error",
		        description: "Failed to clear chat history. Please try again.",
		        variant: "destructive",
		      });
		    }
		  });
		
		  return {
		    messages,
		    isLoading,
		    error,
		    sendMessage: sendMessage.mutate,
		    sendMessageAsync: sendMessage.mutateAsync,
		    isSending: sendMessage.isPending,
		    deleteChatHistory: deleteChatHistory.mutate,
		    isDeletingChatHistory: deleteChatHistory.isPending,
		  };
		};]]></file>
	<file path='src\hooks\useDocumentProcessing.tsx'>
		
		import { useMutation } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useToast } from '@/hooks/use-toast';
		
		export const useDocumentProcessing = () => {
		  const { toast } = useToast();
		
		  const processDocument = useMutation({
		    mutationFn: async ({
		      sourceId,
		      filePath,
		      sourceType
		    }: {
		      sourceId: string;
		      filePath: string;
		      sourceType: string;
		    }) => {
		      console.log('Initiating document processing for:', { sourceId, filePath, sourceType });
		
		      const { data, error } = await supabase.functions.invoke('process-document', {
		        body: {
		          sourceId,
		          filePath,
		          sourceType
		        }
		      });
		
		      if (error) {
		        console.error('Document processing error:', error);
		        throw error;
		      }
		
		      return data;
		    },
		    onSuccess: (data) => {
		      console.log('Document processing initiated successfully:', data);
		    },
		    onError: (error) => {
		      console.error('Failed to initiate document processing:', error);
		      toast({
		        title: "Processing Error",
		        description: "Failed to start document processing. Please try again.",
		        variant: "destructive",
		      });
		    },
		  });
		
		  return {
		    processDocumentAsync: processDocument.mutateAsync,
		    processDocument: processDocument.mutate,
		    isProcessing: processDocument.isPending,
		  };
		};</file>
	<file path='src\hooks\useFileUpload.tsx'><![CDATA[
		
		import { useState } from 'react';
		import { supabase } from '@/integrations/supabase/client';
		import { useToast } from '@/hooks/use-toast';
		
		export const useFileUpload = () => {
		  const [isUploading, setIsUploading] = useState(false);
		  const { toast } = useToast();
		
		  const uploadFile = async (file: File, notebookId: string, sourceId: string): Promise<string | null> => {
		    try {
		      setIsUploading(true);
		      
		      // Get file extension
		      const fileExtension = file.name.split('.').pop() || 'bin';
		      
		      // Create file path: sources/{notebook_id}/{source_id}.{extension}
		      const filePath = `${notebookId}/${sourceId}.${fileExtension}`;
		      
		      console.log('Uploading file to:', filePath);
		      
		      // Upload file to Supabase storage
		      const { data, error } = await supabase.storage
		        .from('sources')
		        .upload(filePath, file, {
		          cacheControl: '3600',
		          upsert: false
		        });
		
		      if (error) {
		        console.error('Upload error:', error);
		        throw error;
		      }
		
		      console.log('File uploaded successfully:', data);
		      return filePath;
		    } catch (error) {
		      console.error('File upload failed:', error);
		      toast({
		        title: "Upload Error",
		        description: `Failed to upload ${file.name}. Please try again.`,
		        variant: "destructive",
		      });
		      return null;
		    } finally {
		      setIsUploading(false);
		    }
		  };
		
		  const getFileUrl = (filePath: string): string => {
		    const { data } = supabase.storage
		      .from('sources')
		      .getPublicUrl(filePath);
		    
		    return data.publicUrl;
		  };
		
		  return {
		    uploadFile,
		    getFileUrl,
		    isUploading,
		  };
		};]]></file>
	<file path='src\hooks\useIsDesktop.tsx'><![CDATA[
		
		import * as React from "react"
		
		const DESKTOP_BREAKPOINT = 1100
		
		export function useIsDesktop() {
		  const [isDesktop, setIsDesktop] = React.useState<boolean | undefined>(undefined)
		
		  React.useEffect(() => {
		    const mql = window.matchMedia(`(min-width: ${DESKTOP_BREAKPOINT}px)`)
		    const onChange = () => {
		      setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
		    }
		    mql.addEventListener("change", onChange)
		    setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
		    return () => mql.removeEventListener("change", onChange)
		  }, [])
		
		  return !!isDesktop
		}]]></file>
	<file path='src\hooks\useNotebookDelete.tsx'>
		
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		import { useToast } from '@/hooks/use-toast';
		
		export const useNotebookDelete = () => {
		  const queryClient = useQueryClient();
		  const { user } = useAuth();
		  const { toast } = useToast();
		
		  const deleteNotebook = useMutation({
		    mutationFn: async (notebookId: string) => {
		      console.log('Starting notebook deletion process for:', notebookId);
		      
		      try {
		        // First, get the notebook details for better error reporting
		        const { data: notebook, error: fetchError } = await supabase
		          .from('notebooks')
		          .select('id, title')
		          .eq('id', notebookId)
		          .single();
		
		        if (fetchError) {
		          console.error('Error fetching notebook:', fetchError);
		          throw new Error('Failed to find notebook');
		        }
		
		        console.log('Found notebook to delete:', notebook.title);
		
		        // Get all sources for this notebook to delete their files
		        const { data: sources, error: sourcesError } = await supabase
		          .from('sources')
		          .select('id, title, file_path, type')
		          .eq('notebook_id', notebookId);
		
		        if (sourcesError) {
		          console.error('Error fetching sources for notebook:', sourcesError);
		          throw new Error('Failed to fetch sources for cleanup');
		        }
		
		        console.log(`Found ${sources?.length || 0} sources to clean up`);
		
		        // Delete all files from storage for sources that have file_path
		        const filesToDelete = sources?.filter(source => source.file_path).map(source => source.file_path) || [];
		        
		        if (filesToDelete.length > 0) {
		          console.log('Deleting files from storage:', filesToDelete);
		          
		          const { error: storageError } = await supabase.storage
		            .from('sources')
		            .remove(filesToDelete);
		
		          if (storageError) {
		            console.error('Error deleting files from storage:', storageError);
		            // Don't throw here - we still want to delete the notebook
		            // even if some files can't be deleted (they might already be gone)
		          } else {
		            console.log('All files deleted successfully from storage');
		          }
		        } else {
		          console.log('No files to delete from storage (URL-based sources or no file_paths)');
		        }
		
		        // Delete the notebook - this will cascade delete all sources
		        const { error: deleteError } = await supabase
		          .from('notebooks')
		          .delete()
		          .eq('id', notebookId);
		
		        if (deleteError) {
		          console.error('Error deleting notebook:', deleteError);
		          throw deleteError;
		        }
		        
		        console.log('Notebook deleted successfully with cascade deletion');
		        return notebook;
		      } catch (error) {
		        console.error('Error in deletion process:', error);
		        throw error;
		      }
		    },
		    onSuccess: (deletedNotebook, notebookId) => {
		      console.log('Delete mutation success, invalidating queries');
		      
		      // Invalidate all related queries
		      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
		      queryClient.invalidateQueries({ queryKey: ['sources', notebookId] });
		      queryClient.invalidateQueries({ queryKey: ['notebook', notebookId] });
		      
		      toast({
		        title: "Notebook deleted",
		        description: `"${deletedNotebook?.title || 'Notebook'}" and all its sources have been successfully deleted.`,
		      });
		    },
		    onError: (error: any) => {
		      console.error('Delete mutation error:', error);
		      
		      let errorMessage = "Failed to delete the notebook. Please try again.";
		      
		      // Provide more specific error messages based on the error type
		      if (error?.code === 'PGRST116') {
		        errorMessage = "Notebook not found or you don't have permission to delete it.";
		      } else if (error?.message?.includes('foreign key')) {
		        errorMessage = "Cannot delete notebook due to data dependencies. Please contact support.";
		      } else if (error?.message?.includes('network')) {
		        errorMessage = "Network error. Please check your connection and try again.";
		      }
		      
		      toast({
		        title: "Error",
		        description: errorMessage,
		        variant: "destructive",
		      });
		    },
		  });
		
		  return {
		    deleteNotebook: deleteNotebook.mutate,
		    isDeleting: deleteNotebook.isPending,
		  };
		};</file>
	<file path='src\hooks\useNotebookGeneration.tsx'>
		
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useToast } from '@/hooks/use-toast';
		
		export const useNotebookGeneration = () => {
		  const queryClient = useQueryClient();
		  const { toast } = useToast();
		
		  const generateNotebookContent = useMutation({
		    mutationFn: async ({ notebookId, filePath, sourceType }: { 
		      notebookId: string; 
		      filePath?: string;
		      sourceType: string;
		    }) => {
		      console.log('Starting notebook content generation for:', notebookId, 'with source type:', sourceType);
		      
		      const { data, error } = await supabase.functions.invoke('generate-notebook-content', {
		        body: {
		          notebookId,
		          filePath,
		          sourceType
		        }
		      });
		
		      if (error) {
		        console.error('Edge function error:', error);
		        throw error;
		      }
		
		      return data;
		    },
		    onSuccess: (data) => {
		      console.log('Notebook generation successful:', data);
		      
		      // Invalidate relevant queries to refresh the UI
		      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
		      queryClient.invalidateQueries({ queryKey: ['notebook'] });
		      
		      toast({
		        title: "Content Generated",
		        description: "Notebook title and description have been generated successfully.",
		      });
		    },
		    onError: (error) => {
		      console.error('Notebook generation failed:', error);
		      
		      toast({
		        title: "Generation Failed",
		        description: "Failed to generate notebook content. Please try again.",
		        variant: "destructive",
		      });
		    },
		  });
		
		  return {
		    generateNotebookContent: generateNotebookContent.mutate,
		    generateNotebookContentAsync: generateNotebookContent.mutateAsync,
		    isGenerating: generateNotebookContent.isPending,
		  };
		};</file>
	<file path='src\hooks\useNotebooks.tsx'><![CDATA[
		
		import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
		import { useEffect } from 'react';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		
		export const useNotebooks = () => {
		  const { user, isAuthenticated, loading: authLoading } = useAuth();
		  const queryClient = useQueryClient();
		
		  const {
		    data: notebooks = [],
		    isLoading,
		    error,
		    isError,
		  } = useQuery({
		    queryKey: ['notebooks', user?.id],
		    queryFn: async () => {
		      if (!user) {
		        console.log('No user found, returning empty notebooks array');
		        return [];
		      }
		      
		      console.log('Fetching notebooks for user:', user.id);
		      
		      // First get the notebooks
		      const { data: notebooksData, error: notebooksError } = await supabase
		        .from('notebooks')
		        .select('*')
		        .eq('user_id', user.id)
		        .order('updated_at', { ascending: false });
		
		      if (notebooksError) {
		        console.error('Error fetching notebooks:', notebooksError);
		        throw notebooksError;
		      }
		
		      // Then get source counts separately for each notebook
		      const notebooksWithCounts = await Promise.all(
		        (notebooksData || []).map(async (notebook) => {
		          const { count, error: countError } = await supabase
		            .from('sources')
		            .select('*', { count: 'exact', head: true })
		            .eq('notebook_id', notebook.id);
		
		          if (countError) {
		            console.error('Error fetching source count for notebook:', notebook.id, countError);
		            return { ...notebook, sources: [{ count: 0 }] };
		          }
		
		          return { ...notebook, sources: [{ count: count || 0 }] };
		        })
		      );
		
		      console.log('Fetched notebooks:', notebooksWithCounts?.length || 0);
		      return notebooksWithCounts || [];
		    },
		    enabled: isAuthenticated && !authLoading,
		    retry: (failureCount, error) => {
		      // Don't retry on auth errors
		      if (error?.message?.includes('JWT') || error?.message?.includes('auth')) {
		        return false;
		      }
		      return failureCount < 3;
		    },
		  });
		
		  // Set up real-time subscription for notebooks updates
		  useEffect(() => {
		    if (!user?.id || !isAuthenticated) return;
		
		    console.log('Setting up real-time subscription for notebooks');
		
		    const channel = supabase
		      .channel('notebooks-changes')
		      .on(
		        'postgres_changes',
		        {
		          event: '*',
		          schema: 'public',
		          table: 'notebooks',
		          filter: `user_id=eq.${user.id}`
		        },
		        (payload) => {
		          console.log('Real-time notebook update received:', payload);
		          
		          // Invalidate and refetch notebooks when any change occurs
		          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
		        }
		      )
		      .subscribe();
		
		    return () => {
		      console.log('Cleaning up real-time subscription');
		      supabase.removeChannel(channel);
		    };
		  }, [user?.id, isAuthenticated, queryClient]);
		
		  const createNotebook = useMutation({
		    mutationFn: async (notebookData: { title: string; description?: string }) => {
		      console.log('Creating notebook with data:', notebookData);
		      console.log('Current user:', user?.id);
		      
		      if (!user) {
		        console.error('User not authenticated');
		        throw new Error('User not authenticated');
		      }
		
		      const { data, error } = await supabase
		        .from('notebooks')
		        .insert({
		          title: notebookData.title,
		          description: notebookData.description,
		          user_id: user.id,
		          generation_status: 'pending',
		        })
		        .select()
		        .single();
		
		      if (error) {
		        console.error('Error creating notebook:', error);
		        throw error;
		      }
		      
		      console.log('Notebook created successfully:', data);
		      return data;
		    },
		    onSuccess: (data) => {
		      console.log('Mutation success, invalidating queries');
		      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
		    },
		    onError: (error) => {
		      console.error('Mutation error:', error);
		    },
		  });
		
		  return {
		    notebooks,
		    isLoading: authLoading || isLoading,
		    error: error?.message || null,
		    isError,
		    createNotebook: createNotebook.mutate,
		    isCreating: createNotebook.isPending,
		  };
		};]]></file>
	<file path='src\hooks\useNotebookUpdate.tsx'>
		
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		
		export const useNotebookUpdate = () => {
		  const queryClient = useQueryClient();
		
		  const updateNotebook = useMutation({
		    mutationFn: async ({ id, updates }: { id: string; updates: { title?: string; description?: string } }) => {
		      console.log('Updating notebook:', id, updates);
		      
		      const { data, error } = await supabase
		        .from('notebooks')
		        .update(updates)
		        .eq('id', id)
		        .select()
		        .single();
		
		      if (error) {
		        console.error('Error updating notebook:', error);
		        throw error;
		      }
		      
		      console.log('Notebook updated successfully:', data);
		      return data;
		    },
		    onSuccess: (data) => {
		      console.log('Mutation success, invalidating queries');
		      queryClient.invalidateQueries({ queryKey: ['notebook', data.id] });
		      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
		    },
		    onError: (error) => {
		      console.error('Mutation error:', error);
		    },
		  });
		
		  return {
		    updateNotebook: updateNotebook.mutate,
		    isUpdating: updateNotebook.isPending,
		  };
		};</file>
	<file path='src\hooks\useNotes.tsx'><![CDATA[
		import { useState } from 'react';
		import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		
		export interface Note {
		  id: string;
		  notebook_id: string;
		  title: string;
		  content: string;
		  source_type: 'user' | 'ai_response';
		  extracted_text?: string;
		  created_at: string;
		  updated_at: string;
		}
		
		export const useNotes = (notebookId?: string) => {
		  const { user } = useAuth();
		  const queryClient = useQueryClient();
		
		  const { data: notes, isLoading } = useQuery({
		    queryKey: ['notes', notebookId],
		    queryFn: async () => {
		      if (!notebookId) return [];
		      
		      const { data, error } = await supabase
		        .from('notes')
		        .select('*')
		        .eq('notebook_id', notebookId)
		        .order('updated_at', { ascending: false });
		      
		      if (error) throw error;
		      return data as Note[];
		    },
		    enabled: !!notebookId && !!user,
		  });
		
		  const createNoteMutation = useMutation({
		    mutationFn: async ({ 
		      title, 
		      content, 
		      source_type = 'user',
		      extracted_text 
		    }: { 
		      title: string; 
		      content: string; 
		      source_type?: 'user' | 'ai_response';
		      extracted_text?: string;
		    }) => {
		      if (!notebookId) throw new Error('Notebook ID is required');
		      
		      const { data, error } = await supabase
		        .from('notes')
		        .insert([{
		          notebook_id: notebookId,
		          title,
		          content,
		          source_type,
		          extracted_text,
		        }])
		        .select()
		        .single();
		      
		      if (error) throw error;
		      return data;
		    },
		    onSuccess: () => {
		      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
		    },
		  });
		
		  const updateNoteMutation = useMutation({
		    mutationFn: async ({ id, title, content }: { id: string; title: string; content: string }) => {
		      const { data, error } = await supabase
		        .from('notes')
		        .update({ title, content, updated_at: new Date().toISOString() })
		        .eq('id', id)
		        .select()
		        .single();
		      
		      if (error) throw error;
		      return data;
		    },
		    onSuccess: () => {
		      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
		    },
		  });
		
		  const deleteNoteMutation = useMutation({
		    mutationFn: async (id: string) => {
		      const { error } = await supabase
		        .from('notes')
		        .delete()
		        .eq('id', id);
		      
		      if (error) throw error;
		    },
		    onSuccess: () => {
		      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
		    },
		  });
		
		  return {
		    notes,
		    isLoading,
		    createNote: createNoteMutation.mutate,
		    isCreating: createNoteMutation.isPending,
		    updateNote: updateNoteMutation.mutate,
		    isUpdating: updateNoteMutation.isPending,
		    deleteNote: deleteNoteMutation.mutate,
		    isDeleting: deleteNoteMutation.isPending,
		  };
		};]]></file>
	<file path='src\hooks\useSourceDelete.tsx'>
		
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		import { useToast } from '@/hooks/use-toast';
		
		export const useSourceDelete = () => {
		  const queryClient = useQueryClient();
		  const { user } = useAuth();
		  const { toast } = useToast();
		
		  const deleteSource = useMutation({
		    mutationFn: async (sourceId: string) => {
		      console.log('Starting source deletion process for:', sourceId);
		      
		      try {
		        // First, get the source details including file information
		        const { data: source, error: fetchError } = await supabase
		          .from('sources')
		          .select('id, title, file_path, type')
		          .eq('id', sourceId)
		          .single();
		
		        if (fetchError) {
		          console.error('Error fetching source:', fetchError);
		          throw new Error('Failed to find source');
		        }
		
		        console.log('Found source to delete:', source.title, 'with file_path:', source.file_path);
		
		        // Delete the file from storage if it exists
		        if (source.file_path) {
		          console.log('Deleting file from storage:', source.file_path);
		          
		          const { error: storageError } = await supabase.storage
		            .from('sources')
		            .remove([source.file_path]);
		
		          if (storageError) {
		            console.error('Error deleting file from storage:', storageError);
		            // Don't throw here - we still want to delete the database record
		            // even if the file deletion fails (file might already be gone)
		          } else {
		            console.log('File deleted successfully from storage');
		          }
		        } else {
		          console.log('No file to delete from storage (URL-based source or no file_path)');
		        }
		
		        // Delete the source record from the database
		        const { error: deleteError } = await supabase
		          .from('sources')
		          .delete()
		          .eq('id', sourceId);
		
		        if (deleteError) {
		          console.error('Error deleting source from database:', deleteError);
		          throw deleteError;
		        }
		        
		        console.log('Source deleted successfully from database');
		        return source;
		      } catch (error) {
		        console.error('Error in source deletion process:', error);
		        throw error;
		      }
		    },
		    onSuccess: (deletedSource) => {
		      console.log('Delete mutation success, invalidating queries');
		      queryClient.invalidateQueries({ queryKey: ['sources'] });
		      toast({
		        title: "Source deleted",
		        description: `"${deletedSource?.title || 'Source'}" has been successfully deleted.`,
		      });
		    },
		    onError: (error: any) => {
		      console.error('Delete mutation error:', error);
		      
		      let errorMessage = "Failed to delete the source. Please try again.";
		      
		      // Provide more specific error messages based on the error type
		      if (error?.code === 'PGRST116') {
		        errorMessage = "Source not found or you don't have permission to delete it.";
		      } else if (error?.message?.includes('foreign key')) {
		        errorMessage = "Cannot delete source due to data dependencies. Please contact support.";
		      } else if (error?.message?.includes('network')) {
		        errorMessage = "Network error. Please check your connection and try again.";
		      }
		      
		      toast({
		        title: "Error",
		        description: errorMessage,
		        variant: "destructive",
		      });
		    },
		  });
		
		  return {
		    deleteSource: deleteSource.mutate,
		    isDeleting: deleteSource.isPending,
		  };
		};</file>
	<file path='src\hooks\useSources.tsx'><![CDATA[
		
		import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		import { useNotebookGeneration } from './useNotebookGeneration';
		import { useEffect } from 'react';
		
		export const useSources = (notebookId?: string) => {
		  const { user } = useAuth();
		  const queryClient = useQueryClient();
		  const { generateNotebookContentAsync } = useNotebookGeneration();
		
		  const {
		    data: sources = [],
		    isLoading,
		    error,
		  } = useQuery({
		    queryKey: ['sources', notebookId],
		    queryFn: async () => {
		      if (!notebookId) return [];
		      
		      const { data, error } = await supabase
		        .from('sources')
		        .select('*')
		        .eq('notebook_id', notebookId)
		        .order('created_at', { ascending: false });
		
		      if (error) throw error;
		      return data;
		    },
		    enabled: !!notebookId,
		  });
		
		  // Set up Realtime subscription for sources table
		  useEffect(() => {
		    if (!notebookId || !user) return;
		
		    console.log('Setting up Realtime subscription for sources table, notebook:', notebookId);
		
		    const channel = supabase
		      .channel('sources-changes')
		      .on(
		        'postgres_changes',
		        {
		          event: '*', // Listen to all events (INSERT, UPDATE, DELETE)
		          schema: 'public',
		          table: 'sources',
		          filter: `notebook_id=eq.${notebookId}`
		        },
		        (payload: any) => {
		          console.log('Realtime: Sources change received:', payload);
		          
		          // Update the query cache based on the event type
		          queryClient.setQueryData(['sources', notebookId], (oldSources: any[] = []) => {
		            switch (payload.eventType) {
		              case 'INSERT':
		                // Add new source if it doesn't already exist
		                const newSource = payload.new as any;
		                const existsInsert = oldSources.some(source => source.id === newSource?.id);
		                if (existsInsert) {
		                  console.log('Source already exists, skipping INSERT:', newSource?.id);
		                  return oldSources;
		                }
		                console.log('Adding new source to cache:', newSource);
		                return [newSource, ...oldSources];
		                
		              case 'UPDATE':
		                // Update existing source
		                const updatedSource = payload.new as any;
		                console.log('Updating source in cache:', updatedSource?.id);
		                return oldSources.map(source => 
		                  source.id === updatedSource?.id ? updatedSource : source
		                );
		                
		              case 'DELETE':
		                // Remove deleted source
		                const deletedSource = payload.old as any;
		                console.log('Removing source from cache:', deletedSource?.id);
		                return oldSources.filter(source => source.id !== deletedSource?.id);
		                
		              default:
		                console.log('Unknown event type:', payload.eventType);
		                return oldSources;
		            }
		          });
		        }
		      )
		      .subscribe((status) => {
		        console.log('Realtime subscription status for sources:', status);
		      });
		
		    return () => {
		      console.log('Cleaning up Realtime subscription for sources');
		      supabase.removeChannel(channel);
		    };
		  }, [notebookId, user, queryClient]);
		
		  const addSource = useMutation({
		    mutationFn: async (sourceData: {
		      notebookId: string;
		      title: string;
		      type: 'pdf' | 'text' | 'website' | 'youtube' | 'audio';
		      content?: string;
		      url?: string;
		      file_path?: string;
		      file_size?: number;
		      processing_status?: string;
		      metadata?: any;
		    }) => {
		      if (!user) throw new Error('User not authenticated');
		
		      const { data, error } = await supabase
		        .from('sources')
		        .insert({
		          notebook_id: sourceData.notebookId,
		          title: sourceData.title,
		          type: sourceData.type,
		          content: sourceData.content,
		          url: sourceData.url,
		          file_path: sourceData.file_path,
		          file_size: sourceData.file_size,
		          processing_status: sourceData.processing_status,
		          metadata: sourceData.metadata || {},
		        })
		        .select()
		        .single();
		
		      if (error) throw error;
		      return data;
		    },
		    onSuccess: async (newSource) => {
		      console.log('Source added successfully:', newSource);
		      
		      // The Realtime subscription will handle updating the cache
		      // But we still check for first source to trigger generation
		      const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
		      const isFirstSource = currentSources.length === 0;
		      
		      if (isFirstSource && notebookId) {
		        console.log('This is the first source, checking notebook generation status...');
		        
		        // Check notebook generation status
		        const { data: notebook } = await supabase
		          .from('notebooks')
		          .select('generation_status')
		          .eq('id', notebookId)
		          .single();
		        
		        if (notebook?.generation_status === 'pending') {
		          console.log('Triggering notebook content generation...');
		          
		          // Determine if we can trigger generation based on source type and available data
		          const canGenerate = 
		            (newSource.type === 'pdf' && newSource.file_path) ||
		            (newSource.type === 'text' && newSource.content) ||
		            (newSource.type === 'website' && newSource.url) ||
		            (newSource.type === 'youtube' && newSource.url) ||
		            (newSource.type === 'audio' && newSource.file_path);
		          
		          if (canGenerate) {
		            try {
		              await generateNotebookContentAsync({
		                notebookId,
		                filePath: newSource.file_path || newSource.url,
		                sourceType: newSource.type
		              });
		            } catch (error) {
		              console.error('Failed to generate notebook content:', error);
		            }
		          } else {
		            console.log('Source not ready for generation yet - missing required data');
		          }
		        }
		      }
		    },
		  });
		
		  const updateSource = useMutation({
		    mutationFn: async ({ sourceId, updates }: { 
		      sourceId: string; 
		      updates: { 
		        title?: string;
		        file_path?: string;
		        processing_status?: string;
		      }
		    }) => {
		      const { data, error } = await supabase
		        .from('sources')
		        .update(updates)
		        .eq('id', sourceId)
		        .select()
		        .single();
		
		      if (error) throw error;
		      return data;
		    },
		    onSuccess: async (updatedSource) => {
		      // The Realtime subscription will handle updating the cache
		      
		      // If file_path was added and this is the first source, trigger generation
		      if (updatedSource.file_path && notebookId) {
		        const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
		        const isFirstSource = currentSources.length === 1;
		        
		        if (isFirstSource) {
		          const { data: notebook } = await supabase
		            .from('notebooks')
		            .select('generation_status')
		            .eq('id', notebookId)
		            .single();
		          
		          if (notebook?.generation_status === 'pending') {
		            console.log('File path updated, triggering notebook content generation...');
		            
		            try {
		              await generateNotebookContentAsync({
		                notebookId,
		                filePath: updatedSource.file_path,
		                sourceType: updatedSource.type
		              });
		            } catch (error) {
		              console.error('Failed to generate notebook content:', error);
		            }
		          }
		        }
		      }
		    },
		  });
		
		  return {
		    sources,
		    isLoading,
		    error,
		    addSource: addSource.mutate,
		    addSourceAsync: addSource.mutateAsync,
		    isAdding: addSource.isPending,
		    updateSource: updateSource.mutate,
		    isUpdating: updateSource.isPending,
		  };
		};]]></file>
	<file path='src\hooks\useSourceUpdate.tsx'>
		
		import { useMutation, useQueryClient } from '@tanstack/react-query';
		import { supabase } from '@/integrations/supabase/client';
		import { useAuth } from '@/contexts/AuthContext';
		import { useToast } from '@/hooks/use-toast';
		
		export const useSourceUpdate = () => {
		  const queryClient = useQueryClient();
		  const { user } = useAuth();
		  const { toast } = useToast();
		
		  const updateSource = useMutation({
		    mutationFn: async ({ sourceId, title }: { sourceId: string; title: string }) => {
		      console.log('Updating source:', sourceId, 'with title:', title);
		      
		      const { data, error } = await supabase
		        .from('sources')
		        .update({ title })
		        .eq('id', sourceId)
		        .select()
		        .single();
		
		      if (error) {
		        console.error('Error updating source:', error);
		        throw error;
		      }
		      
		      console.log('Source updated successfully');
		      return data;
		    },
		    onSuccess: () => {
		      console.log('Update mutation success, invalidating queries');
		      queryClient.invalidateQueries({ queryKey: ['sources'] });
		      toast({
		        title: "Source renamed",
		        description: "The source has been successfully renamed.",
		      });
		    },
		    onError: (error) => {
		      console.error('Update mutation error:', error);
		      toast({
		        title: "Error",
		        description: "Failed to rename the source. Please try again.",
		        variant: "destructive",
		      });
		    },
		  });
		
		  return {
		    updateSource: updateSource.mutate,
		    isUpdating: updateSource.isPending,
		  };
		};</file>
	<file path='src\index.css'>
		@tailwind base;
		@tailwind components;
		@tailwind utilities;
		
		@layer base {
		  :root {
		    --background: 0 0% 100%;
		    --foreground: 222.2 84% 4.9%;
		
		    --card: 0 0% 100%;
		    --card-foreground: 222.2 84% 4.9%;
		
		    --popover: 0 0% 100%;
		    --popover-foreground: 222.2 84% 4.9%;
		
		    --primary: 222.2 47.4% 11.2%;
		    --primary-foreground: 210 40% 98%;
		
		    --secondary: 210 40% 96.1%;
		    --secondary-foreground: 222.2 47.4% 11.2%;
		
		    --muted: 210 40% 96.1%;
		    --muted-foreground: 215.4 16.3% 46.9%;
		
		    --accent: 210 40% 96.1%;
		    --accent-foreground: 222.2 47.4% 11.2%;
		
		    --destructive: 0 84.2% 60.2%;
		    --destructive-foreground: 210 40% 98%;
		
		    --border: 214.3 31.8% 91.4%;
		    --input: 214.3 31.8% 91.4%;
		    --ring: 222.2 84% 4.9%;
		
		    --radius: 0.5rem;
		
		    --sidebar-background: 0 0% 98%;
		
		    --sidebar-foreground: 240 5.3% 26.1%;
		
		    --sidebar-primary: 240 5.9% 10%;
		
		    --sidebar-primary-foreground: 0 0% 98%;
		
		    --sidebar-accent: 240 4.8% 95.9%;
		
		    --sidebar-accent-foreground: 240 5.9% 10%;
		
		    --sidebar-border: 220 13% 91%;
		
		    --sidebar-ring: 217.2 91.2% 59.8%;
		  }
		
		  .dark {
		    --background: 222.2 84% 4.9%;
		    --foreground: 210 40% 98%;
		
		    --card: 222.2 84% 4.9%;
		    --card-foreground: 210 40% 98%;
		
		    --popover: 222.2 84% 4.9%;
		    --popover-foreground: 210 40% 98%;
		
		    --primary: 210 40% 98%;
		    --primary-foreground: 222.2 47.4% 11.2%;
		
		    --secondary: 217.2 32.6% 17.5%;
		    --secondary-foreground: 210 40% 98%;
		
		    --muted: 217.2 32.6% 17.5%;
		    --muted-foreground: 215 20.2% 65.1%;
		
		    --accent: 217.2 32.6% 17.5%;
		    --accent-foreground: 210 40% 98%;
		
		    --destructive: 0 62.8% 30.6%;
		    --destructive-foreground: 210 40% 98%;
		
		    --border: 217.2 32.6% 17.5%;
		    --input: 217.2 32.6% 17.5%;
		    --ring: 212.7 26.8% 83.9%;
		    --sidebar-background: 240 5.9% 10%;
		    --sidebar-foreground: 240 4.8% 95.9%;
		    --sidebar-primary: 224.3 76.3% 48%;
		    --sidebar-primary-foreground: 0 0% 100%;
		    --sidebar-accent: 240 3.7% 15.9%;
		    --sidebar-accent-foreground: 240 4.8% 95.9%;
		    --sidebar-border: 240 3.7% 15.9%;
		    --sidebar-ring: 217.2 91.2% 59.8%;
		  }
		}
		
		@layer base {
		  * {
		    @apply border-border;
		  }
		
		  body {
		    @apply bg-background text-foreground;
		  }
		}</file>
	<file path='src\integrations\supabase\client.ts'><![CDATA[
		// This file is automatically generated. Do not edit it directly.
		import { createClient } from '@supabase/supabase-js';
		import type { Database } from './types';
		
		const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
		const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
		
		// Import the supabase client like this:
		// import { supabase } from "@/integrations/supabase/client";
		
		export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);]]></file>
	<file path='src\integrations\supabase\types.ts'><![CDATA[
		export type Json =
		  | string
		  | number
		  | boolean
		  | null
		  | { [key: string]: Json | undefined }
		  | Json[]
		
		export type Database = {
		  public: {
		    Tables: {
		      documents: {
		        Row: {
		          content: string | null
		          embedding: string | null
		          id: number
		          metadata: Json | null
		        }
		        Insert: {
		          content?: string | null
		          embedding?: string | null
		          id?: number
		          metadata?: Json | null
		        }
		        Update: {
		          content?: string | null
		          embedding?: string | null
		          id?: number
		          metadata?: Json | null
		        }
		        Relationships: []
		      }
		      n8n_chat_histories: {
		        Row: {
		          id: number
		          message: Json
		          session_id: string
		        }
		        Insert: {
		          id?: number
		          message: Json
		          session_id: string
		        }
		        Update: {
		          id?: number
		          message?: Json
		          session_id?: string
		        }
		        Relationships: []
		      }
		      notebooks: {
		        Row: {
		          audio_overview_generation_status: string | null
		          audio_overview_url: string | null
		          audio_url_expires_at: string | null
		          color: string | null
		          created_at: string
		          description: string | null
		          example_questions: string[] | null
		          generation_status: string | null
		          icon: string | null
		          id: string
		          title: string
		          updated_at: string
		          user_id: string
		        }
		        Insert: {
		          audio_overview_generation_status?: string | null
		          audio_overview_url?: string | null
		          audio_url_expires_at?: string | null
		          color?: string | null
		          created_at?: string
		          description?: string | null
		          example_questions?: string[] | null
		          generation_status?: string | null
		          icon?: string | null
		          id?: string
		          title: string
		          updated_at?: string
		          user_id: string
		        }
		        Update: {
		          audio_overview_generation_status?: string | null
		          audio_overview_url?: string | null
		          audio_url_expires_at?: string | null
		          color?: string | null
		          created_at?: string
		          description?: string | null
		          example_questions?: string[] | null
		          generation_status?: string | null
		          icon?: string | null
		          id?: string
		          title?: string
		          updated_at?: string
		          user_id?: string
		        }
		        Relationships: [
		          {
		            foreignKeyName: "notebooks_user_id_fkey"
		            columns: ["user_id"]
		            isOneToOne: false
		            referencedRelation: "profiles"
		            referencedColumns: ["id"]
		          },
		        ]
		      }
		      notes: {
		        Row: {
		          content: string
		          created_at: string
		          extracted_text: string | null
		          id: string
		          notebook_id: string
		          source_type: string | null
		          title: string
		          updated_at: string
		        }
		        Insert: {
		          content: string
		          created_at?: string
		          extracted_text?: string | null
		          id?: string
		          notebook_id: string
		          source_type?: string | null
		          title: string
		          updated_at?: string
		        }
		        Update: {
		          content?: string
		          created_at?: string
		          extracted_text?: string | null
		          id?: string
		          notebook_id?: string
		          source_type?: string | null
		          title?: string
		          updated_at?: string
		        }
		        Relationships: [
		          {
		            foreignKeyName: "notes_notebook_id_fkey"
		            columns: ["notebook_id"]
		            isOneToOne: false
		            referencedRelation: "notebooks"
		            referencedColumns: ["id"]
		          },
		        ]
		      }
		      profiles: {
		        Row: {
		          avatar_url: string | null
		          created_at: string
		          email: string
		          full_name: string | null
		          id: string
		          updated_at: string
		        }
		        Insert: {
		          avatar_url?: string | null
		          created_at?: string
		          email: string
		          full_name?: string | null
		          id: string
		          updated_at?: string
		        }
		        Update: {
		          avatar_url?: string | null
		          created_at?: string
		          email?: string
		          full_name?: string | null
		          id?: string
		          updated_at?: string
		        }
		        Relationships: []
		      }
		      sources: {
		        Row: {
		          content: string | null
		          created_at: string
		          display_name: string | null
		          file_path: string | null
		          file_size: number | null
		          id: string
		          metadata: Json | null
		          notebook_id: string
		          processing_status: string | null
		          summary: string | null
		          title: string
		          type: Database["public"]["Enums"]["source_type"]
		          updated_at: string
		          url: string | null
		        }
		        Insert: {
		          content?: string | null
		          created_at?: string
		          display_name?: string | null
		          file_path?: string | null
		          file_size?: number | null
		          id?: string
		          metadata?: Json | null
		          notebook_id: string
		          processing_status?: string | null
		          summary?: string | null
		          title: string
		          type: Database["public"]["Enums"]["source_type"]
		          updated_at?: string
		          url?: string | null
		        }
		        Update: {
		          content?: string | null
		          created_at?: string
		          display_name?: string | null
		          file_path?: string | null
		          file_size?: number | null
		          id?: string
		          metadata?: Json | null
		          notebook_id?: string
		          processing_status?: string | null
		          summary?: string | null
		          title?: string
		          type?: Database["public"]["Enums"]["source_type"]
		          updated_at?: string
		          url?: string | null
		        }
		        Relationships: [
		          {
		            foreignKeyName: "fk_sources_notebook_id"
		            columns: ["notebook_id"]
		            isOneToOne: false
		            referencedRelation: "notebooks"
		            referencedColumns: ["id"]
		          },
		          {
		            foreignKeyName: "sources_notebook_id_fkey"
		            columns: ["notebook_id"]
		            isOneToOne: false
		            referencedRelation: "notebooks"
		            referencedColumns: ["id"]
		          },
		        ]
		      }
		    }
		    Views: {
		      [_ in never]: never
		    }
		    Functions: {
		      binary_quantize: {
		        Args: { "": string } | { "": unknown }
		        Returns: unknown
		      }
		      halfvec_avg: {
		        Args: { "": number[] }
		        Returns: unknown
		      }
		      halfvec_out: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      halfvec_send: {
		        Args: { "": unknown }
		        Returns: string
		      }
		      halfvec_typmod_in: {
		        Args: { "": unknown[] }
		        Returns: number
		      }
		      hnsw_bit_support: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      hnsw_halfvec_support: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      hnsw_sparsevec_support: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      hnswhandler: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      ivfflat_bit_support: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      ivfflat_halfvec_support: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      ivfflathandler: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      l2_norm: {
		        Args: { "": unknown } | { "": unknown }
		        Returns: number
		      }
		      l2_normalize: {
		        Args: { "": string } | { "": unknown } | { "": unknown }
		        Returns: unknown
		      }
		      match_documents: {
		        Args: { query_embedding: string; match_count?: number; filter?: Json }
		        Returns: {
		          id: number
		          content: string
		          metadata: Json
		          similarity: number
		        }[]
		      }
		      sparsevec_out: {
		        Args: { "": unknown }
		        Returns: unknown
		      }
		      sparsevec_send: {
		        Args: { "": unknown }
		        Returns: string
		      }
		      sparsevec_typmod_in: {
		        Args: { "": unknown[] }
		        Returns: number
		      }
		      vector_avg: {
		        Args: { "": number[] }
		        Returns: string
		      }
		      vector_dims: {
		        Args: { "": string } | { "": unknown }
		        Returns: number
		      }
		      vector_norm: {
		        Args: { "": string }
		        Returns: number
		      }
		      vector_out: {
		        Args: { "": string }
		        Returns: unknown
		      }
		      vector_send: {
		        Args: { "": string }
		        Returns: string
		      }
		      vector_typmod_in: {
		        Args: { "": unknown[] }
		        Returns: number
		      }
		    }
		    Enums: {
		      source_type: "pdf" | "text" | "website" | "youtube" | "audio"
		    }
		    CompositeTypes: {
		      [_ in never]: never
		    }
		  }
		}
		
		type DefaultSchema = Database[Extract<keyof Database, "public">]
		
		export type Tables<
		  DefaultSchemaTableNameOrOptions extends
		    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
		    | { schema: keyof Database },
		  TableName extends DefaultSchemaTableNameOrOptions extends {
		    schema: keyof Database
		  }
		    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
		        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
		    : never = never,
		> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
		  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
		      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
		      Row: infer R
		    }
		    ? R
		    : never
		  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
		        DefaultSchema["Views"])
		    ? (DefaultSchema["Tables"] &
		        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
		        Row: infer R
		      }
		      ? R
		      : never
		    : never
		
		export type TablesInsert<
		  DefaultSchemaTableNameOrOptions extends
		    | keyof DefaultSchema["Tables"]
		    | { schema: keyof Database },
		  TableName extends DefaultSchemaTableNameOrOptions extends {
		    schema: keyof Database
		  }
		    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
		    : never = never,
		> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
		  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
		      Insert: infer I
		    }
		    ? I
		    : never
		  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
		    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
		        Insert: infer I
		      }
		      ? I
		      : never
		    : never
		
		export type TablesUpdate<
		  DefaultSchemaTableNameOrOptions extends
		    | keyof DefaultSchema["Tables"]
		    | { schema: keyof Database },
		  TableName extends DefaultSchemaTableNameOrOptions extends {
		    schema: keyof Database
		  }
		    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
		    : never = never,
		> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
		  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
		      Update: infer U
		    }
		    ? U
		    : never
		  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
		    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
		        Update: infer U
		      }
		      ? U
		      : never
		    : never
		
		export type Enums<
		  DefaultSchemaEnumNameOrOptions extends
		    | keyof DefaultSchema["Enums"]
		    | { schema: keyof Database },
		  EnumName extends DefaultSchemaEnumNameOrOptions extends {
		    schema: keyof Database
		  }
		    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
		    : never = never,
		> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
		  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
		  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
		    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
		    : never
		
		export type CompositeTypes<
		  PublicCompositeTypeNameOrOptions extends
		    | keyof DefaultSchema["CompositeTypes"]
		    | { schema: keyof Database },
		  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
		    schema: keyof Database
		  }
		    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
		    : never = never,
		> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
		  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
		  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
		    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
		    : never
		
		export const Constants = {
		  public: {
		    Enums: {
		      source_type: ["pdf", "text", "website", "youtube", "audio"],
		    },
		  },
		} as const]]></file>
	<file path='src\lib\utils.ts'>
		import { clsx, type ClassValue } from "clsx"
		import { twMerge } from "tailwind-merge"
		
		export function cn(...inputs: ClassValue[]) {
		  return twMerge(clsx(inputs))
		}</file>
	<file path='src\main.tsx'><![CDATA[
		import { createRoot } from 'react-dom/client'
		import App from './App.tsx'
		import './index.css'
		
		createRoot(document.getElementById("root")!).render(<App />);]]></file>
	<file path='src\pages\Auth.tsx'><![CDATA[
		import React from 'react';
		import AuthForm from '@/components/auth/AuthForm';
		import Logo from '@/components/ui/Logo';
		const Auth = () => {
		  return <div className="min-h-screen flex items-center justify-center px-4 bg-white">
		      <div className="w-full max-w-md">
		        <div className="text-center mb-8">
		          <div className="flex justify-center mb-4">
		            <Logo size="lg" />
		          </div>
		          <h1 className="text-3xl font-bold text-gray-900 mb-2">InsightsLM</h1>
		          <p className="text-gray-600">Your AI-powered knowledge companion</p>
		        </div>
		        <AuthForm />
		      </div>
		    </div>;
		};
		export default Auth;]]></file>
	<file path='src\pages\Dashboard.tsx'><![CDATA[
		
		import React from 'react';
		import DashboardHeader from '@/components/dashboard/DashboardHeader';
		import NotebookGrid from '@/components/dashboard/NotebookGrid';
		import EmptyDashboard from '@/components/dashboard/EmptyDashboard';
		import { useNotebooks } from '@/hooks/useNotebooks';
		import { useAuth } from '@/contexts/AuthContext';
		
		const Dashboard = () => {
		  const { user, loading: authLoading, error: authError } = useAuth();
		  const { notebooks, isLoading, error, isError } = useNotebooks();
		  const hasNotebooks = notebooks && notebooks.length > 0;
		
		  // Show loading while auth is initializing
		  if (authLoading) {
		    return (
		      <div className="min-h-screen bg-gray-50">
		        <DashboardHeader userEmail={user?.email} />
		        <main className="max-w-7xl mx-auto px-6 py-8">
		          <div className="mb-8">
		            <h1 className="text-4xl font-medium text-gray-900 mb-2">Welcome to InsightsLM</h1>
		          </div>
		          <div className="text-center py-16">
		            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
		            <p className="text-gray-600">Initializing...</p>
		          </div>
		        </main>
		      </div>
		    );
		  }
		
		  // Show auth error if present
		  if (authError) {
		    return (
		      <div className="min-h-screen bg-gray-50">
		        <DashboardHeader userEmail={user?.email} />
		        <main className="max-w-7xl mx-auto px-6 py-8">
		          <div className="mb-8">
		            <h1 className="text-4xl font-medium text-gray-900 mb-2">Welcome to InsightsLM</h1>
		          </div>
		          <div className="text-center py-16">
		            <p className="text-red-600">Authentication error: {authError}</p>
		            <button 
		              onClick={() => window.location.reload()} 
		              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
		            >
		              Retry
		            </button>
		          </div>
		        </main>
		      </div>
		    );
		  }
		
		  // Show notebooks loading state
		  if (isLoading) {
		    return (
		      <div className="min-h-screen bg-gray-50">
		        <DashboardHeader userEmail={user?.email} />
		        <main className="max-w-7xl mx-auto px-6 py-8">
		          <div className="mb-8">
		            <h1 className="text-4xl font-medium text-gray-900 mb-2">Welcome to InsightsLM</h1>
		          </div>
		          <div className="text-center py-16">
		            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
		            <p className="text-gray-600">Loading your notebooks...</p>
		          </div>
		        </main>
		      </div>
		    );
		  }
		
		  // Show notebooks error if present
		  if (isError && error) {
		    return (
		      <div className="min-h-screen bg-gray-50">
		        <DashboardHeader userEmail={user?.email} />
		        <main className="max-w-7xl mx-auto px-6 py-8">
		          <div className="mb-8">
		            <h1 className="text-4xl font-medium text-gray-900 mb-2">Welcome to InsightsLM</h1>
		          </div>
		          <div className="text-center py-16">
		            <p className="text-red-600">Error loading notebooks: {error}</p>
		            <button 
		              onClick={() => window.location.reload()} 
		              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
		            >
		              Retry
		            </button>
		          </div>
		        </main>
		      </div>
		    );
		  }
		
		  return (
		    <div className="min-h-screen bg-white">
		      <DashboardHeader userEmail={user?.email} />
		      
		      <main className="max-w-7xl mx-auto px-6 py-[60px]">
		        <div className="mb-8">
		          <h1 className="font-medium text-gray-900 mb-2 text-5xl">Welcome to InsightsLM</h1>
		        </div>
		
		        {hasNotebooks ? <NotebookGrid /> : <EmptyDashboard />}
		      </main>
		    </div>
		  );
		};
		
		export default Dashboard;]]></file>
	<file path='src\pages\Index.tsx'><![CDATA[
		
		import React from 'react';
		import { useAuth } from '@/contexts/AuthContext';
		import Dashboard from './Dashboard';
		import Auth from './Auth';
		
		const Index = () => {
		  const { isAuthenticated, loading, error } = useAuth();
		
		  if (loading) {
		    return (
		      <div className="min-h-screen flex items-center justify-center bg-gray-50">
		        <div className="text-center">
		          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
		          <p className="text-gray-600">Loading...</p>
		        </div>
		      </div>
		    );
		  }
		
		  if (error) {
		    return (
		      <div className="min-h-screen flex items-center justify-center bg-gray-50">
		        <div className="text-center">
		          <p className="text-red-600 mb-4">Authentication error: {error}</p>
		          <button 
		            onClick={() => window.location.reload()} 
		            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
		          >
		            Retry
		          </button>
		        </div>
		      </div>
		    );
		  }
		
		  return isAuthenticated ? <Dashboard /> : <Auth />;
		};
		
		export default Index;]]></file>
	<file path='src\pages\Notebook.tsx'><![CDATA[
		
		import React, { useState } from 'react';
		import { useParams } from 'react-router-dom';
		import { useNotebooks } from '@/hooks/useNotebooks';
		import { useSources } from '@/hooks/useSources';
		import { useIsDesktop } from '@/hooks/useIsDesktop';
		import NotebookHeader from '@/components/notebook/NotebookHeader';
		import SourcesSidebar from '@/components/notebook/SourcesSidebar';
		import ChatArea from '@/components/notebook/ChatArea';
		import StudioSidebar from '@/components/notebook/StudioSidebar';
		import MobileNotebookTabs from '@/components/notebook/MobileNotebookTabs';
		import { Citation } from '@/types/message';
		
		const Notebook = () => {
		  const { id: notebookId } = useParams();
		  const { notebooks } = useNotebooks();
		  const { sources } = useSources(notebookId);
		  const [selectedCitation, setSelectedCitation] = useState<Citation | null>(null);
		  const isDesktop = useIsDesktop();
		
		  const notebook = notebooks?.find(n => n.id === notebookId);
		  const hasSource = sources && sources.length > 0;
		  const isSourceDocumentOpen = !!selectedCitation;
		
		  const handleCitationClick = (citation: Citation) => {
		    setSelectedCitation(citation);
		  };
		
		  const handleCitationClose = () => {
		    setSelectedCitation(null);
		  };
		
		  // Dynamic width calculations for desktop - expand studio when editing notes
		  const sourcesWidth = isSourceDocumentOpen ? 'w-[35%]' : 'w-[25%]';
		  const studioWidth = 'w-[30%]'; // Expanded width for note editing
		  const chatWidth = isSourceDocumentOpen ? 'w-[35%]' : 'w-[45%]';
		
		  return (
		    <div className="h-screen bg-white flex flex-col overflow-hidden">
		      <NotebookHeader 
		        title={notebook?.title || 'Untitled Notebook'} 
		        notebookId={notebookId} 
		      />
		      
		      {isDesktop ? (
		        // Desktop layout (3-column)
		        <div className="flex-1 flex overflow-hidden">
		          <div className={`${sourcesWidth} flex-shrink-0`}>
		            <SourcesSidebar 
		              hasSource={hasSource || false} 
		              notebookId={notebookId}
		              selectedCitation={selectedCitation}
		              onCitationClose={handleCitationClose}
		              setSelectedCitation={setSelectedCitation}
		            />
		          </div>
		          
		          <div className={`${chatWidth} flex-shrink-0`}>
		            <ChatArea 
		              hasSource={hasSource || false} 
		              notebookId={notebookId}
		              notebook={notebook}
		              onCitationClick={handleCitationClick}
		            />
		          </div>
		          
		          <div className={`${studioWidth} flex-shrink-0`}>
		            <StudioSidebar 
		              notebookId={notebookId} 
		              onCitationClick={handleCitationClick}
		            />
		          </div>
		        </div>
		      ) : (
		        // Mobile/Tablet layout (tabs)
		        <MobileNotebookTabs
		          hasSource={hasSource || false}
		          notebookId={notebookId}
		          notebook={notebook}
		          selectedCitation={selectedCitation}
		          onCitationClose={handleCitationClose}
		          setSelectedCitation={setSelectedCitation}
		          onCitationClick={handleCitationClick}
		        />
		      )}
		    </div>
		  );
		};
		
		export default Notebook;]]></file>
	<file path='src\pages\NotFound.tsx'><![CDATA[
		import { useLocation } from "react-router-dom";
		import { useEffect } from "react";
		
		const NotFound = () => {
		  const location = useLocation();
		
		  useEffect(() => {
		    console.error(
		      "404 Error: User attempted to access non-existent route:",
		      location.pathname
		    );
		  }, [location.pathname]);
		
		  return (
		    <div className="min-h-screen flex items-center justify-center bg-gray-100">
		      <div className="text-center">
		        <h1 className="text-4xl font-bold mb-4">404</h1>
		        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
		        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
		          Return to Home
		        </a>
		      </div>
		    </div>
		  );
		};
		
		export default NotFound;]]></file>
	<file path='src\services\authService.ts'>
		
		import { useAuth } from '@/contexts/AuthContext';
		import { useToast } from '@/hooks/use-toast';
		import { useNavigate } from 'react-router-dom';
		
		export const useLogout = () => {
		  const { signOut } = useAuth();
		  const { toast } = useToast();
		  const navigate = useNavigate();
		
		  const logout = async () => {
		    try {
		      await signOut();
		      
		      toast({
		        title: "Signed out",
		        description: "You have been successfully signed out."
		      });
		      
		      // Redirect to auth page
		      navigate('/auth', { replace: true });
		      
		    } catch (error: any) {
		      console.error('Logout error:', error);
		      
		      // Even if there's an error, redirect to auth page
		      toast({
		        title: "Signed out",
		        description: "You have been signed out locally.",
		        variant: "default"
		      });
		      
		      navigate('/auth', { replace: true });
		    }
		  };
		
		  return { logout };
		};</file>
	<file path='src\types\message.ts'>
		
		export interface MessageSegment {
		  text: string;
		  citation_id?: number;
		}
		
		export interface Citation {
		  citation_id: number;
		  source_id: string;
		  source_title: string;
		  source_type: string;
		  chunk_lines_from?: number;
		  chunk_lines_to?: number;
		  chunk_index?: number;
		  excerpt?: string;
		}
		
		export interface EnhancedChatMessage {
		  id: number;
		  session_id: string;
		  message: {
		    type: 'human' | 'ai';
		    content: string | {
		      segments: MessageSegment[];
		      citations: Citation[];
		    };
		    additional_kwargs?: any;
		    response_metadata?: any;
		    tool_calls?: any[];
		    invalid_tool_calls?: any[];
		  };
		}</file>
	<file path='src\vite-env.d.ts'><![CDATA[
		/// <reference types="vite/client" />]]></file>
	<file path='supabase\config.toml'>
		
		project_id = ""
		
		[auth]
		enabled = true
		site_url = "http://localhost:5173"
		additional_redirect_urls = ["https://localhost:5173"]
		jwt_expiry = 3600
		
		[auth.email]
		enable_signup = true
		double_confirm_changes = true
		enable_confirmations = false
		
		[db]
		port = 54322
		shadow_port = 54320
		major_version = 15
		
		[db.pooler]
		enabled = false
		port = 54329
		pool_mode = "transaction"
		default_pool_size = 20
		max_client_conn = 100
		
		[realtime]
		enabled = true
		ip_version = "IPv4"
		
		[studio]
		enabled = true
		port = 54323
		api_url = "http://127.0.0.1"
		
		[inbucket]
		enabled = true
		port = 54324
		smtp_port = 54325
		pop3_port = 54326
		
		[storage]
		enabled = true
		file_size_limit = "50MiB"
		
		[edge_runtime]
		enabled = true
		ip_version = "IPv4"
		
		[analytics]
		enabled = false
		
		[functions.generate-notebook-content]
		verify_jwt = true
		
		[functions.send-chat-message]
		verify_jwt = true
		
		[functions.process-document]
		verify_jwt = true
		
		[functions.process-document-callback]
		verify_jwt = false
		
		[functions.process-additional-sources]
		verify_jwt = true</file>
	<file path='supabase\functions\audio-generation-callback\index.ts'><![CDATA[
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const body = await req.json()
		    console.log('Audio generation callback received:', body)
		    
		    const { notebook_id, audio_url, status, error } = body
		    
		    if (!notebook_id) {
		      return new Response(
		        JSON.stringify({ error: 'Notebook ID is required' }),
		        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
		    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
		    const supabase = createClient(supabaseUrl, supabaseServiceKey)
		
		    if (status === 'success' && audio_url) {
		      // Set expiration time (24 hours from now)
		      const expiresAt = new Date()
		      expiresAt.setHours(expiresAt.getHours() + 24)
		
		      // Update notebook with audio URL and success status
		      const { error: updateError } = await supabase
		        .from('notebooks')
		        .update({
		          audio_overview_url: audio_url,
		          audio_url_expires_at: expiresAt.toISOString(),
		          audio_overview_generation_status: 'completed'
		        })
		        .eq('id', notebook_id)
		
		      if (updateError) {
		        console.error('Error updating notebook with audio URL:', updateError)
		        throw updateError
		      }
		
		      console.log('Audio overview completed successfully for notebook:', notebook_id)
		    } else {
		      // Update notebook with failed status
		      const { error: updateError } = await supabase
		        .from('notebooks')
		        .update({
		          audio_overview_generation_status: 'failed'
		        })
		        .eq('id', notebook_id)
		
		      if (updateError) {
		        console.error('Error updating notebook status to failed:', updateError)
		        throw updateError
		      }
		
		      console.log('Audio generation failed for notebook:', notebook_id, 'Error:', error)
		    }
		
		    return new Response(
		      JSON.stringify({ success: true }),
		      { 
		        status: 200, 
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
		      }
		    )
		
		  } catch (error) {
		    console.error('Error in audio-generation-callback:', error)
		    return new Response(
		      JSON.stringify({ 
		        error: error.message || 'Failed to process callback' 
		      }),
		      { 
		        status: 500, 
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
		      }
		    )
		  }
		})]]></file>
	<file path='supabase\functions\generate-audio-overview\index.ts'>
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const { notebookId } = await req.json()
		    
		    if (!notebookId) {
		      return new Response(
		        JSON.stringify({ error: 'Notebook ID is required' }),
		        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
		    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
		    const supabase = createClient(supabaseUrl, supabaseServiceKey)
		
		    // Update notebook status to indicate audio generation has started
		    const { error: updateError } = await supabase
		      .from('notebooks')
		      .update({
		        audio_overview_generation_status: 'generating'
		      })
		      .eq('id', notebookId)
		
		    if (updateError) {
		      console.error('Error updating notebook status:', updateError)
		      throw updateError
		    }
		
		    // Get audio generation webhook URL and auth from secrets
		    const audioGenerationWebhookUrl = Deno.env.get('AUDIO_GENERATION_WEBHOOK_URL')
		    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')
		
		    if (!audioGenerationWebhookUrl || !authHeader) {
		      console.error('Missing audio generation webhook URL or auth')
		      return new Response(
		        JSON.stringify({ error: 'Audio generation service not configured' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Starting audio overview generation for notebook:', notebookId)
		
		    // Start the background task without awaiting
		    EdgeRuntime.waitUntil(
		      (async () => {
		        try {
		          // Call the external audio generation webhook
		          const audioResponse = await fetch(audioGenerationWebhookUrl, {
		            method: 'POST',
		            headers: {
		              'Content-Type': 'application/json',
		              'Authorization': authHeader,
		            },
		            body: JSON.stringify({
		              notebook_id: notebookId,
		              callback_url: `${supabaseUrl}/functions/v1/audio-generation-callback`
		            })
		          })
		
		          if (!audioResponse.ok) {
		            const errorText = await audioResponse.text()
		            console.error('Audio generation webhook failed:', errorText)
		            
		            // Update status to failed
		            await supabase
		              .from('notebooks')
		              .update({ audio_overview_generation_status: 'failed' })
		              .eq('id', notebookId)
		          } else {
		            console.log('Audio generation webhook called successfully for notebook:', notebookId)
		          }
		        } catch (error) {
		          console.error('Background audio generation error:', error)
		          
		          // Update status to failed
		          await supabase
		            .from('notebooks')
		            .update({ audio_overview_generation_status: 'failed' })
		            .eq('id', notebookId)
		        }
		      })()
		    )
		
		    // Return immediately with success status
		    return new Response(
		      JSON.stringify({
		        success: true,
		        message: 'Audio generation started',
		        status: 'generating'
		      }),
		      { 
		        status: 200, 
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
		      }
		    )
		
		  } catch (error) {
		    console.error('Error in generate-audio-overview:', error)
		    return new Response(
		      JSON.stringify({ 
		        error: error.message || 'Failed to start audio generation' 
		      }),
		      { 
		        status: 500, 
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
		      }
		    )
		  }
		})</file>
	<file path='supabase\functions\generate-note-title\index.ts'><![CDATA[
		
		import "https://deno.land/x/xhr@0.1.0/mod.ts";
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
		
		const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		};
		
		serve(async (req) => {
		  // Handle CORS preflight requests
		  if (req.method === 'OPTIONS') {
		    return new Response(null, { headers: corsHeaders });
		  }
		
		  try {
		    const { content } = await req.json();
		
		    if (!content) {
		      return new Response(
		        JSON.stringify({ error: 'Content is required' }), 
		        { 
		          status: 400, 
		          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
		        }
		      );
		    }
		
		    // Parse content if it's a structured AI response
		    let textContent = content;
		    try {
		      const parsed = JSON.parse(content);
		      if (parsed.segments && parsed.segments.length > 0) {
		        // Extract text from first few segments
		        textContent = parsed.segments
		          .slice(0, 3)
		          .map((segment: any) => segment.text)
		          .join(' ');
		      }
		    } catch (e) {
		      // Content is already plain text
		    }
		
		    // Truncate content to avoid token limits
		    const truncatedContent = textContent.substring(0, 1000);
		
		    const response = await fetch('https://api.openai.com/v1/chat/completions', {
		      method: 'POST',
		      headers: {
		        'Authorization': `Bearer ${openAIApiKey}`,
		        'Content-Type': 'application/json',
		      },
		      body: JSON.stringify({
		        model: 'gpt-4o-mini',
		        messages: [
		          { 
		            role: 'system', 
		            content: 'You are a helpful assistant that generates concise, descriptive titles. Generate a title that is exactly 5 words or fewer, capturing the main topic or theme of the content. Return only the title, nothing else.' 
		          },
		          { 
		            role: 'user', 
		            content: `Generate a 5-word title for this content: ${truncatedContent}` 
		          }
		        ],
		        max_tokens: 20,
		        temperature: 0.7,
		      }),
		    });
		
		    if (!response.ok) {
		      throw new Error(`OpenAI API error: ${response.status}`);
		    }
		
		    const data = await response.json();
		    const generatedTitle = data.choices[0].message.content.trim();
		
		    console.log('Generated title:', generatedTitle);
		
		    return new Response(
		      JSON.stringify({ title: generatedTitle }), 
		      {
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
		      }
		    );
		  } catch (error) {
		    console.error('Error in generate-note-title function:', error);
		    return new Response(
		      JSON.stringify({ error: error.message }), 
		      {
		        status: 500,
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
		      }
		    );
		  }
		});]]></file>
	<file path='supabase\functions\generate-notebook-content\index.ts'><![CDATA[
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const { notebookId, filePath, sourceType } = await req.json()
		
		    if (!notebookId || !sourceType) {
		      return new Response(
		        JSON.stringify({ error: 'notebookId and sourceType are required' }),
		        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Processing request:', { notebookId, filePath, sourceType });
		
		    // Get environment variables
		    const webServiceUrl = Deno.env.get('NOTEBOOK_GENERATION_URL')
		    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')
		
		    if (!webServiceUrl || !authHeader) {
		      console.error('Missing environment variables:', {
		        hasUrl: !!webServiceUrl,
		        hasAuth: !!authHeader
		      })
		      
		      return new Response(
		        JSON.stringify({ error: 'Web service configuration missing' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    // Initialize Supabase client
		    const supabaseClient = createClient(
		      Deno.env.get('SUPABASE_URL') ?? '',
		      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
		    )
		
		    // Update notebook status to 'generating'
		    await supabaseClient
		      .from('notebooks')
		      .update({ generation_status: 'generating' })
		      .eq('id', notebookId)
		
		    console.log('Calling external web service...')
		
		    // Prepare payload based on source type
		    let payload: any = {
		      sourceType: sourceType
		    };
		
		    if (filePath) {
		      // For file sources (PDF, audio) or URLs (website, YouTube)
		      payload.filePath = filePath;
		    } else {
		      // For text sources, we need to get the content from the database
		      const { data: source } = await supabaseClient
		        .from('sources')
		        .select('content')
		        .eq('notebook_id', notebookId)
		        .single();
		      
		      if (source?.content) {
		        payload.content = source.content.substring(0, 5000); // Limit content size
		      }
		    }
		
		    console.log('Sending payload to web service:', payload);
		
		    // Call external web service
		    const response = await fetch(webServiceUrl, {
		      method: 'POST',
		      headers: {
		        'Content-Type': 'application/json',
		        'Authorization': authHeader,
		      },
		      body: JSON.stringify(payload)
		    })
		
		    if (!response.ok) {
		      console.error('Web service error:', response.status, response.statusText)
		      const errorText = await response.text();
		      console.error('Error response:', errorText);
		      
		      // Update status to failed
		      await supabaseClient
		        .from('notebooks')
		        .update({ generation_status: 'failed' })
		        .eq('id', notebookId)
		
		      return new Response(
		        JSON.stringify({ error: 'Failed to generate content from web service' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    const generatedData = await response.json()
		    console.log('Generated data:', generatedData)
		
		    // Parse the response format: object with output property
		    let title, description, notebookIcon, backgroundColor, exampleQuestions;
		    
		    if (generatedData && generatedData.output) {
		      const output = generatedData.output;
		      title = output.title;
		      description = output.summary;
		      notebookIcon = output.notebook_icon;
		      backgroundColor = output.background_color;
		      exampleQuestions = output.example_questions || [];
		    } else {
		      console.error('Unexpected response format:', generatedData)
		      
		      await supabaseClient
		        .from('notebooks')
		        .update({ generation_status: 'failed' })
		        .eq('id', notebookId)
		
		      return new Response(
		        JSON.stringify({ error: 'Invalid response format from web service' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    if (!title) {
		      console.error('No title returned from web service')
		      
		      await supabaseClient
		        .from('notebooks')
		        .update({ generation_status: 'failed' })
		        .eq('id', notebookId)
		
		      return new Response(
		        JSON.stringify({ error: 'No title in response from web service' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    // Update notebook with generated content including icon, color, and example questions
		    const { error: notebookError } = await supabaseClient
		      .from('notebooks')
		      .update({
		        title: title,
		        description: description || null,
		        icon: notebookIcon || '📝',
		        color: backgroundColor || 'bg-gray-100',
		        example_questions: exampleQuestions || [],
		        generation_status: 'completed'
		      })
		      .eq('id', notebookId)
		
		    if (notebookError) {
		      console.error('Notebook update error:', notebookError)
		      return new Response(
		        JSON.stringify({ error: 'Failed to update notebook' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Successfully updated notebook with example questions:', exampleQuestions)
		
		    return new Response(
		      JSON.stringify({ 
		        success: true, 
		        title, 
		        description,
		        icon: notebookIcon,
		        color: backgroundColor,
		        exampleQuestions,
		        message: 'Notebook content generated successfully' 
		      }),
		      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		
		  } catch (error) {
		    console.error('Edge function error:', error)
		    return new Response(
		      JSON.stringify({ error: 'Internal server error' }),
		      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		  }
		})]]></file>
	<file path='supabase\functions\process-additional-sources\index.ts'>
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  // Handle CORS preflight requests
		  if (req.method === 'OPTIONS') {
		    return new Response(null, { headers: corsHeaders });
		  }
		
		  try {
		    const { type, notebookId, urls, title, content, timestamp, sourceIds } = await req.json();
		    
		    console.log(`Process additional sources received ${type} request for notebook ${notebookId}`);
		
		    // Get the webhook URL from Supabase secrets
		    const webhookUrl = Deno.env.get('ADDITIONAL_SOURCES_WEBHOOK_URL');
		    if (!webhookUrl) {
		      throw new Error('ADDITIONAL_SOURCES_WEBHOOK_URL not configured');
		    }
		
		    // Get the auth token from Supabase secrets (same as generate-notebook-content)
		    const authToken = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
		    if (!authToken) {
		      throw new Error('NOTEBOOK_GENERATION_AUTH not configured');
		    }
		
		    // Prepare the webhook payload
		    let webhookPayload;
		    
		    if (type === 'multiple-websites') {
		      webhookPayload = {
		        type: 'multiple-websites',
		        notebookId,
		        urls,
		        sourceIds, // Array of source IDs corresponding to the URLs
		        timestamp
		      };
		    } else if (type === 'copied-text') {
		      webhookPayload = {
		        type: 'copied-text',
		        notebookId,
		        title,
		        content,
		        sourceId: sourceIds?.[0], // Single source ID for copied text
		        timestamp
		      };
		    } else {
		      throw new Error(`Unsupported type: ${type}`);
		    }
		
		    console.log('Sending webhook payload:', JSON.stringify(webhookPayload, null, 2));
		
		    // Send to webhook with authentication
		    const response = await fetch(webhookUrl, {
		      method: 'POST',
		      headers: {
		        'Content-Type': 'application/json',
		        'Authorization': authToken,
		        ...corsHeaders
		      },
		      body: JSON.stringify(webhookPayload)
		    });
		
		    if (!response.ok) {
		      const errorText = await response.text();
		      console.error('Webhook request failed:', response.status, errorText);
		      throw new Error(`Webhook request failed: ${response.status} - ${errorText}`);
		    }
		
		    const webhookResponse = await response.text();
		    console.log('Webhook response:', webhookResponse);
		
		    return new Response(JSON.stringify({ 
		      success: true, 
		      message: `${type} data sent to webhook successfully`,
		      webhookResponse 
		    }), {
		      headers: { 
		        'Content-Type': 'application/json',
		        ...corsHeaders 
		      },
		    });
		
		  } catch (error) {
		    console.error('Process additional sources error:', error);
		    
		    return new Response(JSON.stringify({ 
		      error: error.message,
		      success: false 
		    }), {
		      status: 500,
		      headers: { 
		        'Content-Type': 'application/json',
		        ...corsHeaders 
		      },
		    });
		  }
		});</file>
	<file path='supabase\functions\process-document-callback\index.ts'>
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const payload = await req.json()
		    console.log('Document processing callback received:', payload);
		
		    const { source_id, content, summary, display_name, title, status, error } = payload
		
		    if (!source_id) {
		      return new Response(
		        JSON.stringify({ error: 'source_id is required' }),
		        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    // Initialize Supabase client
		    const supabaseClient = createClient(
		      Deno.env.get('SUPABASE_URL') ?? '',
		      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
		    )
		
		    // Prepare update data
		    const updateData: any = {
		      processing_status: status || 'completed',
		      updated_at: new Date().toISOString()
		    }
		
		    if (content) {
		      updateData.content = content
		    }
		
		    if (summary) {
		      updateData.summary = summary
		    }
		
		    // Use title if provided, otherwise use display_name, for backward compatibility
		    if (title) {
		      updateData.title = title
		    } else if (display_name) {
		      updateData.title = display_name
		    }
		
		    if (error) {
		      updateData.processing_status = 'failed'
		      console.error('Document processing failed:', error)
		    }
		
		    console.log('Updating source with data:', updateData);
		
		    // Update the source record
		    const { data, error: updateError } = await supabaseClient
		      .from('sources')
		      .update(updateData)
		      .eq('id', source_id)
		      .select()
		      .single()
		
		    if (updateError) {
		      console.error('Error updating source:', updateError)
		      return new Response(
		        JSON.stringify({ error: 'Failed to update source', details: updateError }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Source updated successfully:', data);
		
		    return new Response(
		      JSON.stringify({ success: true, message: 'Source updated successfully', data }),
		      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		
		  } catch (error) {
		    console.error('Error in process-document-callback function:', error)
		    return new Response(
		      JSON.stringify({ error: 'Internal server error' }),
		      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		  }
		})</file>
	<file path='supabase\functions\process-document\index.ts'><![CDATA[
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const { sourceId, filePath, sourceType } = await req.json()
		
		    if (!sourceId || !filePath || !sourceType) {
		      return new Response(
		        JSON.stringify({ error: 'sourceId, filePath, and sourceType are required' }),
		        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Processing document:', { source_id: sourceId, file_path: filePath, source_type: sourceType });
		
		    // Get environment variables
		    const webhookUrl = Deno.env.get('DOCUMENT_PROCESSING_WEBHOOK_URL')
		    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')
		
		    if (!webhookUrl) {
		      console.error('Missing DOCUMENT_PROCESSING_WEBHOOK_URL environment variable')
		      
		      // Initialize Supabase client to update status
		      const supabaseClient = createClient(
		        Deno.env.get('SUPABASE_URL') ?? '',
		        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
		      )
		
		      // Update source status to failed
		      await supabaseClient
		        .from('sources')
		        .update({ processing_status: 'failed' })
		        .eq('id', sourceId)
		
		      return new Response(
		        JSON.stringify({ error: 'Document processing webhook URL not configured' }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    console.log('Calling external webhook:', webhookUrl);
		
		    // Create the file URL for public access
		    const fileUrl = `${Deno.env.get('SUPABASE_URL')}/storage/v1/object/public/sources/${filePath}`
		
		    // Prepare the payload for the webhook with correct variable names
		    const payload = {
		      source_id: sourceId,
		      file_url: fileUrl,
		      file_path: filePath,
		      source_type: sourceType,
		      callback_url: `${Deno.env.get('SUPABASE_URL')}/functions/v1/process-document-callback`
		    }
		
		    console.log('Webhook payload:', payload);
		
		    // Call external webhook with proper headers
		    const headers: Record<string, string> = {
		      'Content-Type': 'application/json',
		    }
		
		    if (authHeader) {
		      headers['Authorization'] = authHeader
		    }
		
		    const response = await fetch(webhookUrl, {
		      method: 'POST',
		      headers: headers,
		      body: JSON.stringify(payload)
		    })
		
		    if (!response.ok) {
		      const errorText = await response.text();
		      console.error('Webhook call failed:', response.status, errorText);
		      
		      // Initialize Supabase client to update status
		      const supabaseClient = createClient(
		        Deno.env.get('SUPABASE_URL') ?? '',
		        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
		      )
		
		      // Update source status to failed
		      await supabaseClient
		        .from('sources')
		        .update({ processing_status: 'failed' })
		        .eq('id', sourceId)
		
		      return new Response(
		        JSON.stringify({ error: 'Document processing failed', details: errorText }),
		        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		      )
		    }
		
		    const result = await response.json()
		    console.log('Webhook response:', result);
		
		    return new Response(
		      JSON.stringify({ success: true, message: 'Document processing initiated', result }),
		      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		
		  } catch (error) {
		    console.error('Error in process-document function:', error)
		    return new Response(
		      JSON.stringify({ error: 'Internal server error' }),
		      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
		    )
		  }
		})]]></file>
	<file path='supabase\functions\refresh-audio-url\index.ts'>
		
		import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
		import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  // Handle CORS preflight requests
		  if (req.method === 'OPTIONS') {
		    return new Response('ok', { headers: corsHeaders })
		  }
		
		  try {
		    const { notebookId } = await req.json()
		
		    if (!notebookId) {
		      throw new Error('Notebook ID is required')
		    }
		
		    // Initialize Supabase client
		    const supabase = createClient(
		      Deno.env.get('SUPABASE_URL') ?? '',
		      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
		    )
		
		    // Get the current notebook to find the audio file path
		    const { data: notebook, error: fetchError } = await supabase
		      .from('notebooks')
		      .select('audio_overview_url')
		      .eq('id', notebookId)
		      .single()
		
		    if (fetchError) {
		      console.error('Error fetching notebook:', fetchError)
		      throw new Error('Failed to fetch notebook')
		    }
		
		    if (!notebook.audio_overview_url) {
		      throw new Error('No audio overview URL found')
		    }
		
		    // Extract the file path from the existing URL
		    // Assuming the URL format is similar to: .../storage/v1/object/sign/bucket/path
		    const urlParts = notebook.audio_overview_url.split('/')
		    const bucketIndex = urlParts.findIndex(part => part === 'audio')
		    
		    if (bucketIndex === -1) {
		      throw new Error('Invalid audio URL format')
		    }
		
		    // Reconstruct the file path from the URL
		    const filePath = urlParts.slice(bucketIndex + 1).join('/')
		
		    console.log('Refreshing signed URL for path:', filePath)
		
		    // Generate a new signed URL with 24 hours expiration
		    const { data: signedUrlData, error: signError } = await supabase.storage
		      .from('audio')
		      .createSignedUrl(filePath, 86400) // 24 hours in seconds
		
		    if (signError) {
		      console.error('Error creating signed URL:', signError)
		      throw new Error('Failed to create signed URL')
		    }
		
		    // Calculate new expiry time (24 hours from now)
		    const newExpiryTime = new Date()
		    newExpiryTime.setHours(newExpiryTime.getHours() + 24)
		
		    // Update the notebook with the new signed URL and expiry time
		    const { error: updateError } = await supabase
		      .from('notebooks')
		      .update({
		        audio_overview_url: signedUrlData.signedUrl,
		        audio_url_expires_at: newExpiryTime.toISOString()
		      })
		      .eq('id', notebookId)
		
		    if (updateError) {
		      console.error('Error updating notebook:', updateError)
		      throw new Error('Failed to update notebook with new URL')
		    }
		
		    console.log('Successfully refreshed audio URL for notebook:', notebookId)
		
		    return new Response(
		      JSON.stringify({ 
		        success: true,
		        audioUrl: signedUrlData.signedUrl,
		        expiresAt: newExpiryTime.toISOString()
		      }),
		      {
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
		      }
		    )
		
		  } catch (error) {
		    console.error('Error in refresh-audio-url function:', error)
		    return new Response(
		      JSON.stringify({ 
		        error: error.message || 'Failed to refresh audio URL'
		      }),
		      {
		        status: 400,
		        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
		      }
		    )
		  }
		})</file>
	<file path='supabase\functions\send-chat-message\index.ts'>
		
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  // Handle CORS preflight requests
		  if (req.method === 'OPTIONS') {
		    return new Response(null, { headers: corsHeaders });
		  }
		
		  try {
		    const { session_id, message, user_id } = await req.json();
		    
		    console.log('Received message:', { session_id, message, user_id });
		
		    // Get the webhook URL and auth header from environment
		    const webhookUrl = Deno.env.get('NOTEBOOK_CHAT_URL');
		    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
		    
		    if (!webhookUrl) {
		      throw new Error('NOTEBOOK_CHAT_URL environment variable not set');
		    }
		
		    if (!authHeader) {
		      throw new Error('NOTEBOOK_GENERATION_AUTH environment variable not set');
		    }
		
		    console.log('Sending to webhook with auth header');
		
		    // Send message to n8n webhook with authentication
		    const webhookResponse = await fetch(webhookUrl, {
		      method: 'POST',
		      headers: {
		        'Content-Type': 'application/json',
		        'Authorization': authHeader,
		      },
		      body: JSON.stringify({
		        session_id,
		        message,
		        user_id,
		        timestamp: new Date().toISOString()
		      })
		    });
		
		    if (!webhookResponse.ok) {
		      console.error(`Webhook responded with status: ${webhookResponse.status}`);
		      const errorText = await webhookResponse.text();
		      console.error('Webhook error response:', errorText);
		      throw new Error(`Webhook responded with status: ${webhookResponse.status}`);
		    }
		
		    const webhookData = await webhookResponse.json();
		    console.log('Webhook response:', webhookData);
		
		    return new Response(
		      JSON.stringify({ success: true, data: webhookData }),
		      { 
		        headers: { 
		          ...corsHeaders,
		          'Content-Type': 'application/json' 
		        } 
		      }
		    );
		
		  } catch (error) {
		    console.error('Error in send-chat-message:', error);
		    
		    return new Response(
		      JSON.stringify({ 
		        error: error.message || 'Failed to send message to webhook' 
		      }),
		      { 
		        status: 500,
		        headers: { 
		          ...corsHeaders,
		          'Content-Type': 'application/json' 
		        }
		      }
		    );
		  }
		});</file>
	<file path='supabase\functions\webhook-handler\index.ts'>
		
		import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
		
		const corsHeaders = {
		  'Access-Control-Allow-Origin': '*',
		  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
		}
		
		serve(async (req) => {
		  // Handle CORS preflight requests
		  if (req.method === 'OPTIONS') {
		    return new Response(null, { headers: corsHeaders });
		  }
		
		  try {
		    const { type, notebookId, urls, title, content, timestamp } = await req.json();
		    
		    console.log(`Webhook handler received ${type} request for notebook ${notebookId}`);
		
		    // Get the webhook URL from Supabase secrets
		    const webhookUrl = Deno.env.get('WEBHOOK_URL');
		    if (!webhookUrl) {
		      throw new Error('WEBHOOK_URL not configured');
		    }
		
		    // Get the auth token from Supabase secrets (same as generate-notebook-content)
		    const authToken = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
		    if (!authToken) {
		      throw new Error('NOTEBOOK_GENERATION_AUTH not configured');
		    }
		
		    // Prepare the webhook payload
		    let webhookPayload;
		    
		    if (type === 'multiple-websites') {
		      webhookPayload = {
		        type: 'multiple-websites',
		        notebookId,
		        urls,
		        timestamp
		      };
		    } else if (type === 'copied-text') {
		      webhookPayload = {
		        type: 'copied-text',
		        notebookId,
		        title,
		        content,
		        timestamp
		      };
		    } else {
		      throw new Error(`Unsupported type: ${type}`);
		    }
		
		    console.log('Sending webhook payload:', JSON.stringify(webhookPayload, null, 2));
		
		    // Send to webhook with authentication
		    const response = await fetch(webhookUrl, {
		      method: 'POST',
		      headers: {
		        'Content-Type': 'application/json',
		        'Authorization': `Bearer ${authToken}`,
		        ...corsHeaders
		      },
		      body: JSON.stringify(webhookPayload)
		    });
		
		    if (!response.ok) {
		      const errorText = await response.text();
		      console.error('Webhook request failed:', response.status, errorText);
		      throw new Error(`Webhook request failed: ${response.status} - ${errorText}`);
		    }
		
		    const webhookResponse = await response.text();
		    console.log('Webhook response:', webhookResponse);
		
		    return new Response(JSON.stringify({ 
		      success: true, 
		      message: `${type} data sent to webhook successfully`,
		      webhookResponse 
		    }), {
		      headers: { 
		        'Content-Type': 'application/json',
		        ...corsHeaders 
		      },
		    });
		
		  } catch (error) {
		    console.error('Webhook handler error:', error);
		    
		    return new Response(JSON.stringify({ 
		      error: error.message,
		      success: false 
		    }), {
		      status: 500,
		      headers: { 
		        'Content-Type': 'application/json',
		        ...corsHeaders 
		      },
		    });
		  }
		});</file>
	<file path='supabase\migrations\20250606152423_v0.1.sql'><![CDATA[
		-- ============================================================================
		-- COMPLETE DATABASE MIGRATION SCRIPT
		-- This script recreates the entire database schema for the InsightsLM application
		-- ============================================================================
		
		-- Enable required extensions
		
		CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
		CREATE EXTENSION IF NOT EXISTS "vector";
		
		-- ============================================================================
		-- CUSTOM TYPES
		-- ============================================================================
		
		-- Create enum types
		DO $$ BEGIN
		    CREATE TYPE source_type AS ENUM ('pdf', 'text', 'website', 'youtube', 'audio');
		EXCEPTION
		    WHEN duplicate_object THEN null;
		END $$;
		
		-- ============================================================================
		-- CORE TABLES
		-- ============================================================================
		
		-- Create chat table (if it doesn't exist)
		CREATE TABLE IF NOT EXISTS public.n8n_chat_histories (
		  id serial not null,
		  session_id uuid not null,
		  message jsonb not null,
		  constraint n8n_chat_histories_pkey primary key (id)
		) TABLESPACE pg_default;
		
		-- Create profiles table (if it doesn't exist)
		CREATE TABLE IF NOT EXISTS public.profiles (
		    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
		    email text NOT NULL,
		    full_name text,
		    avatar_url text,
		    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
		    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
		);
		
		-- Create notebooks table
		CREATE TABLE IF NOT EXISTS public.notebooks (
		    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
		    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
		    title text NOT NULL,
		    description text,
		    color text DEFAULT 'gray',
		    icon text DEFAULT '📝',
		    generation_status text DEFAULT 'completed',
		    audio_overview_generation_status text,
		    audio_overview_url text,
		    audio_url_expires_at timestamp with time zone,
		    example_questions text[] DEFAULT '{}',
		    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
		    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
		);
		
		-- Create sources table
		CREATE TABLE IF NOT EXISTS public.sources (
		    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
		    notebook_id uuid NOT NULL REFERENCES public.notebooks(id) ON DELETE CASCADE,
		    title text NOT NULL,
		    type source_type NOT NULL,
		    url text,
		    file_path text,
		    file_size bigint,
		    display_name text,
		    content text,
		    summary text,
		    processing_status text DEFAULT 'pending',
		    metadata jsonb DEFAULT '{}',
		    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
		    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
		);
		
		-- Create notes table
		CREATE TABLE IF NOT EXISTS public.notes (
		    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
		    notebook_id uuid NOT NULL REFERENCES public.notebooks(id) ON DELETE CASCADE,
		    title text NOT NULL,
		    content text NOT NULL,
		    source_type text DEFAULT 'user',
		    extracted_text text,
		    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
		    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
		);
		
		-- Create documents table for vector embeddings
		CREATE TABLE IF NOT EXISTS public.documents (
		    id bigserial PRIMARY KEY,
		    content text,
		    metadata jsonb,
		    embedding vector(1536)
		);
		
		-- ============================================================================
		-- INDEXES
		-- ============================================================================
		
		-- Index for notebooks by user
		CREATE INDEX IF NOT EXISTS idx_notebooks_user_id ON public.notebooks(user_id);
		CREATE INDEX IF NOT EXISTS idx_notebooks_updated_at ON public.notebooks(updated_at DESC);
		
		-- Index for sources by notebook
		CREATE INDEX IF NOT EXISTS idx_sources_notebook_id ON public.sources(notebook_id);
		CREATE INDEX IF NOT EXISTS idx_sources_type ON public.sources(type);
		CREATE INDEX IF NOT EXISTS idx_sources_processing_status ON public.sources(processing_status);
		
		-- Index for notes by notebook
		CREATE INDEX IF NOT EXISTS idx_notes_notebook_id ON public.notes(notebook_id);
		
		-- Index for chat histories by session
		CREATE INDEX IF NOT EXISTS idx_chat_histories_session_id ON public.n8n_chat_histories(session_id);
		
		-- Vector similarity index for documents
		CREATE INDEX IF NOT EXISTS documents_embedding_idx ON public.documents USING hnsw (embedding vector_cosine_ops);
		
		-- ============================================================================
		-- DATABASE FUNCTIONS
		-- ============================================================================
		
		-- Function to handle new user creation
		CREATE OR REPLACE FUNCTION public.handle_new_user()
		RETURNS trigger
		LANGUAGE plpgsql
		SECURITY DEFINER
		SET search_path = ''
		AS $$
		BEGIN
		    INSERT INTO public.profiles (id, email, full_name)
		    VALUES (
		        new.id,
		        new.email,
		        COALESCE(new.raw_user_meta_data ->> 'full_name', new.raw_user_meta_data ->> 'name')
		    );
		    RETURN new;
		END;
		$$;
		
		-- Function to update updated_at timestamp
		CREATE OR REPLACE FUNCTION public.update_updated_at_column()
		RETURNS trigger
		LANGUAGE plpgsql
		AS $$
		BEGIN
		    new.updated_at = timezone('utc'::text, now());
		    RETURN new;
		END;
		$$;
		
		-- Function to check notebook ownership
		CREATE OR REPLACE FUNCTION public.is_notebook_owner(notebook_id_param uuid)
		RETURNS boolean
		LANGUAGE sql
		STABLE SECURITY DEFINER
		AS $$
		    SELECT EXISTS (
		        SELECT 1 
		        FROM public.notebooks 
		        WHERE id = notebook_id_param 
		        AND user_id = auth.uid()
		    );
		$$;
		
		-- Function to check notebook ownership for documents
		CREATE OR REPLACE FUNCTION public.is_notebook_owner_for_document(doc_metadata jsonb)
		RETURNS boolean
		LANGUAGE sql
		STABLE SECURITY DEFINER
		AS $$
		    SELECT EXISTS (
		        SELECT 1 
		        FROM public.notebooks 
		        WHERE id = (doc_metadata->>'notebook_id')::uuid 
		        AND user_id = auth.uid()
		    );
		$$;
		
		-- Function to match documents using vector similarity
		CREATE OR REPLACE FUNCTION public.match_documents(
		    query_embedding vector,
		    match_count integer DEFAULT NULL,
		    filter jsonb DEFAULT '{}'::jsonb
		)
		RETURNS TABLE(
		    id bigint,
		    content text,
		    metadata jsonb,
		    similarity double precision
		)
		LANGUAGE plpgsql
		AS $$
		BEGIN
		    RETURN QUERY
		    SELECT
		        documents.id,
		        documents.content,
		        documents.metadata,
		        1 - (documents.embedding <=> query_embedding) as similarity
		    FROM public.documents
		    WHERE documents.metadata @> filter
		    ORDER BY documents.embedding <=> query_embedding
		    LIMIT match_count;
		END;
		$$;
		
		-- ============================================================================
		-- ROW LEVEL SECURITY (RLS) POLICIES
		-- ============================================================================
		
		-- Enable RLS on all tables
		ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
		ALTER TABLE public.notebooks ENABLE ROW LEVEL SECURITY;
		ALTER TABLE public.sources ENABLE ROW LEVEL SECURITY;
		ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;
		ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
		ALTER TABLE public.n8n_chat_histories ENABLE ROW LEVEL SECURITY;
		
		-- Profiles policies
		DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
		CREATE POLICY "Users can view their own profile"
		    ON public.profiles FOR SELECT
		    USING (auth.uid() = id);
		
		DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
		CREATE POLICY "Users can update their own profile"
		    ON public.profiles FOR UPDATE
		    USING (auth.uid() = id);
		
		-- Notebooks policies
		DROP POLICY IF EXISTS "Users can view their own notebooks" ON public.notebooks;
		CREATE POLICY "Users can view their own notebooks"
		    ON public.notebooks FOR SELECT
		    USING (auth.uid() = user_id);
		
		DROP POLICY IF EXISTS "Users can create their own notebooks" ON public.notebooks;
		CREATE POLICY "Users can create their own notebooks"
		    ON public.notebooks FOR INSERT
		    WITH CHECK (auth.uid() = user_id);
		
		DROP POLICY IF EXISTS "Users can update their own notebooks" ON public.notebooks;
		CREATE POLICY "Users can update their own notebooks"
		    ON public.notebooks FOR UPDATE
		    USING (auth.uid() = user_id);
		
		DROP POLICY IF EXISTS "Users can delete their own notebooks" ON public.notebooks;
		CREATE POLICY "Users can delete their own notebooks"
		    ON public.notebooks FOR DELETE
		    USING (auth.uid() = user_id);
		
		-- Sources policies
		DROP POLICY IF EXISTS "Users can view sources from their notebooks" ON public.sources;
		CREATE POLICY "Users can view sources from their notebooks"
		    ON public.sources FOR SELECT
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = sources.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can create sources in their notebooks" ON public.sources;
		CREATE POLICY "Users can create sources in their notebooks"
		    ON public.sources FOR INSERT
		    WITH CHECK (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = sources.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can update sources in their notebooks" ON public.sources;
		CREATE POLICY "Users can update sources in their notebooks"
		    ON public.sources FOR UPDATE
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = sources.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can delete sources from their notebooks" ON public.sources;
		CREATE POLICY "Users can delete sources from their notebooks"
		    ON public.sources FOR DELETE
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = sources.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		-- Notes policies
		DROP POLICY IF EXISTS "Users can view notes from their notebooks" ON public.notes;
		CREATE POLICY "Users can view notes from their notebooks"
		    ON public.notes FOR SELECT
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = notes.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can create notes in their notebooks" ON public.notes;
		CREATE POLICY "Users can create notes in their notebooks"
		    ON public.notes FOR INSERT
		    WITH CHECK (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = notes.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can update notes in their notebooks" ON public.notes;
		CREATE POLICY "Users can update notes in their notebooks"
		    ON public.notes FOR UPDATE
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = notes.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		DROP POLICY IF EXISTS "Users can delete notes from their notebooks" ON public.notes;
		CREATE POLICY "Users can delete notes from their notebooks"
		    ON public.notes FOR DELETE
		    USING (
		        EXISTS (
		            SELECT 1 FROM public.notebooks 
		            WHERE notebooks.id = notes.notebook_id 
		            AND notebooks.user_id = auth.uid()
		        )
		    );
		
		-- Documents policies
		DROP POLICY IF EXISTS "Users can view documents from their notebooks" ON public.documents;
		CREATE POLICY "Users can view documents from their notebooks"
		    ON public.documents FOR SELECT
		    USING (public.is_notebook_owner_for_document(metadata));
		
		DROP POLICY IF EXISTS "Users can create documents in their notebooks" ON public.documents;
		CREATE POLICY "Users can create documents in their notebooks"
		    ON public.documents FOR INSERT
		    WITH CHECK (public.is_notebook_owner_for_document(metadata));
		
		DROP POLICY IF EXISTS "Users can update documents in their notebooks" ON public.documents;
		CREATE POLICY "Users can update documents in their notebooks"
		    ON public.documents FOR UPDATE
		    USING (public.is_notebook_owner_for_document(metadata));
		
		DROP POLICY IF EXISTS "Users can delete documents from their notebooks" ON public.documents;
		CREATE POLICY "Users can delete documents from their notebooks"
		    ON public.documents FOR DELETE
		    USING (public.is_notebook_owner_for_document(metadata));
		
		-- Chat histories policies
		DROP POLICY IF EXISTS "Users can view chat histories from their notebooks" ON public.n8n_chat_histories;
		CREATE POLICY "Users can view chat histories from their notebooks"
		    ON public.n8n_chat_histories FOR SELECT
		    USING (public.is_notebook_owner(session_id::uuid));
		
		DROP POLICY IF EXISTS "Users can create chat histories in their notebooks" ON public.n8n_chat_histories;
		CREATE POLICY "Users can create chat histories in their notebooks"
		    ON public.n8n_chat_histories FOR INSERT
		    WITH CHECK (public.is_notebook_owner(session_id::uuid));
		
		DROP POLICY IF EXISTS "Users can delete chat histories from their notebooks" ON public.n8n_chat_histories;
		CREATE POLICY "Users can delete chat histories from their notebooks"
		    ON public.n8n_chat_histories FOR DELETE
		    USING (public.is_notebook_owner(session_id::uuid));
		
		-- ============================================================================
		-- TRIGGERS
		-- ============================================================================
		
		DROP TRIGGER IF EXISTS update_profiles_updated_at ON public.profiles;
		DROP TRIGGER IF EXISTS update_notebooks_updated_at ON public.notebooks;
		DROP TRIGGER IF EXISTS update_sources_updated_at ON public.sources;
		DROP TRIGGER IF EXISTS update_notes_updated_at ON public.notes;
		DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
		
		-- Create updated_at triggers
		CREATE TRIGGER update_profiles_updated_at
		    BEFORE UPDATE ON public.profiles
		    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
		CREATE TRIGGER update_notebooks_updated_at
		    BEFORE UPDATE ON public.notebooks
		    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
		CREATE TRIGGER update_sources_updated_at
		    BEFORE UPDATE ON public.sources
		    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
		CREATE TRIGGER update_notes_updated_at
		    BEFORE UPDATE ON public.notes
		    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
		
		-- Auth user trigger
		CREATE TRIGGER on_auth_user_created
		    AFTER INSERT ON auth.users
		    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
		
		-- ============================================================================
		-- REALTIME CONFIGURATION
		-- ============================================================================
		
		-- Enable realtime for tables that need live updates
		ALTER TABLE public.notebooks REPLICA IDENTITY FULL;
		ALTER TABLE public.sources REPLICA IDENTITY FULL;
		ALTER TABLE public.notes REPLICA IDENTITY FULL;
		ALTER TABLE public.n8n_chat_histories REPLICA IDENTITY FULL;
		
		-- Add tables to realtime publication
		ALTER PUBLICATION supabase_realtime ADD TABLE public.notebooks;
		ALTER PUBLICATION supabase_realtime ADD TABLE public.sources;
		ALTER PUBLICATION supabase_realtime ADD TABLE public.notes;
		ALTER PUBLICATION supabase_realtime ADD TABLE public.n8n_chat_histories;
		
		-- =============================================
		-- Storage Buckets and Policies Migration
		-- =============================================
		
		-- Create storage buckets
		INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
		VALUES 
		  -- Sources bucket for user uploads (private)
		  ('sources', 'sources', false, 52428800, ARRAY[
		    'application/pdf',
		    'text/plain',
		    'text/csv',
		    'application/msword',
		    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
		    'audio/mpeg',
		    'audio/wav',
		    'audio/mp4',
		    'audio/m4a'
		  ]),
		  
		  -- Audio bucket for generated content (private)
		  ('audio', 'audio', false, 104857600, ARRAY[
		    'audio/mpeg',
		    'audio/wav',
		    'audio/mp4',
		    'audio/m4a'
		  ]),
		  
		  -- Public images bucket for assets (public)
		  ('public-images', 'public-images', true, 10485760, ARRAY[
		    'image/jpeg',
		    'image/png',
		    'image/gif',
		    'image/webp',
		    'image/svg+xml'
		  ])
		ON CONFLICT (id) DO UPDATE SET
		  file_size_limit = EXCLUDED.file_size_limit,
		  allowed_mime_types = EXCLUDED.allowed_mime_types,
		  public = EXCLUDED.public;
		
		-- =============================================
		-- RLS POLICIES FOR SOURCES BUCKET
		-- =============================================
		
		-- Sources bucket policies (private - users can only access their own files)
		CREATE POLICY "Users can view their own source files"
		ON storage.objects FOR SELECT
		USING (
		  bucket_id = 'sources' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		CREATE POLICY "Users can upload source files to their notebooks"
		ON storage.objects FOR INSERT
		WITH CHECK (
		  bucket_id = 'sources' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		CREATE POLICY "Users can update their own source files"
		ON storage.objects FOR UPDATE
		USING (
		  bucket_id = 'sources' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		CREATE POLICY "Users can delete their own source files"
		ON storage.objects FOR DELETE
		USING (
		  bucket_id = 'sources' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		-- =============================================
		-- RLS POLICIES FOR AUDIO BUCKET
		-- =============================================
		
		-- Audio bucket policies (private - users can only access their own audio files)
		CREATE POLICY "Users can view their own audio files"
		ON storage.objects FOR SELECT
		USING (
		  bucket_id = 'audio' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		CREATE POLICY "Service role can manage audio files"
		ON storage.objects FOR ALL
		USING (
		  bucket_id = 'audio' AND
		  auth.role() = 'service_role'
		);
		
		CREATE POLICY "Users can delete their own audio files"
		ON storage.objects FOR DELETE
		USING (
		  bucket_id = 'audio' AND
		  (storage.foldername(name))[1]::uuid IN (
		    SELECT id FROM notebooks WHERE user_id = auth.uid()
		  )
		);
		
		-- =============================================
		-- RLS POLICIES FOR PUBLIC-IMAGES BUCKET
		-- =============================================
		
		-- Public images bucket policies (public - anyone can read)
		CREATE POLICY "Anyone can view public images"
		ON storage.objects FOR SELECT
		USING (bucket_id = 'public-images');
		
		CREATE POLICY "Service role can manage public images"
		ON storage.objects FOR ALL
		USING (
		  bucket_id = 'public-images' AND
		  auth.role() = 'service_role'
		);]]></file>
	<file path='tailwind.config.ts'>
		import type { Config } from "tailwindcss";
		
		export default {
			darkMode: ["class"],
			content: [
				"./pages/**/*.{ts,tsx}",
				"./components/**/*.{ts,tsx}",
				"./app/**/*.{ts,tsx}",
				"./src/**/*.{ts,tsx}",
			],
			prefix: "",
			safelist: [
				// Background colors for notebook cards
				'bg-red-100', 'bg-blue-100', 'bg-green-100', 'bg-yellow-100', 'bg-purple-100', 
				'bg-pink-100', 'bg-indigo-100', 'bg-gray-100', 'bg-orange-100', 'bg-teal-100',
				'bg-cyan-100', 'bg-emerald-100', 'bg-lime-100', 'bg-amber-100', 'bg-violet-100',
				'bg-fuchsia-100', 'bg-rose-100', 'bg-sky-100', 'bg-slate-100', 'bg-zinc-100',
				'bg-neutral-100', 'bg-stone-100',
				// Border colors for notebook cards
				'border-red-200', 'border-blue-200', 'border-green-200', 'border-yellow-200', 
				'border-purple-200', 'border-pink-200', 'border-indigo-200', 'border-gray-200', 
				'border-orange-200', 'border-teal-200', 'border-cyan-200', 'border-emerald-200', 
				'border-lime-200', 'border-amber-200', 'border-violet-200', 'border-fuchsia-200', 
				'border-rose-200', 'border-sky-200', 'border-slate-200', 'border-zinc-200',
				'border-neutral-200', 'border-stone-200',
			],
			theme: {
				container: {
					center: true,
					padding: '2rem',
					screens: {
						'2xl': '1400px'
					}
				},
				extend: {
					colors: {
						border: 'hsl(var(--border))',
						input: 'hsl(var(--input))',
						ring: 'hsl(var(--ring))',
						background: 'hsl(var(--background))',
						foreground: 'hsl(var(--foreground))',
						primary: {
							DEFAULT: 'hsl(var(--primary))',
							foreground: 'hsl(var(--primary-foreground))'
						},
						secondary: {
							DEFAULT: 'hsl(var(--secondary))',
							foreground: 'hsl(var(--secondary-foreground))'
						},
						destructive: {
							DEFAULT: 'hsl(var(--destructive))',
							foreground: 'hsl(var(--destructive-foreground))'
						},
						muted: {
							DEFAULT: 'hsl(var(--muted))',
							foreground: 'hsl(var(--muted-foreground))'
						},
						accent: {
							DEFAULT: 'hsl(var(--accent))',
							foreground: 'hsl(var(--accent-foreground))'
						},
						popover: {
							DEFAULT: 'hsl(var(--popover))',
							foreground: 'hsl(var(--popover-foreground))'
						},
						card: {
							DEFAULT: 'hsl(var(--card))',
							foreground: 'hsl(var(--card-foreground))'
						},
						sidebar: {
							DEFAULT: 'hsl(var(--sidebar-background))',
							foreground: 'hsl(var(--sidebar-foreground))',
							primary: 'hsl(var(--sidebar-primary))',
							'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
							accent: 'hsl(var(--sidebar-accent))',
							'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
							border: 'hsl(var(--sidebar-border))',
							ring: 'hsl(var(--sidebar-ring))'
						}
					},
					borderRadius: {
						lg: 'var(--radius)',
						md: 'calc(var(--radius) - 2px)',
						sm: 'calc(var(--radius) - 4px)'
					},
					keyframes: {
						'accordion-down': {
							from: {
								height: '0'
							},
							to: {
								height: 'var(--radix-accordion-content-height)'
							}
						},
						'accordion-up': {
							from: {
								height: 'var(--radix-accordion-content-height)'
							},
							to: {
								height: '0'
							}
						}
					},
					animation: {
						'accordion-down': 'accordion-down 0.2s ease-out',
						'accordion-up': 'accordion-up 0.2s ease-out'
					}
				}
			},
			plugins: [require("tailwindcss-animate")],
		} satisfies Config;</file>
	<file path='tsconfig.app.json'>
		{
		  "compilerOptions": {
		    "target": "ES2020",
		    "useDefineForClassFields": true,
		    "lib": ["ES2020", "DOM", "DOM.Iterable"],
		    "module": "ESNext",
		    "skipLibCheck": true,
		
		    /* Bundler mode */
		    "moduleResolution": "bundler",
		    "allowImportingTsExtensions": true,
		    "isolatedModules": true,
		    "moduleDetection": "force",
		    "noEmit": true,
		    "jsx": "react-jsx",
		
		    /* Linting */
		    "strict": false,
		    "noUnusedLocals": false,
		    "noUnusedParameters": false,
		    "noImplicitAny": false,
		    "noFallthroughCasesInSwitch": false,
		
		    "baseUrl": ".",
		    "paths": {
		      "@/*": ["./src/*"]
		    }
		  },
		  "include": ["src"]
		}</file>
	<file path='tsconfig.json'>
		{
		  "files": [],
		  "references": [
		    { "path": "./tsconfig.app.json" },
		    { "path": "./tsconfig.node.json" }
		  ],
		  "compilerOptions": {
		    "baseUrl": ".",
		    "paths": {
		      "@/*": ["./src/*"]
		    },
		    "noImplicitAny": false,
		    "noUnusedParameters": false,
		    "skipLibCheck": true,
		    "allowJs": true,
		    "noUnusedLocals": false,
		    "strictNullChecks": false
		  }
		}</file>
	<file path='tsconfig.node.json'>
		{
		  "compilerOptions": {
		    "target": "ES2022",
		    "lib": ["ES2023"],
		    "module": "ESNext",
		    "skipLibCheck": true,
		
		    /* Bundler mode */
		    "moduleResolution": "bundler",
		    "allowImportingTsExtensions": true,
		    "isolatedModules": true,
		    "moduleDetection": "force",
		    "noEmit": true,
		
		    /* Linting */
		    "strict": true,
		    "noUnusedLocals": false,
		    "noUnusedParameters": false,
		    "noFallthroughCasesInSwitch": true
		  },
		  "include": ["vite.config.ts"]
		}</file>
	<file path='vite.config.ts'><![CDATA[
		import { defineConfig } from "vite";
		import react from "@vitejs/plugin-react-swc";
		import path from "path";
		import { componentTagger } from "lovable-tagger";
		
		// https://vitejs.dev/config/
		export default defineConfig(({ mode }) => ({
		  server: {
		    host: "::",
		    port: 8080,
		  },
		  plugins: [
		    react(),
		    mode === 'development' &&
		    componentTagger(),
		  ].filter(Boolean),
		  resolve: {
		    alias: {
		      "@": path.resolve(__dirname, "./src"),
		    },
		  },
		}));]]></file>
</files>
